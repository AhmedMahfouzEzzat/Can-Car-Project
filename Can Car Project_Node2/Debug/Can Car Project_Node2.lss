
Can Car Project_Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00002b1e  00002bb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800130  00800130  00002be2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00003335  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000042c  00000000  00000000  00003535  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002d6d  00000000  00000000  00003961  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001372  00000000  00000000  000066ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002374  00000000  00000000  00007a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000380  00000000  00000000  00009db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000062a  00000000  00000000  0000a134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c25  00000000  00000000  0000a75e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000065c  00000000  00000000  0000b383  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000068  00000000  00000000  0000b9df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e1       	ldi	r30, 0x1E	; 30
      7c:	fb e2       	ldi	r31, 0x2B	; 43
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 33       	cpi	r26, 0x30	; 48
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e3       	ldi	r26, 0x30	; 48
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 34       	cpi	r26, 0x42	; 66
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 4b 03 	call	0x696	; 0x696 <main>
      9e:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <readRegister>:
 * \see MCP2515 datasheet, chapter 11 - register description
 * \see MCP2515 datasheet, chapter 12 - read instruction
 * \param address Register address
 */
unsigned char readRegister(unsigned char address)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	00 d0       	rcall	.+0      	; 0xac <readRegister+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	8a 83       	std	Y+2, r24	; 0x02
	 /* Send read instruction, address, and receive result */
	 spiMasterChipSelect(1);
      b2:	81 e0       	ldi	r24, 0x01	; 1
      b4:	0e 94 c7 02 	call	0x58e	; 0x58e <spiMasterChipSelect>
	 spiMasterTRANSMIT(READ_INSTRUCTION);
      b8:	83 e0       	ldi	r24, 0x03	; 3
      ba:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(address);
      be:	8a 81       	ldd	r24, Y+2	; 0x02
      c0:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	unsigned char buffer = spiMasterTRANSMIT(0);
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
      ca:	89 83       	std	Y+1, r24	; 0x01
	 spiMasterChipSelect(0);
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	0e 94 c7 02 	call	0x58e	; 0x58e <spiMasterChipSelect>
	 return buffer;
      d2:	89 81       	ldd	r24, Y+1	; 0x01
}
      d4:	0f 90       	pop	r0
      d6:	0f 90       	pop	r0
      d8:	cf 91       	pop	r28
      da:	df 91       	pop	r29
      dc:	08 95       	ret

000000de <writeRegister>:
 * \see MCP2515 datasheet, chapter 12 - write instruction
 * \param address Register address
 * \param value New value of the register
 */
void writeRegister(unsigned char address, unsigned char value)
{
      de:	df 93       	push	r29
      e0:	cf 93       	push	r28
      e2:	00 d0       	rcall	.+0      	; 0xe4 <writeRegister+0x6>
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	89 83       	std	Y+1, r24	; 0x01
      ea:	6a 83       	std	Y+2, r22	; 0x02
	/* Send write instruction, address, and data */
	 spiMasterChipSelect(1);
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	0e 94 c7 02 	call	0x58e	; 0x58e <spiMasterChipSelect>
	 spiMasterTRANSMIT(WRITE_INSTRUCTION);
      f2:	82 e0       	ldi	r24, 0x02	; 2
      f4:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(address);
      f8:	89 81       	ldd	r24, Y+1	; 0x01
      fa:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(value);
      fe:	8a 81       	ldd	r24, Y+2	; 0x02
     100:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterChipSelect(0);
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	0e 94 c7 02 	call	0x58e	; 0x58e <spiMasterChipSelect>
}
     10a:	0f 90       	pop	r0
     10c:	0f 90       	pop	r0
     10e:	cf 91       	pop	r28
     110:	df 91       	pop	r29
     112:	08 95       	ret

00000114 <resetMCP2515>:
/**
 * Send reset instruction to the MCP2515. Device should
 * reinitialize yourself and go to the configuration mode
 */
void resetMCP2515()
{
     114:	df 93       	push	r29
     116:	cf 93       	push	r28
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
	 /* Send reset instruction */
	 spiMasterChipSelect(1);
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	0e 94 c7 02 	call	0x58e	; 0x58e <spiMasterChipSelect>
	 spiMasterTRANSMIT(RESET_INSTRUCTION);
     122:	80 ec       	ldi	r24, 0xC0	; 192
     124:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterChipSelect(0);
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	0e 94 c7 02 	call	0x58e	; 0x58e <spiMasterChipSelect>
}
     12e:	cf 91       	pop	r28
     130:	df 91       	pop	r29
     132:	08 95       	ret

00000134 <setBitTiming>:

unsigned char setBitTiming(unsigned char rCNF1, unsigned char rCNF2, unsigned char rCNF3)
{
     134:	df 93       	push	r29
     136:	cf 93       	push	r28
     138:	00 d0       	rcall	.+0      	; 0x13a <setBitTiming+0x6>
     13a:	0f 92       	push	r0
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
     140:	89 83       	std	Y+1, r24	; 0x01
     142:	6a 83       	std	Y+2, r22	; 0x02
     144:	4b 83       	std	Y+3, r20	; 0x03
	 if(getMode == CONFIGURATION_MODE) { 
     146:	8e e0       	ldi	r24, 0x0E	; 14
     148:	0e 94 53 00 	call	0xa6	; 0xa6 <readRegister>
     14c:	82 95       	swap	r24
     14e:	86 95       	lsr	r24
     150:	87 70       	andi	r24, 0x07	; 7
     152:	84 30       	cpi	r24, 0x04	; 4
     154:	b1 f4       	brne	.+44     	; 0x182 <setBitTiming+0x4e>
		 writeRegister(CNF1, rCNF1);
     156:	8a e2       	ldi	r24, 0x2A	; 42
     158:	69 81       	ldd	r22, Y+1	; 0x01
     15a:	0e 94 6f 00 	call	0xde	; 0xde <writeRegister>
		 writeRegister(CNF2, rCNF2);
     15e:	89 e2       	ldi	r24, 0x29	; 41
     160:	6a 81       	ldd	r22, Y+2	; 0x02
     162:	0e 94 6f 00 	call	0xde	; 0xde <writeRegister>
		 changeBits(CNF3, 0x07, rCNF3);
     166:	88 e2       	ldi	r24, 0x28	; 40
     168:	0e 94 53 00 	call	0xa6	; 0xa6 <readRegister>
     16c:	98 2f       	mov	r25, r24
     16e:	98 7f       	andi	r25, 0xF8	; 248
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	89 2b       	or	r24, r25
     174:	98 2f       	mov	r25, r24
     176:	88 e2       	ldi	r24, 0x28	; 40
     178:	69 2f       	mov	r22, r25
     17a:	0e 94 6f 00 	call	0xde	; 0xde <writeRegister>
		 return 1;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	01 c0       	rjmp	.+2      	; 0x184 <setBitTiming+0x50>
	 }
	 return 0;
     182:	80 e0       	ldi	r24, 0x00	; 0
}
     184:	0f 90       	pop	r0
     186:	0f 90       	pop	r0
     188:	0f 90       	pop	r0
     18a:	cf 91       	pop	r28
     18c:	df 91       	pop	r29
     18e:	08 95       	ret

00000190 <setAcceptanceCriteria>:
 * \param address starting address of 4 registers to setup. It can be mask
 * or filter, doesn't matter
 * \param criterion message identifier criterion to be set
 * \param is_ext 1 if message is extended, otherwise 0 */
void setAcceptanceCriteria (unsigned char address,unsigned long criterion,unsigned char is_ext)
{
     190:	df 93       	push	r29
     192:	cf 93       	push	r28
     194:	00 d0       	rcall	.+0      	; 0x196 <setAcceptanceCriteria+0x6>
     196:	00 d0       	rcall	.+0      	; 0x198 <setAcceptanceCriteria+0x8>
     198:	00 d0       	rcall	.+0      	; 0x19a <setAcceptanceCriteria+0xa>
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	89 83       	std	Y+1, r24	; 0x01
     1a0:	4a 83       	std	Y+2, r20	; 0x02
     1a2:	5b 83       	std	Y+3, r21	; 0x03
     1a4:	6c 83       	std	Y+4, r22	; 0x04
     1a6:	7d 83       	std	Y+5, r23	; 0x05
     1a8:	2e 83       	std	Y+6, r18	; 0x06
	 /* Initialize reading of the receive buffer */
	 spiMasterChipSelect(1);
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	0e 94 c7 02 	call	0x58e	; 0x58e <spiMasterChipSelect>
	 /* Send header and address */
	 spiMasterTRANSMIT(WRITE_INSTRUCTION);
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(address);
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 /* Setup standard or extended identifier */
	 if(is_ext) {
     1bc:	8e 81       	ldd	r24, Y+6	; 0x06
     1be:	88 23       	and	r24, r24
     1c0:	09 f4       	brne	.+2      	; 0x1c4 <setAcceptanceCriteria+0x34>
     1c2:	43 c0       	rjmp	.+134    	; 0x24a <setAcceptanceCriteria+0xba>
	 spiMasterTRANSMIT((unsigned char)(criterion>>3));
     1c4:	8a 81       	ldd	r24, Y+2	; 0x02
     1c6:	9b 81       	ldd	r25, Y+3	; 0x03
     1c8:	ac 81       	ldd	r26, Y+4	; 0x04
     1ca:	bd 81       	ldd	r27, Y+5	; 0x05
     1cc:	68 94       	set
     1ce:	12 f8       	bld	r1, 2
     1d0:	b6 95       	lsr	r27
     1d2:	a7 95       	ror	r26
     1d4:	97 95       	ror	r25
     1d6:	87 95       	ror	r24
     1d8:	16 94       	lsr	r1
     1da:	d1 f7       	brne	.-12     	; 0x1d0 <setAcceptanceCriteria+0x40>
     1dc:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion<<5)|(1<<EXIDE)|((unsigned char)(criterion>>27)));
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	28 2f       	mov	r18, r24
     1e4:	22 95       	swap	r18
     1e6:	22 0f       	add	r18, r18
     1e8:	20 7e       	andi	r18, 0xE0	; 224
     1ea:	8a 81       	ldd	r24, Y+2	; 0x02
     1ec:	9b 81       	ldd	r25, Y+3	; 0x03
     1ee:	ac 81       	ldd	r26, Y+4	; 0x04
     1f0:	bd 81       	ldd	r27, Y+5	; 0x05
     1f2:	07 2e       	mov	r0, r23
     1f4:	7b e1       	ldi	r23, 0x1B	; 27
     1f6:	b6 95       	lsr	r27
     1f8:	a7 95       	ror	r26
     1fa:	97 95       	ror	r25
     1fc:	87 95       	ror	r24
     1fe:	7a 95       	dec	r23
     200:	d1 f7       	brne	.-12     	; 0x1f6 <setAcceptanceCriteria+0x66>
     202:	70 2d       	mov	r23, r0
     204:	82 2b       	or	r24, r18
     206:	88 60       	ori	r24, 0x08	; 8
     208:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion>>19));
     20c:	8a 81       	ldd	r24, Y+2	; 0x02
     20e:	9b 81       	ldd	r25, Y+3	; 0x03
     210:	ac 81       	ldd	r26, Y+4	; 0x04
     212:	bd 81       	ldd	r27, Y+5	; 0x05
     214:	07 2e       	mov	r0, r23
     216:	73 e1       	ldi	r23, 0x13	; 19
     218:	b6 95       	lsr	r27
     21a:	a7 95       	ror	r26
     21c:	97 95       	ror	r25
     21e:	87 95       	ror	r24
     220:	7a 95       	dec	r23
     222:	d1 f7       	brne	.-12     	; 0x218 <setAcceptanceCriteria+0x88>
     224:	70 2d       	mov	r23, r0
     226:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion>>11));
     22a:	8a 81       	ldd	r24, Y+2	; 0x02
     22c:	9b 81       	ldd	r25, Y+3	; 0x03
     22e:	ac 81       	ldd	r26, Y+4	; 0x04
     230:	bd 81       	ldd	r27, Y+5	; 0x05
     232:	07 2e       	mov	r0, r23
     234:	7b e0       	ldi	r23, 0x0B	; 11
     236:	b6 95       	lsr	r27
     238:	a7 95       	ror	r26
     23a:	97 95       	ror	r25
     23c:	87 95       	ror	r24
     23e:	7a 95       	dec	r23
     240:	d1 f7       	brne	.-12     	; 0x236 <setAcceptanceCriteria+0xa6>
     242:	70 2d       	mov	r23, r0
     244:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
     248:	14 c0       	rjmp	.+40     	; 0x272 <setAcceptanceCriteria+0xe2>
	 } else {
	 spiMasterTRANSMIT((unsigned char)(criterion >> 3));
     24a:	8a 81       	ldd	r24, Y+2	; 0x02
     24c:	9b 81       	ldd	r25, Y+3	; 0x03
     24e:	ac 81       	ldd	r26, Y+4	; 0x04
     250:	bd 81       	ldd	r27, Y+5	; 0x05
     252:	68 94       	set
     254:	12 f8       	bld	r1, 2
     256:	b6 95       	lsr	r27
     258:	a7 95       	ror	r26
     25a:	97 95       	ror	r25
     25c:	87 95       	ror	r24
     25e:	16 94       	lsr	r1
     260:	d1 f7       	brne	.-12     	; 0x256 <setAcceptanceCriteria+0xc6>
     262:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion << 5));
     266:	8a 81       	ldd	r24, Y+2	; 0x02
     268:	82 95       	swap	r24
     26a:	88 0f       	add	r24, r24
     26c:	80 7e       	andi	r24, 0xE0	; 224
     26e:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 }
	 /* Release the bus */
	 spiMasterChipSelect(0);
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	0e 94 c7 02 	call	0x58e	; 0x58e <spiMasterChipSelect>
}
     278:	26 96       	adiw	r28, 0x06	; 6
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de bf       	out	0x3e, r29	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd bf       	out	0x3d, r28	; 61
     284:	cf 91       	pop	r28
     286:	df 91       	pop	r29
     288:	08 95       	ret

0000028a <initMCP2515>:

/* Configuration routine */
void initMCP2515(void)
{
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
	/* Initialize SPI as a master device, on frequency < 10Mhz */
	 spiMasterINIT();
     292:	0e 94 8e 02 	call	0x51c	; 0x51c <spiMasterINIT>
	/* Initialize external interrupt service on this device */
	 extInterruptINIT(interruptMCP2515);
     296:	81 e6       	ldi	r24, 0x61	; 97
     298:	92 e0       	ldi	r25, 0x02	; 2
     29a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <extInterruptINIT>
	/* Send reset instruction */
	 resetMCP2515();
     29e:	0e 94 8a 00 	call	0x114	; 0x114 <resetMCP2515>
	/* Set configuration mode */
	 setMode(CONFIGURATION_MODE);
     2a2:	8f e0       	ldi	r24, 0x0F	; 15
     2a4:	0e 94 53 00 	call	0xa6	; 0xa6 <readRegister>
     2a8:	8f 71       	andi	r24, 0x1F	; 31
     2aa:	80 68       	ori	r24, 0x80	; 128
     2ac:	98 2f       	mov	r25, r24
     2ae:	8f e0       	ldi	r24, 0x0F	; 15
     2b0:	69 2f       	mov	r22, r25
     2b2:	0e 94 6f 00 	call	0xde	; 0xde <writeRegister>
     2b6:	8e e0       	ldi	r24, 0x0E	; 14
     2b8:	0e 94 53 00 	call	0xa6	; 0xa6 <readRegister>
     2bc:	82 95       	swap	r24
     2be:	86 95       	lsr	r24
     2c0:	87 70       	andi	r24, 0x07	; 7
     2c2:	84 30       	cpi	r24, 0x04	; 4
     2c4:	c1 f7       	brne	.-16     	; 0x2b6 <initMCP2515+0x2c>
	/* Set bit timing , masks and rollover mode*/
	 setBitTiming(0x04, 0xD2, 0x42);
     2c6:	84 e0       	ldi	r24, 0x04	; 4
     2c8:	62 ed       	ldi	r22, 0xD2	; 210
     2ca:	42 e4       	ldi	r20, 0x42	; 66
     2cc:	0e 94 9a 00 	call	0x134	; 0x134 <setBitTiming>
	 setMask(RXM0, 0x00000000, 1);
     2d0:	84 e3       	ldi	r24, 0x34	; 52
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	ba 01       	movw	r22, r20
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	0e 94 c8 00 	call	0x190	; 0x190 <setAcceptanceCriteria>
	 setMask(RXM1, 0x00000000, 1);
     2de:	88 e3       	ldi	r24, 0x38	; 56
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	50 e0       	ldi	r21, 0x00	; 0
     2e4:	ba 01       	movw	r22, r20
     2e6:	21 e0       	ldi	r18, 0x01	; 1
     2e8:	0e 94 c8 00 	call	0x190	; 0x190 <setAcceptanceCriteria>
	 setRollover(1);
     2ec:	80 e6       	ldi	r24, 0x60	; 96
     2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <readRegister>
     2f2:	88 7f       	andi	r24, 0xF8	; 248
     2f4:	84 60       	ori	r24, 0x04	; 4
     2f6:	98 2f       	mov	r25, r24
     2f8:	80 e6       	ldi	r24, 0x60	; 96
     2fa:	69 2f       	mov	r22, r25
     2fc:	0e 94 6f 00 	call	0xde	; 0xde <writeRegister>
	/* Get into normal mode and setup communication */
	 setMode(NORMAL_MODE)
     300:	8f e0       	ldi	r24, 0x0F	; 15
     302:	0e 94 53 00 	call	0xa6	; 0xa6 <readRegister>
     306:	98 2f       	mov	r25, r24
     308:	9f 71       	andi	r25, 0x1F	; 31
     30a:	8f e0       	ldi	r24, 0x0F	; 15
     30c:	69 2f       	mov	r22, r25
     30e:	0e 94 6f 00 	call	0xde	; 0xde <writeRegister>
     312:	8e e0       	ldi	r24, 0x0E	; 14
     314:	0e 94 53 00 	call	0xa6	; 0xa6 <readRegister>
     318:	82 95       	swap	r24
     31a:	86 95       	lsr	r24
     31c:	87 70       	andi	r24, 0x07	; 7
     31e:	88 23       	and	r24, r24
     320:	c1 f7       	brne	.-16     	; 0x312 <initMCP2515+0x88>
}
     322:	cf 91       	pop	r28
     324:	df 91       	pop	r29
     326:	08 95       	ret

00000328 <sendCANmsg>:
 * - bits 7:6 - message priority (higher the better)
 * - bit 5 - if set, message is remote request (RTR)
 * - bit 4 - if set, message is considered to have ext. id.
 * - bits 3:0 - message length (0 to 8 bytes) */
void sendCANmsg(unsigned char bi,unsigned long id,unsigned char * data,unsigned char prop)
{
     328:	0f 93       	push	r16
     32a:	df 93       	push	r29
     32c:	cf 93       	push	r28
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	29 97       	sbiw	r28, 0x09	; 9
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	8a 83       	std	Y+2, r24	; 0x02
     340:	4b 83       	std	Y+3, r20	; 0x03
     342:	5c 83       	std	Y+4, r21	; 0x04
     344:	6d 83       	std	Y+5, r22	; 0x05
     346:	7e 83       	std	Y+6, r23	; 0x06
     348:	38 87       	std	Y+8, r19	; 0x08
     34a:	2f 83       	std	Y+7, r18	; 0x07
     34c:	09 87       	std	Y+9, r16	; 0x09
	/* Initialize reading of the receive buffer */
	 spiMasterChipSelect(1);
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	0e 94 c7 02 	call	0x58e	; 0x58e <spiMasterChipSelect>
	/* Send header and address */
	 spiMasterTRANSMIT(WRITE_INSTRUCTION);
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(TXBnCTRL(bi));
     35a:	8a 81       	ldd	r24, Y+2	; 0x02
     35c:	88 2f       	mov	r24, r24
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	03 96       	adiw	r24, 0x03	; 3
     362:	82 95       	swap	r24
     364:	80 7f       	andi	r24, 0xF0	; 240
     366:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 /* Setup message priority */
	 spiMasterTRANSMIT(prop >> 6);
     36a:	89 85       	ldd	r24, Y+9	; 0x09
     36c:	82 95       	swap	r24
     36e:	86 95       	lsr	r24
     370:	86 95       	lsr	r24
     372:	83 70       	andi	r24, 0x03	; 3
     374:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	/* Setup standard or extended identifier */
	 if(prop & 0x10) {
     378:	89 85       	ldd	r24, Y+9	; 0x09
     37a:	88 2f       	mov	r24, r24
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	80 71       	andi	r24, 0x10	; 16
     380:	90 70       	andi	r25, 0x00	; 0
     382:	00 97       	sbiw	r24, 0x00	; 0
     384:	09 f4       	brne	.+2      	; 0x388 <sendCANmsg+0x60>
     386:	43 c0       	rjmp	.+134    	; 0x40e <sendCANmsg+0xe6>
	 spiMasterTRANSMIT((unsigned char)(id>>3));
     388:	8b 81       	ldd	r24, Y+3	; 0x03
     38a:	9c 81       	ldd	r25, Y+4	; 0x04
     38c:	ad 81       	ldd	r26, Y+5	; 0x05
     38e:	be 81       	ldd	r27, Y+6	; 0x06
     390:	68 94       	set
     392:	12 f8       	bld	r1, 2
     394:	b6 95       	lsr	r27
     396:	a7 95       	ror	r26
     398:	97 95       	ror	r25
     39a:	87 95       	ror	r24
     39c:	16 94       	lsr	r1
     39e:	d1 f7       	brne	.-12     	; 0x394 <sendCANmsg+0x6c>
     3a0:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id<<5)|(1<<EXIDE)|((unsigned char)(id>>27)));
     3a4:	8b 81       	ldd	r24, Y+3	; 0x03
     3a6:	28 2f       	mov	r18, r24
     3a8:	22 95       	swap	r18
     3aa:	22 0f       	add	r18, r18
     3ac:	20 7e       	andi	r18, 0xE0	; 224
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
     3b2:	ad 81       	ldd	r26, Y+5	; 0x05
     3b4:	be 81       	ldd	r27, Y+6	; 0x06
     3b6:	07 2e       	mov	r0, r23
     3b8:	7b e1       	ldi	r23, 0x1B	; 27
     3ba:	b6 95       	lsr	r27
     3bc:	a7 95       	ror	r26
     3be:	97 95       	ror	r25
     3c0:	87 95       	ror	r24
     3c2:	7a 95       	dec	r23
     3c4:	d1 f7       	brne	.-12     	; 0x3ba <sendCANmsg+0x92>
     3c6:	70 2d       	mov	r23, r0
     3c8:	82 2b       	or	r24, r18
     3ca:	88 60       	ori	r24, 0x08	; 8
     3cc:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id>>19));
     3d0:	8b 81       	ldd	r24, Y+3	; 0x03
     3d2:	9c 81       	ldd	r25, Y+4	; 0x04
     3d4:	ad 81       	ldd	r26, Y+5	; 0x05
     3d6:	be 81       	ldd	r27, Y+6	; 0x06
     3d8:	07 2e       	mov	r0, r23
     3da:	73 e1       	ldi	r23, 0x13	; 19
     3dc:	b6 95       	lsr	r27
     3de:	a7 95       	ror	r26
     3e0:	97 95       	ror	r25
     3e2:	87 95       	ror	r24
     3e4:	7a 95       	dec	r23
     3e6:	d1 f7       	brne	.-12     	; 0x3dc <sendCANmsg+0xb4>
     3e8:	70 2d       	mov	r23, r0
     3ea:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id>>11));
     3ee:	8b 81       	ldd	r24, Y+3	; 0x03
     3f0:	9c 81       	ldd	r25, Y+4	; 0x04
     3f2:	ad 81       	ldd	r26, Y+5	; 0x05
     3f4:	be 81       	ldd	r27, Y+6	; 0x06
     3f6:	07 2e       	mov	r0, r23
     3f8:	7b e0       	ldi	r23, 0x0B	; 11
     3fa:	b6 95       	lsr	r27
     3fc:	a7 95       	ror	r26
     3fe:	97 95       	ror	r25
     400:	87 95       	ror	r24
     402:	7a 95       	dec	r23
     404:	d1 f7       	brne	.-12     	; 0x3fa <sendCANmsg+0xd2>
     406:	70 2d       	mov	r23, r0
     408:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
     40c:	14 c0       	rjmp	.+40     	; 0x436 <sendCANmsg+0x10e>
	 } else {
	 spiMasterTRANSMIT((unsigned char)(id>>3));
     40e:	8b 81       	ldd	r24, Y+3	; 0x03
     410:	9c 81       	ldd	r25, Y+4	; 0x04
     412:	ad 81       	ldd	r26, Y+5	; 0x05
     414:	be 81       	ldd	r27, Y+6	; 0x06
     416:	68 94       	set
     418:	12 f8       	bld	r1, 2
     41a:	b6 95       	lsr	r27
     41c:	a7 95       	ror	r26
     41e:	97 95       	ror	r25
     420:	87 95       	ror	r24
     422:	16 94       	lsr	r1
     424:	d1 f7       	brne	.-12     	; 0x41a <sendCANmsg+0xf2>
     426:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id<<5));
     42a:	8b 81       	ldd	r24, Y+3	; 0x03
     42c:	82 95       	swap	r24
     42e:	88 0f       	add	r24, r24
     430:	80 7e       	andi	r24, 0xE0	; 224
     432:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 }
	 /* Setup message length and RTR bit */
	 spiMasterTRANSMIT((prop & 0x0F) | ((prop & 0x20) ? (1 << RTR) : 0));
     436:	89 85       	ldd	r24, Y+9	; 0x09
     438:	28 2f       	mov	r18, r24
     43a:	2f 70       	andi	r18, 0x0F	; 15
     43c:	89 85       	ldd	r24, Y+9	; 0x09
     43e:	88 2f       	mov	r24, r24
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	80 72       	andi	r24, 0x20	; 32
     444:	90 70       	andi	r25, 0x00	; 0
     446:	00 97       	sbiw	r24, 0x00	; 0
     448:	11 f0       	breq	.+4      	; 0x44e <sendCANmsg+0x126>
     44a:	80 e4       	ldi	r24, 0x40	; 64
     44c:	01 c0       	rjmp	.+2      	; 0x450 <sendCANmsg+0x128>
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	82 2b       	or	r24, r18
     452:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	/* Store the message into the buffer */
	 for(unsigned char i = 0; i < (prop & 0x0F); i++)
     456:	19 82       	std	Y+1, r1	; 0x01
     458:	0e c0       	rjmp	.+28     	; 0x476 <sendCANmsg+0x14e>
	 spiMasterTRANSMIT(data[i]);
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	88 2f       	mov	r24, r24
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	2f 81       	ldd	r18, Y+7	; 0x07
     462:	38 85       	ldd	r19, Y+8	; 0x08
     464:	82 0f       	add	r24, r18
     466:	93 1f       	adc	r25, r19
     468:	fc 01       	movw	r30, r24
     46a:	80 81       	ld	r24, Z
     46c:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id<<5));
	 }
	 /* Setup message length and RTR bit */
	 spiMasterTRANSMIT((prop & 0x0F) | ((prop & 0x20) ? (1 << RTR) : 0));
	/* Store the message into the buffer */
	 for(unsigned char i = 0; i < (prop & 0x0F); i++)
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	8f 5f       	subi	r24, 0xFF	; 255
     474:	89 83       	std	Y+1, r24	; 0x01
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	28 2f       	mov	r18, r24
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	89 85       	ldd	r24, Y+9	; 0x09
     47e:	88 2f       	mov	r24, r24
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	8f 70       	andi	r24, 0x0F	; 15
     484:	90 70       	andi	r25, 0x00	; 0
     486:	28 17       	cp	r18, r24
     488:	39 07       	cpc	r19, r25
     48a:	3c f3       	brlt	.-50     	; 0x45a <sendCANmsg+0x132>
	 spiMasterTRANSMIT(data[i]);
	/* Release the bus */
	 spiMasterChipSelect(0);
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 c7 02 	call	0x58e	; 0x58e <spiMasterChipSelect>
	/* Send request to send */
	 sendRTS(bi);
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
     498:	80 e8       	ldi	r24, 0x80	; 128
     49a:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
     49e:	8a 81       	ldd	r24, Y+2	; 0x02
     4a0:	88 2f       	mov	r24, r24
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	03 96       	adiw	r24, 0x03	; 3
     4a6:	82 95       	swap	r24
     4a8:	80 7f       	andi	r24, 0xF0	; 240
     4aa:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
}
     4ae:	29 96       	adiw	r28, 0x09	; 9
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
     4ba:	cf 91       	pop	r28
     4bc:	df 91       	pop	r29
     4be:	0f 91       	pop	r16
     4c0:	08 95       	ret

000004c2 <interruptMCP2515>:

void interruptMCP2515(void)
{
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	df 93       	push	r29
     4c8:	cf 93       	push	r28
     4ca:	0f 92       	push	r0
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
	 
	 /* Copy the message from the device and release buffer */
	 spiMasterTRANSMIT(READ_INSTRUCTION);
     4d0:	83 e0       	ldi	r24, 0x03	; 3
     4d2:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(RXBnCTRL(0));
     4d6:	80 e6       	ldi	r24, 0x60	; 96
     4d8:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
	 /* Make the local copy */
	 for(unsigned char i=0; i < 14; i++)
     4dc:	19 82       	std	Y+1, r1	; 0x01
     4de:	0f c0       	rjmp	.+30     	; 0x4fe <interruptMCP2515+0x3c>
	 rbuffer[i] = spiMasterTRANSMIT(0);
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	08 2f       	mov	r16, r24
     4e4:	10 e0       	ldi	r17, 0x00	; 0
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 ad 02 	call	0x55a	; 0x55a <spiMasterTRANSMIT>
     4ec:	28 2f       	mov	r18, r24
     4ee:	c8 01       	movw	r24, r16
     4f0:	8e 5c       	subi	r24, 0xCE	; 206
     4f2:	9e 4f       	sbci	r25, 0xFE	; 254
     4f4:	fc 01       	movw	r30, r24
     4f6:	20 83       	st	Z, r18
	 
	 /* Copy the message from the device and release buffer */
	 spiMasterTRANSMIT(READ_INSTRUCTION);
	 spiMasterTRANSMIT(RXBnCTRL(0));
	 /* Make the local copy */
	 for(unsigned char i=0; i < 14; i++)
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	8f 5f       	subi	r24, 0xFF	; 255
     4fc:	89 83       	std	Y+1, r24	; 0x01
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	8e 30       	cpi	r24, 0x0E	; 14
     502:	70 f3       	brcs	.-36     	; 0x4e0 <interruptMCP2515+0x1e>
	 rbuffer[i] = spiMasterTRANSMIT(0);
	 
	msgReceived  = rbuffer;
     504:	82 e3       	ldi	r24, 0x32	; 50
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	90 93 31 01 	sts	0x0131, r25
     50c:	80 93 30 01 	sts	0x0130, r24
     510:	0f 90       	pop	r0
     512:	cf 91       	pop	r28
     514:	df 91       	pop	r29
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	08 95       	ret

0000051c <spiMasterINIT>:
 *
 * \warning This is platform-dependent method!
 *
 */
void spiMasterINIT()
{
     51c:	df 93       	push	r29
     51e:	cf 93       	push	r28
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	 DDR_SPI = (1<<PIN_MOSI)|(1<<PIN_SCK)|(1<<PIN_SS);
     524:	84 e2       	ldi	r24, 0x24	; 36
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	2c e2       	ldi	r18, 0x2C	; 44
     52a:	fc 01       	movw	r30, r24
     52c:	20 83       	st	Z, r18
	 PORT_SPI |= (1 << PIN_SS);
     52e:	85 e2       	ldi	r24, 0x25	; 37
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	25 e2       	ldi	r18, 0x25	; 37
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	f9 01       	movw	r30, r18
     538:	20 81       	ld	r18, Z
     53a:	24 60       	ori	r18, 0x04	; 4
     53c:	fc 01       	movw	r30, r24
     53e:	20 83       	st	Z, r18
	/* Enable SPI, Master, set clock rate fck/4, mode 0,0 */
	 SPCR = (1<<SPE) | (1<<MSTR);
     540:	8c e4       	ldi	r24, 0x4C	; 76
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	20 e5       	ldi	r18, 0x50	; 80
     546:	fc 01       	movw	r30, r24
     548:	20 83       	st	Z, r18
	 SPSR = (1<<SPI2X);
     54a:	8d e4       	ldi	r24, 0x4D	; 77
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	21 e0       	ldi	r18, 0x01	; 1
     550:	fc 01       	movw	r30, r24
     552:	20 83       	st	Z, r18
}
     554:	cf 91       	pop	r28
     556:	df 91       	pop	r29
     558:	08 95       	ret

0000055a <spiMasterTRANSMIT>:
 * \param data[] Source data array
 * \param length Array length
 *
 */
unsigned char spiMasterTRANSMIT(unsigned char data)
{
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	0f 92       	push	r0
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	 SPDR = data;
     566:	8e e4       	ldi	r24, 0x4E	; 78
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	29 81       	ldd	r18, Y+1	; 0x01
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
	/* Wait for transmission complete */
	 while(!(SPSR & (1<<SPIF)));
     570:	00 00       	nop
     572:	8d e4       	ldi	r24, 0x4D	; 77
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	fc 01       	movw	r30, r24
     578:	80 81       	ld	r24, Z
     57a:	88 23       	and	r24, r24
     57c:	d4 f7       	brge	.-12     	; 0x572 <spiMasterTRANSMIT+0x18>
	/* SPDR must be stored as quickly
	 as possible (ref. ATMegaX ds) */
	 return SPDR;
     57e:	8e e4       	ldi	r24, 0x4E	; 78
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	fc 01       	movw	r30, r24
     584:	80 81       	ld	r24, Z
}
     586:	0f 90       	pop	r0
     588:	cf 91       	pop	r28
     58a:	df 91       	pop	r29
     58c:	08 95       	ret

0000058e <spiMasterChipSelect>:
 *
 * \warning This is platform-dependent method!
 * \param state Wished state
 */
void spiMasterChipSelect(unsigned char state)
{
     58e:	df 93       	push	r29
     590:	cf 93       	push	r28
     592:	0f 92       	push	r0
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	89 83       	std	Y+1, r24	; 0x01
	/* What the user wants? (remember that the CS signal is inverted) */
	 if(!state) {
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	88 23       	and	r24, r24
     59e:	99 f4       	brne	.+38     	; 0x5c6 <spiMasterChipSelect+0x38>
	 /* Upper the CS pin */
	 PORT_SPI |= (1<<PIN_SS);
     5a0:	85 e2       	ldi	r24, 0x25	; 37
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	25 e2       	ldi	r18, 0x25	; 37
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	f9 01       	movw	r30, r18
     5aa:	20 81       	ld	r18, Z
     5ac:	24 60       	ori	r18, 0x04	; 4
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18
	 DDR_SPI |= (1<<PIN_SS);
     5b2:	84 e2       	ldi	r24, 0x24	; 36
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	24 e2       	ldi	r18, 0x24	; 36
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	f9 01       	movw	r30, r18
     5bc:	20 81       	ld	r18, Z
     5be:	24 60       	ori	r18, 0x04	; 4
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 83       	st	Z, r18
     5c4:	12 c0       	rjmp	.+36     	; 0x5ea <spiMasterChipSelect+0x5c>
	 } else {
	 /* Lower the CS pin */
	 PORT_SPI &= ~(1<<PIN_SS);
     5c6:	85 e2       	ldi	r24, 0x25	; 37
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	25 e2       	ldi	r18, 0x25	; 37
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	f9 01       	movw	r30, r18
     5d0:	20 81       	ld	r18, Z
     5d2:	2b 7f       	andi	r18, 0xFB	; 251
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 83       	st	Z, r18
	 DDR_SPI |= (1<<PIN_SS);
     5d8:	84 e2       	ldi	r24, 0x24	; 36
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	24 e2       	ldi	r18, 0x24	; 36
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	f9 01       	movw	r30, r18
     5e2:	20 81       	ld	r18, Z
     5e4:	24 60       	ori	r18, 0x04	; 4
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
	 }
}
     5ea:	0f 90       	pop	r0
     5ec:	cf 91       	pop	r28
     5ee:	df 91       	pop	r29
     5f0:	08 95       	ret

000005f2 <extInterruptINIT>:
/** Initialization of hardware ext. interrupts
 * \param *handler pointer to a function which handle occured interrupt.
 * \return nothing
 */
void extInterruptINIT(void (*handler)(void))
{
     5f2:	df 93       	push	r29
     5f4:	cf 93       	push	r28
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <extInterruptINIT+0x6>
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	9a 83       	std	Y+2, r25	; 0x02
     5fe:	89 83       	std	Y+1, r24	; 0x01
	/* Set function pointer */
	 int_handler = handler;
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	90 93 41 01 	sts	0x0141, r25
     608:	80 93 40 01 	sts	0x0140, r24
	/* Initialize external interrupt on pin INT0 on failing edge */
	 EICRA |= (1 << ISC01);
     60c:	89 e6       	ldi	r24, 0x69	; 105
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	29 e6       	ldi	r18, 0x69	; 105
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	f9 01       	movw	r30, r18
     616:	20 81       	ld	r18, Z
     618:	22 60       	ori	r18, 0x02	; 2
     61a:	fc 01       	movw	r30, r24
     61c:	20 83       	st	Z, r18
	 EIMSK |= (1 << INT0);
     61e:	8d e3       	ldi	r24, 0x3D	; 61
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	2d e3       	ldi	r18, 0x3D	; 61
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	21 60       	ori	r18, 0x01	; 1
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
}
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	cf 91       	pop	r28
     636:	df 91       	pop	r29
     638:	08 95       	ret

0000063a <__vector_1>:
/* System interrupt handler */
ISR(INT0_vect)
{
     63a:	1f 92       	push	r1
     63c:	0f 92       	push	r0
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	0f 92       	push	r0
     642:	11 24       	eor	r1, r1
     644:	2f 93       	push	r18
     646:	3f 93       	push	r19
     648:	4f 93       	push	r20
     64a:	5f 93       	push	r21
     64c:	6f 93       	push	r22
     64e:	7f 93       	push	r23
     650:	8f 93       	push	r24
     652:	9f 93       	push	r25
     654:	af 93       	push	r26
     656:	bf 93       	push	r27
     658:	ef 93       	push	r30
     65a:	ff 93       	push	r31
     65c:	df 93       	push	r29
     65e:	cf 93       	push	r28
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
	int_handler();
     664:	80 91 40 01 	lds	r24, 0x0140
     668:	90 91 41 01 	lds	r25, 0x0141
     66c:	fc 01       	movw	r30, r24
     66e:	09 95       	icall
     670:	cf 91       	pop	r28
     672:	df 91       	pop	r29
     674:	ff 91       	pop	r31
     676:	ef 91       	pop	r30
     678:	bf 91       	pop	r27
     67a:	af 91       	pop	r26
     67c:	9f 91       	pop	r25
     67e:	8f 91       	pop	r24
     680:	7f 91       	pop	r23
     682:	6f 91       	pop	r22
     684:	5f 91       	pop	r21
     686:	4f 91       	pop	r20
     688:	3f 91       	pop	r19
     68a:	2f 91       	pop	r18
     68c:	0f 90       	pop	r0
     68e:	0f be       	out	0x3f, r0	; 63
     690:	0f 90       	pop	r0
     692:	1f 90       	pop	r1
     694:	18 95       	reti

00000696 <main>:
#include "LCD.h"
#include "PWM.h"


int main(void)
{
     696:	df 93       	push	r29
     698:	cf 93       	push	r28
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	28 97       	sbiw	r28, 0x08	; 8
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
	unsigned char isON = 1;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char dutyCycle0 = 255;
     6ae:	8f ef       	ldi	r24, 0xFF	; 255
     6b0:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char dutyCycle1 = 255;
     6b2:	8f ef       	ldi	r24, 0xFF	; 255
     6b4:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char i = 0;
     6b6:	19 82       	std	Y+1, r1	; 0x01
	long id = 0 ;
     6b8:	1d 82       	std	Y+5, r1	; 0x05
     6ba:	1e 82       	std	Y+6, r1	; 0x06
     6bc:	1f 82       	std	Y+7, r1	; 0x07
     6be:	18 86       	std	Y+8, r1	; 0x08
	initMCP2515();
     6c0:	0e 94 45 01 	call	0x28a	; 0x28a <initMCP2515>
	LCD_Init();
     6c4:	0e 94 92 0c 	call	0x1924	; 0x1924 <LCD_Init>
	PWM_start();
     6c8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <PWM_start>
	sei();
     6cc:	78 94       	sei
	LCD_String("MOTOR1");
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <LCD_String>
	LCD_String("X");
     6d6:	87 e0       	ldi	r24, 0x07	; 7
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <LCD_String>
	LCD_String_xy(1,0,"MOTOR2");
     6de:	29 e0       	ldi	r18, 0x09	; 9
     6e0:	31 e0       	ldi	r19, 0x01	; 1
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	a9 01       	movw	r20, r18
     6e8:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <LCD_String_xy>
	LCD_String("Y");
     6ec:	80 e1       	ldi	r24, 0x10	; 16
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <LCD_String>
     6f4:	03 c0       	rjmp	.+6      	; 0x6fc <main+0x66>
					isON = 1;
				}
				break;
			}			
		}
	}
     6f6:	00 00       	nop
     6f8:	01 c0       	rjmp	.+2      	; 0x6fc <main+0x66>
     6fa:	00 00       	nop
	LCD_String("X");
	LCD_String_xy(1,0,"MOTOR2");
	LCD_String("Y");
	while(1) 
	{
		if(msgReceived) 
     6fc:	80 91 30 01 	lds	r24, 0x0130
     700:	90 91 31 01 	lds	r25, 0x0131
     704:	00 97       	sbiw	r24, 0x00	; 0
     706:	b9 f3       	breq	.-18     	; 0x6f6 <main+0x60>
		{
			LCD_Clear();
     708:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_Clear>
			id = ((unsigned char)(getId<<8));
     70c:	1d 82       	std	Y+5, r1	; 0x05
     70e:	1e 82       	std	Y+6, r1	; 0x06
     710:	1f 82       	std	Y+7, r1	; 0x07
     712:	18 86       	std	Y+8, r1	; 0x08
			id += (unsigned char)getId;
     714:	80 91 30 01 	lds	r24, 0x0130
     718:	90 91 31 01 	lds	r25, 0x0131
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	fc 01       	movw	r30, r24
     720:	80 81       	ld	r24, Z
     722:	88 2f       	mov	r24, r24
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	88 0f       	add	r24, r24
     72c:	99 1f       	adc	r25, r25
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	28 2f       	mov	r18, r24
     734:	80 91 30 01 	lds	r24, 0x0130
     738:	90 91 31 01 	lds	r25, 0x0131
     73c:	02 96       	adiw	r24, 0x02	; 2
     73e:	fc 01       	movw	r30, r24
     740:	80 81       	ld	r24, Z
     742:	82 95       	swap	r24
     744:	86 95       	lsr	r24
     746:	87 70       	andi	r24, 0x07	; 7
     748:	82 2b       	or	r24, r18
     74a:	88 2f       	mov	r24, r24
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	a0 e0       	ldi	r26, 0x00	; 0
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	2d 81       	ldd	r18, Y+5	; 0x05
     754:	3e 81       	ldd	r19, Y+6	; 0x06
     756:	4f 81       	ldd	r20, Y+7	; 0x07
     758:	58 85       	ldd	r21, Y+8	; 0x08
     75a:	82 0f       	add	r24, r18
     75c:	93 1f       	adc	r25, r19
     75e:	a4 1f       	adc	r26, r20
     760:	b5 1f       	adc	r27, r21
     762:	8d 83       	std	Y+5, r24	; 0x05
     764:	9e 83       	std	Y+6, r25	; 0x06
     766:	af 83       	std	Y+7, r26	; 0x07
     768:	b8 87       	std	Y+8, r27	; 0x08
			if(id == 0x05) //Ultra sonic id
     76a:	8d 81       	ldd	r24, Y+5	; 0x05
     76c:	9e 81       	ldd	r25, Y+6	; 0x06
     76e:	af 81       	ldd	r26, Y+7	; 0x07
     770:	b8 85       	ldd	r27, Y+8	; 0x08
     772:	85 30       	cpi	r24, 0x05	; 5
     774:	91 05       	cpc	r25, r1
     776:	a1 05       	cpc	r26, r1
     778:	b1 05       	cpc	r27, r1
     77a:	a1 f5       	brne	.+104    	; 0x7e4 <main+0x14e>
			{
				LCD_Clear();
     77c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_Clear>
				LCD_String("USonicVal:");
     780:	82 e1       	ldi	r24, 0x12	; 18
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <LCD_String>
				
				LCD_String_xy(1,0," ");
     788:	2d e1       	ldi	r18, 0x1D	; 29
     78a:	31 e0       	ldi	r19, 0x01	; 1
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	a9 01       	movw	r20, r18
     792:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <LCD_String_xy>
				for(i=0; i<getLength; i++)
     796:	19 82       	std	Y+1, r1	; 0x01
     798:	11 c0       	rjmp	.+34     	; 0x7bc <main+0x126>
				{	
					LCD_Char(getData(i));
     79a:	20 91 30 01 	lds	r18, 0x0130
     79e:	30 91 31 01 	lds	r19, 0x0131
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	88 2f       	mov	r24, r24
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	06 96       	adiw	r24, 0x06	; 6
     7aa:	82 0f       	add	r24, r18
     7ac:	93 1f       	adc	r25, r19
     7ae:	fc 01       	movw	r30, r24
     7b0:	80 81       	ld	r24, Z
     7b2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Char>
			{
				LCD_Clear();
				LCD_String("USonicVal:");
				
				LCD_String_xy(1,0," ");
				for(i=0; i<getLength; i++)
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	8f 5f       	subi	r24, 0xFF	; 255
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	80 91 30 01 	lds	r24, 0x0130
     7c0:	90 91 31 01 	lds	r25, 0x0131
     7c4:	05 96       	adiw	r24, 0x05	; 5
     7c6:	fc 01       	movw	r30, r24
     7c8:	80 81       	ld	r24, Z
     7ca:	98 2f       	mov	r25, r24
     7cc:	92 95       	swap	r25
     7ce:	9f 70       	andi	r25, 0x0F	; 15
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	89 17       	cp	r24, r25
     7d4:	10 f3       	brcs	.-60     	; 0x79a <main+0x104>
				{	
					LCD_Char(getData(i));
				}	
				PWM0_setDutyCycle(0);
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <PWM0_setDutyCycle>
				PWM1_setDutyCycle(0);
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <PWM1_setDutyCycle>
					isON = 1;
				}
				break;
			}			
		}
	}
     7e2:	8c cf       	rjmp	.-232    	; 0x6fc <main+0x66>
					LCD_Char(getData(i));
				}	
				PWM0_setDutyCycle(0);
				PWM1_setDutyCycle(0);
			}
			else if(id == 0x06) //Temperature id
     7e4:	8d 81       	ldd	r24, Y+5	; 0x05
     7e6:	9e 81       	ldd	r25, Y+6	; 0x06
     7e8:	af 81       	ldd	r26, Y+7	; 0x07
     7ea:	b8 85       	ldd	r27, Y+8	; 0x08
     7ec:	86 30       	cpi	r24, 0x06	; 6
     7ee:	91 05       	cpc	r25, r1
     7f0:	a1 05       	cpc	r26, r1
     7f2:	b1 05       	cpc	r27, r1
     7f4:	a1 f5       	brne	.+104    	; 0x85e <main+0x1c8>
			{
				LCD_Clear();
     7f6:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_Clear>
				LCD_String("TempVal:");
     7fa:	8f e1       	ldi	r24, 0x1F	; 31
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <LCD_String>
				
				LCD_String_xy(1,0," ");
     802:	2d e1       	ldi	r18, 0x1D	; 29
     804:	31 e0       	ldi	r19, 0x01	; 1
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	a9 01       	movw	r20, r18
     80c:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <LCD_String_xy>
				for(i=0; i<getLength; i++)
     810:	19 82       	std	Y+1, r1	; 0x01
     812:	11 c0       	rjmp	.+34     	; 0x836 <main+0x1a0>
				{	
					LCD_Char(getData(i));
     814:	20 91 30 01 	lds	r18, 0x0130
     818:	30 91 31 01 	lds	r19, 0x0131
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	88 2f       	mov	r24, r24
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	06 96       	adiw	r24, 0x06	; 6
     824:	82 0f       	add	r24, r18
     826:	93 1f       	adc	r25, r19
     828:	fc 01       	movw	r30, r24
     82a:	80 81       	ld	r24, Z
     82c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Char>
			{
				LCD_Clear();
				LCD_String("TempVal:");
				
				LCD_String_xy(1,0," ");
				for(i=0; i<getLength; i++)
     830:	89 81       	ldd	r24, Y+1	; 0x01
     832:	8f 5f       	subi	r24, 0xFF	; 255
     834:	89 83       	std	Y+1, r24	; 0x01
     836:	80 91 30 01 	lds	r24, 0x0130
     83a:	90 91 31 01 	lds	r25, 0x0131
     83e:	05 96       	adiw	r24, 0x05	; 5
     840:	fc 01       	movw	r30, r24
     842:	80 81       	ld	r24, Z
     844:	98 2f       	mov	r25, r24
     846:	92 95       	swap	r25
     848:	9f 70       	andi	r25, 0x0F	; 15
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	89 17       	cp	r24, r25
     84e:	10 f3       	brcs	.-60     	; 0x814 <main+0x17e>
				{	
					LCD_Char(getData(i));
				}	
				PWM0_setDutyCycle(0);
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <PWM0_setDutyCycle>
				PWM1_setDutyCycle(0);
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <PWM1_setDutyCycle>
					isON = 1;
				}
				break;
			}			
		}
	}
     85c:	4f cf       	rjmp	.-354    	; 0x6fc <main+0x66>
					LCD_Char(getData(i));
				}	
				PWM0_setDutyCycle(0);
				PWM1_setDutyCycle(0);
			}
			else if(id == 0x07) //Button id
     85e:	8d 81       	ldd	r24, Y+5	; 0x05
     860:	9e 81       	ldd	r25, Y+6	; 0x06
     862:	af 81       	ldd	r26, Y+7	; 0x07
     864:	b8 85       	ldd	r27, Y+8	; 0x08
     866:	87 30       	cpi	r24, 0x07	; 7
     868:	91 05       	cpc	r25, r1
     86a:	a1 05       	cpc	r26, r1
     86c:	b1 05       	cpc	r27, r1
     86e:	09 f0       	breq	.+2      	; 0x872 <main+0x1dc>
     870:	44 cf       	rjmp	.-376    	; 0x6fa <main+0x64>
			{
				if (isON)
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	88 23       	and	r24, r24
     876:	51 f0       	breq	.+20     	; 0x88c <main+0x1f6>
				{
					PWM0_setDutyCycle(0);
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <PWM0_setDutyCycle>
					PWM1_setDutyCycle(0);
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <PWM1_setDutyCycle>
					LCD_Clear();
     884:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_Clear>
					isON = 0;
     888:	1a 82       	std	Y+2, r1	; 0x02
     88a:	1b c0       	rjmp	.+54     	; 0x8c2 <main+0x22c>
				}
				else
				{
					LCD_String("MOTOR1");
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <LCD_String>
					LCD_String("X");
     894:	87 e0       	ldi	r24, 0x07	; 7
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <LCD_String>
					LCD_String_xy(1,0,"MOTOR2");
     89c:	29 e0       	ldi	r18, 0x09	; 9
     89e:	31 e0       	ldi	r19, 0x01	; 1
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	a9 01       	movw	r20, r18
     8a6:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <LCD_String_xy>
					LCD_String("Y");
     8aa:	80 e1       	ldi	r24, 0x10	; 16
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <LCD_String>
					PWM0_setDutyCycle(dutyCycle0);
     8b2:	8b 81       	ldd	r24, Y+3	; 0x03
     8b4:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <PWM0_setDutyCycle>
					PWM1_setDutyCycle(dutyCycle1);
     8b8:	8c 81       	ldd	r24, Y+4	; 0x04
     8ba:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <PWM1_setDutyCycle>
					isON = 1;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	8a 83       	std	Y+2, r24	; 0x02
		}
	}



	return 0;
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	28 96       	adiw	r28, 0x08	; 8
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	cf 91       	pop	r28
     8d4:	df 91       	pop	r29
     8d6:	08 95       	ret

000008d8 <LCD_Command>:
#define LCD_Port PORTC			/* Define LCD data port */
#define RS PC0				/* Define Register Select pin */
#define EN PC1 				/* Define Enable signal pin */

void LCD_Command( unsigned char cmnd )
{
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	df 93       	push	r29
     8de:	cf 93       	push	r28
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
     8e4:	c7 55       	subi	r28, 0x57	; 87
     8e6:	d0 40       	sbci	r29, 0x00	; 0
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	9e 01       	movw	r18, r28
     8f4:	29 5a       	subi	r18, 0xA9	; 169
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	f9 01       	movw	r30, r18
     8fa:	80 83       	st	Z, r24

	LCD_Port = (LCD_Port & 0x03) | (cmnd >> 2); /* sending upper nibble */
     8fc:	88 e2       	ldi	r24, 0x28	; 40
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	28 e2       	ldi	r18, 0x28	; 40
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	f9 01       	movw	r30, r18
     906:	20 81       	ld	r18, Z
     908:	42 2f       	mov	r20, r18
     90a:	43 70       	andi	r20, 0x03	; 3
     90c:	9e 01       	movw	r18, r28
     90e:	29 5a       	subi	r18, 0xA9	; 169
     910:	3f 4f       	sbci	r19, 0xFF	; 255
     912:	f9 01       	movw	r30, r18
     914:	20 81       	ld	r18, Z
     916:	26 95       	lsr	r18
     918:	26 95       	lsr	r18
     91a:	24 2b       	or	r18, r20
     91c:	fc 01       	movw	r30, r24
     91e:	20 83       	st	Z, r18
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
     920:	88 e2       	ldi	r24, 0x28	; 40
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	28 e2       	ldi	r18, 0x28	; 40
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	f9 01       	movw	r30, r18
     92a:	20 81       	ld	r18, Z
     92c:	2e 7f       	andi	r18, 0xFE	; 254
     92e:	fc 01       	movw	r30, r24
     930:	20 83       	st	Z, r18
	LCD_Port |= (1<<EN);		/* Enable pulse */
     932:	88 e2       	ldi	r24, 0x28	; 40
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	28 e2       	ldi	r18, 0x28	; 40
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	f9 01       	movw	r30, r18
     93c:	20 81       	ld	r18, Z
     93e:	22 60       	ori	r18, 0x02	; 2
     940:	fc 01       	movw	r30, r24
     942:	20 83       	st	Z, r18
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	a0 e8       	ldi	r26, 0x80	; 128
     94a:	bf e3       	ldi	r27, 0x3F	; 63
     94c:	89 83       	std	Y+1, r24	; 0x01
     94e:	9a 83       	std	Y+2, r25	; 0x02
     950:	ab 83       	std	Y+3, r26	; 0x03
     952:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     954:	69 81       	ldd	r22, Y+1	; 0x01
     956:	7a 81       	ldd	r23, Y+2	; 0x02
     958:	8b 81       	ldd	r24, Y+3	; 0x03
     95a:	9c 81       	ldd	r25, Y+4	; 0x04
     95c:	2b ea       	ldi	r18, 0xAB	; 171
     95e:	3a ea       	ldi	r19, 0xAA	; 170
     960:	4a ea       	ldi	r20, 0xAA	; 170
     962:	50 e4       	ldi	r21, 0x40	; 64
     964:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	8d 83       	std	Y+5, r24	; 0x05
     96e:	9e 83       	std	Y+6, r25	; 0x06
     970:	af 83       	std	Y+7, r26	; 0x07
     972:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     974:	11 e0       	ldi	r17, 0x01	; 1
     976:	6d 81       	ldd	r22, Y+5	; 0x05
     978:	7e 81       	ldd	r23, Y+6	; 0x06
     97a:	8f 81       	ldd	r24, Y+7	; 0x07
     97c:	98 85       	ldd	r25, Y+8	; 0x08
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 e8       	ldi	r20, 0x80	; 128
     984:	5f e3       	ldi	r21, 0x3F	; 63
     986:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
     98a:	88 23       	and	r24, r24
     98c:	0c f0       	brlt	.+2      	; 0x990 <__stack+0x91>
     98e:	10 e0       	ldi	r17, 0x00	; 0
     990:	11 23       	and	r17, r17
     992:	19 f0       	breq	.+6      	; 0x99a <__stack+0x9b>
		__ticks = 1;
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	89 87       	std	Y+9, r24	; 0x09
     998:	a3 c0       	rjmp	.+326    	; 0xae0 <__stack+0x1e1>
	else if (__tmp > 255)
     99a:	11 e0       	ldi	r17, 0x01	; 1
     99c:	6d 81       	ldd	r22, Y+5	; 0x05
     99e:	7e 81       	ldd	r23, Y+6	; 0x06
     9a0:	8f 81       	ldd	r24, Y+7	; 0x07
     9a2:	98 85       	ldd	r25, Y+8	; 0x08
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	4f e7       	ldi	r20, 0x7F	; 127
     9aa:	53 e4       	ldi	r21, 0x43	; 67
     9ac:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
     9b0:	18 16       	cp	r1, r24
     9b2:	0c f0       	brlt	.+2      	; 0x9b6 <__stack+0xb7>
     9b4:	10 e0       	ldi	r17, 0x00	; 0
     9b6:	11 23       	and	r17, r17
     9b8:	09 f4       	brne	.+2      	; 0x9bc <__stack+0xbd>
     9ba:	89 c0       	rjmp	.+274    	; 0xace <__stack+0x1cf>
	{
		_delay_ms(__us / 1000.0);
     9bc:	69 81       	ldd	r22, Y+1	; 0x01
     9be:	7a 81       	ldd	r23, Y+2	; 0x02
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	9c 81       	ldd	r25, Y+4	; 0x04
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	4a e7       	ldi	r20, 0x7A	; 122
     9ca:	54 e4       	ldi	r21, 0x44	; 68
     9cc:	0e 94 36 12 	call	0x246c	; 0x246c <__divsf3>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	8a 87       	std	Y+10, r24	; 0x0a
     9d6:	9b 87       	std	Y+11, r25	; 0x0b
     9d8:	ac 87       	std	Y+12, r26	; 0x0c
     9da:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     9dc:	6a 85       	ldd	r22, Y+10	; 0x0a
     9de:	7b 85       	ldd	r23, Y+11	; 0x0b
     9e0:	8c 85       	ldd	r24, Y+12	; 0x0c
     9e2:	9d 85       	ldd	r25, Y+13	; 0x0d
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	4a e7       	ldi	r20, 0x7A	; 122
     9ea:	55 e4       	ldi	r21, 0x45	; 69
     9ec:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
     9f0:	dc 01       	movw	r26, r24
     9f2:	cb 01       	movw	r24, r22
     9f4:	8e 87       	std	Y+14, r24	; 0x0e
     9f6:	9f 87       	std	Y+15, r25	; 0x0f
     9f8:	a8 8b       	std	Y+16, r26	; 0x10
     9fa:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     9fc:	11 e0       	ldi	r17, 0x01	; 1
     9fe:	6e 85       	ldd	r22, Y+14	; 0x0e
     a00:	7f 85       	ldd	r23, Y+15	; 0x0f
     a02:	88 89       	ldd	r24, Y+16	; 0x10
     a04:	99 89       	ldd	r25, Y+17	; 0x11
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e8       	ldi	r20, 0x80	; 128
     a0c:	5f e3       	ldi	r21, 0x3F	; 63
     a0e:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
     a12:	88 23       	and	r24, r24
     a14:	0c f0       	brlt	.+2      	; 0xa18 <__stack+0x119>
     a16:	10 e0       	ldi	r17, 0x00	; 0
     a18:	11 23       	and	r17, r17
     a1a:	29 f0       	breq	.+10     	; 0xa26 <__stack+0x127>
		__ticks = 1;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	9b 8b       	std	Y+19, r25	; 0x13
     a22:	8a 8b       	std	Y+18, r24	; 0x12
     a24:	46 c0       	rjmp	.+140    	; 0xab2 <__stack+0x1b3>
	else if (__tmp > 65535)
     a26:	11 e0       	ldi	r17, 0x01	; 1
     a28:	6e 85       	ldd	r22, Y+14	; 0x0e
     a2a:	7f 85       	ldd	r23, Y+15	; 0x0f
     a2c:	88 89       	ldd	r24, Y+16	; 0x10
     a2e:	99 89       	ldd	r25, Y+17	; 0x11
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	3f ef       	ldi	r19, 0xFF	; 255
     a34:	4f e7       	ldi	r20, 0x7F	; 127
     a36:	57 e4       	ldi	r21, 0x47	; 71
     a38:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
     a3c:	18 16       	cp	r1, r24
     a3e:	0c f0       	brlt	.+2      	; 0xa42 <__stack+0x143>
     a40:	10 e0       	ldi	r17, 0x00	; 0
     a42:	11 23       	and	r17, r17
     a44:	61 f1       	breq	.+88     	; 0xa9e <__stack+0x19f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a46:	6a 85       	ldd	r22, Y+10	; 0x0a
     a48:	7b 85       	ldd	r23, Y+11	; 0x0b
     a4a:	8c 85       	ldd	r24, Y+12	; 0x0c
     a4c:	9d 85       	ldd	r25, Y+13	; 0x0d
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 e2       	ldi	r20, 0x20	; 32
     a54:	51 e4       	ldi	r21, 0x41	; 65
     a56:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
     a5a:	dc 01       	movw	r26, r24
     a5c:	cb 01       	movw	r24, r22
     a5e:	bc 01       	movw	r22, r24
     a60:	cd 01       	movw	r24, r26
     a62:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
     a66:	dc 01       	movw	r26, r24
     a68:	cb 01       	movw	r24, r22
     a6a:	9b 8b       	std	Y+19, r25	; 0x13
     a6c:	8a 8b       	std	Y+18, r24	; 0x12
     a6e:	12 c0       	rjmp	.+36     	; 0xa94 <__stack+0x195>
     a70:	80 e9       	ldi	r24, 0x90	; 144
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	9d 8b       	std	Y+21, r25	; 0x15
     a76:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a78:	8c 89       	ldd	r24, Y+20	; 0x14
     a7a:	9d 89       	ldd	r25, Y+21	; 0x15
     a7c:	8c 01       	movw	r16, r24
     a7e:	c8 01       	movw	r24, r16
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <__stack+0x181>
     a84:	8c 01       	movw	r16, r24
     a86:	1d 8b       	std	Y+21, r17	; 0x15
     a88:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a8a:	8a 89       	ldd	r24, Y+18	; 0x12
     a8c:	9b 89       	ldd	r25, Y+19	; 0x13
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	9b 8b       	std	Y+19, r25	; 0x13
     a92:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a94:	8a 89       	ldd	r24, Y+18	; 0x12
     a96:	9b 89       	ldd	r25, Y+19	; 0x13
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	51 f7       	brne	.-44     	; 0xa70 <__stack+0x171>
     a9c:	28 c0       	rjmp	.+80     	; 0xaee <__stack+0x1ef>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a9e:	6e 85       	ldd	r22, Y+14	; 0x0e
     aa0:	7f 85       	ldd	r23, Y+15	; 0x0f
     aa2:	88 89       	ldd	r24, Y+16	; 0x10
     aa4:	99 89       	ldd	r25, Y+17	; 0x11
     aa6:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
     aaa:	dc 01       	movw	r26, r24
     aac:	cb 01       	movw	r24, r22
     aae:	9b 8b       	std	Y+19, r25	; 0x13
     ab0:	8a 8b       	std	Y+18, r24	; 0x12
     ab2:	8a 89       	ldd	r24, Y+18	; 0x12
     ab4:	9b 89       	ldd	r25, Y+19	; 0x13
     ab6:	9f 8b       	std	Y+23, r25	; 0x17
     ab8:	8e 8b       	std	Y+22, r24	; 0x16
     aba:	8e 89       	ldd	r24, Y+22	; 0x16
     abc:	9f 89       	ldd	r25, Y+23	; 0x17
     abe:	8c 01       	movw	r16, r24
     ac0:	f8 01       	movw	r30, r16
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <__stack+0x1c3>
     ac6:	8f 01       	movw	r16, r30
     ac8:	1f 8b       	std	Y+23, r17	; 0x17
     aca:	0e 8b       	std	Y+22, r16	; 0x16
     acc:	10 c0       	rjmp	.+32     	; 0xaee <__stack+0x1ef>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ace:	6d 81       	ldd	r22, Y+5	; 0x05
     ad0:	7e 81       	ldd	r23, Y+6	; 0x06
     ad2:	8f 81       	ldd	r24, Y+7	; 0x07
     ad4:	98 85       	ldd	r25, Y+8	; 0x08
     ad6:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
     ada:	dc 01       	movw	r26, r24
     adc:	cb 01       	movw	r24, r22
     ade:	89 87       	std	Y+9, r24	; 0x09
     ae0:	89 85       	ldd	r24, Y+9	; 0x09
     ae2:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ae4:	88 8d       	ldd	r24, Y+24	; 0x18
     ae6:	18 2f       	mov	r17, r24
     ae8:	1a 95       	dec	r17
     aea:	f1 f7       	brne	.-4      	; 0xae8 <__stack+0x1e9>
     aec:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     aee:	88 e2       	ldi	r24, 0x28	; 40
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	28 e2       	ldi	r18, 0x28	; 40
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	f9 01       	movw	r30, r18
     af8:	20 81       	ld	r18, Z
     afa:	2d 7f       	andi	r18, 0xFD	; 253
     afc:	fc 01       	movw	r30, r24
     afe:	20 83       	st	Z, r18
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a8 e4       	ldi	r26, 0x48	; 72
     b06:	b3 e4       	ldi	r27, 0x43	; 67
     b08:	89 8f       	std	Y+25, r24	; 0x19
     b0a:	9a 8f       	std	Y+26, r25	; 0x1a
     b0c:	ab 8f       	std	Y+27, r26	; 0x1b
     b0e:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     b10:	69 8d       	ldd	r22, Y+25	; 0x19
     b12:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b16:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b18:	2b ea       	ldi	r18, 0xAB	; 171
     b1a:	3a ea       	ldi	r19, 0xAA	; 170
     b1c:	4a ea       	ldi	r20, 0xAA	; 170
     b1e:	50 e4       	ldi	r21, 0x40	; 64
     b20:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	8d 8f       	std	Y+29, r24	; 0x1d
     b2a:	9e 8f       	std	Y+30, r25	; 0x1e
     b2c:	af 8f       	std	Y+31, r26	; 0x1f
     b2e:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
     b30:	11 e0       	ldi	r17, 0x01	; 1
     b32:	6d 8d       	ldd	r22, Y+29	; 0x1d
     b34:	7e 8d       	ldd	r23, Y+30	; 0x1e
     b36:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b38:	98 a1       	ldd	r25, Y+32	; 0x20
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	40 e8       	ldi	r20, 0x80	; 128
     b40:	5f e3       	ldi	r21, 0x3F	; 63
     b42:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
     b46:	88 23       	and	r24, r24
     b48:	0c f0       	brlt	.+2      	; 0xb4c <__stack+0x24d>
     b4a:	10 e0       	ldi	r17, 0x00	; 0
     b4c:	11 23       	and	r17, r17
     b4e:	19 f0       	breq	.+6      	; 0xb56 <__stack+0x257>
		__ticks = 1;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	89 a3       	std	Y+33, r24	; 0x21
     b54:	a3 c0       	rjmp	.+326    	; 0xc9c <__stack+0x39d>
	else if (__tmp > 255)
     b56:	11 e0       	ldi	r17, 0x01	; 1
     b58:	6d 8d       	ldd	r22, Y+29	; 0x1d
     b5a:	7e 8d       	ldd	r23, Y+30	; 0x1e
     b5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b5e:	98 a1       	ldd	r25, Y+32	; 0x20
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	4f e7       	ldi	r20, 0x7F	; 127
     b66:	53 e4       	ldi	r21, 0x43	; 67
     b68:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
     b6c:	18 16       	cp	r1, r24
     b6e:	0c f0       	brlt	.+2      	; 0xb72 <__stack+0x273>
     b70:	10 e0       	ldi	r17, 0x00	; 0
     b72:	11 23       	and	r17, r17
     b74:	09 f4       	brne	.+2      	; 0xb78 <__stack+0x279>
     b76:	89 c0       	rjmp	.+274    	; 0xc8a <__stack+0x38b>
	{
		_delay_ms(__us / 1000.0);
     b78:	69 8d       	ldd	r22, Y+25	; 0x19
     b7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	4a e7       	ldi	r20, 0x7A	; 122
     b86:	54 e4       	ldi	r21, 0x44	; 68
     b88:	0e 94 36 12 	call	0x246c	; 0x246c <__divsf3>
     b8c:	dc 01       	movw	r26, r24
     b8e:	cb 01       	movw	r24, r22
     b90:	8a a3       	std	Y+34, r24	; 0x22
     b92:	9b a3       	std	Y+35, r25	; 0x23
     b94:	ac a3       	std	Y+36, r26	; 0x24
     b96:	bd a3       	std	Y+37, r27	; 0x25
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b98:	6a a1       	ldd	r22, Y+34	; 0x22
     b9a:	7b a1       	ldd	r23, Y+35	; 0x23
     b9c:	8c a1       	ldd	r24, Y+36	; 0x24
     b9e:	9d a1       	ldd	r25, Y+37	; 0x25
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	4a e7       	ldi	r20, 0x7A	; 122
     ba6:	55 e4       	ldi	r21, 0x45	; 69
     ba8:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
     bac:	dc 01       	movw	r26, r24
     bae:	cb 01       	movw	r24, r22
     bb0:	8e a3       	std	Y+38, r24	; 0x26
     bb2:	9f a3       	std	Y+39, r25	; 0x27
     bb4:	a8 a7       	std	Y+40, r26	; 0x28
     bb6:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
     bb8:	11 e0       	ldi	r17, 0x01	; 1
     bba:	6e a1       	ldd	r22, Y+38	; 0x26
     bbc:	7f a1       	ldd	r23, Y+39	; 0x27
     bbe:	88 a5       	ldd	r24, Y+40	; 0x28
     bc0:	99 a5       	ldd	r25, Y+41	; 0x29
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e8       	ldi	r20, 0x80	; 128
     bc8:	5f e3       	ldi	r21, 0x3F	; 63
     bca:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
     bce:	88 23       	and	r24, r24
     bd0:	0c f0       	brlt	.+2      	; 0xbd4 <__stack+0x2d5>
     bd2:	10 e0       	ldi	r17, 0x00	; 0
     bd4:	11 23       	and	r17, r17
     bd6:	29 f0       	breq	.+10     	; 0xbe2 <__stack+0x2e3>
		__ticks = 1;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	9b a7       	std	Y+43, r25	; 0x2b
     bde:	8a a7       	std	Y+42, r24	; 0x2a
     be0:	46 c0       	rjmp	.+140    	; 0xc6e <__stack+0x36f>
	else if (__tmp > 65535)
     be2:	11 e0       	ldi	r17, 0x01	; 1
     be4:	6e a1       	ldd	r22, Y+38	; 0x26
     be6:	7f a1       	ldd	r23, Y+39	; 0x27
     be8:	88 a5       	ldd	r24, Y+40	; 0x28
     bea:	99 a5       	ldd	r25, Y+41	; 0x29
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	4f e7       	ldi	r20, 0x7F	; 127
     bf2:	57 e4       	ldi	r21, 0x47	; 71
     bf4:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
     bf8:	18 16       	cp	r1, r24
     bfa:	0c f0       	brlt	.+2      	; 0xbfe <__stack+0x2ff>
     bfc:	10 e0       	ldi	r17, 0x00	; 0
     bfe:	11 23       	and	r17, r17
     c00:	61 f1       	breq	.+88     	; 0xc5a <__stack+0x35b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c02:	6a a1       	ldd	r22, Y+34	; 0x22
     c04:	7b a1       	ldd	r23, Y+35	; 0x23
     c06:	8c a1       	ldd	r24, Y+36	; 0x24
     c08:	9d a1       	ldd	r25, Y+37	; 0x25
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e2       	ldi	r20, 0x20	; 32
     c10:	51 e4       	ldi	r21, 0x41	; 65
     c12:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	bc 01       	movw	r22, r24
     c1c:	cd 01       	movw	r24, r26
     c1e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	9b a7       	std	Y+43, r25	; 0x2b
     c28:	8a a7       	std	Y+42, r24	; 0x2a
     c2a:	12 c0       	rjmp	.+36     	; 0xc50 <__stack+0x351>
     c2c:	80 e9       	ldi	r24, 0x90	; 144
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	9d a7       	std	Y+45, r25	; 0x2d
     c32:	8c a7       	std	Y+44, r24	; 0x2c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c34:	8c a5       	ldd	r24, Y+44	; 0x2c
     c36:	9d a5       	ldd	r25, Y+45	; 0x2d
     c38:	8c 01       	movw	r16, r24
     c3a:	c8 01       	movw	r24, r16
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <__stack+0x33d>
     c40:	8c 01       	movw	r16, r24
     c42:	1d a7       	std	Y+45, r17	; 0x2d
     c44:	0c a7       	std	Y+44, r16	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c46:	8a a5       	ldd	r24, Y+42	; 0x2a
     c48:	9b a5       	ldd	r25, Y+43	; 0x2b
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	9b a7       	std	Y+43, r25	; 0x2b
     c4e:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c50:	8a a5       	ldd	r24, Y+42	; 0x2a
     c52:	9b a5       	ldd	r25, Y+43	; 0x2b
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	51 f7       	brne	.-44     	; 0xc2c <__stack+0x32d>
     c58:	28 c0       	rjmp	.+80     	; 0xcaa <__stack+0x3ab>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5a:	6e a1       	ldd	r22, Y+38	; 0x26
     c5c:	7f a1       	ldd	r23, Y+39	; 0x27
     c5e:	88 a5       	ldd	r24, Y+40	; 0x28
     c60:	99 a5       	ldd	r25, Y+41	; 0x29
     c62:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	9b a7       	std	Y+43, r25	; 0x2b
     c6c:	8a a7       	std	Y+42, r24	; 0x2a
     c6e:	8a a5       	ldd	r24, Y+42	; 0x2a
     c70:	9b a5       	ldd	r25, Y+43	; 0x2b
     c72:	9f a7       	std	Y+47, r25	; 0x2f
     c74:	8e a7       	std	Y+46, r24	; 0x2e
     c76:	8e a5       	ldd	r24, Y+46	; 0x2e
     c78:	9f a5       	ldd	r25, Y+47	; 0x2f
     c7a:	8c 01       	movw	r16, r24
     c7c:	f8 01       	movw	r30, r16
     c7e:	31 97       	sbiw	r30, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <__stack+0x37f>
     c82:	8f 01       	movw	r16, r30
     c84:	1f a7       	std	Y+47, r17	; 0x2f
     c86:	0e a7       	std	Y+46, r16	; 0x2e
     c88:	10 c0       	rjmp	.+32     	; 0xcaa <__stack+0x3ab>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c8a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c8c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     c8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c90:	98 a1       	ldd	r25, Y+32	; 0x20
     c92:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	89 a3       	std	Y+33, r24	; 0x21
     c9c:	89 a1       	ldd	r24, Y+33	; 0x21
     c9e:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ca0:	88 a9       	ldd	r24, Y+48	; 0x30
     ca2:	18 2f       	mov	r17, r24
     ca4:	1a 95       	dec	r17
     ca6:	f1 f7       	brne	.-4      	; 0xca4 <__stack+0x3a5>
     ca8:	18 ab       	std	Y+48, r17	; 0x30

	_delay_us(200);
	
	LCD_Port = (LCD_Port & 0x03) | (cmnd << 2);  /* sending lower nibble */
     caa:	88 e2       	ldi	r24, 0x28	; 40
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	28 e2       	ldi	r18, 0x28	; 40
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	f9 01       	movw	r30, r18
     cb4:	20 81       	ld	r18, Z
     cb6:	42 2f       	mov	r20, r18
     cb8:	43 70       	andi	r20, 0x03	; 3
     cba:	9e 01       	movw	r18, r28
     cbc:	29 5a       	subi	r18, 0xA9	; 169
     cbe:	3f 4f       	sbci	r19, 0xFF	; 255
     cc0:	f9 01       	movw	r30, r18
     cc2:	20 81       	ld	r18, Z
     cc4:	22 2f       	mov	r18, r18
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	22 0f       	add	r18, r18
     cca:	33 1f       	adc	r19, r19
     ccc:	22 0f       	add	r18, r18
     cce:	33 1f       	adc	r19, r19
     cd0:	24 2b       	or	r18, r20
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 83       	st	Z, r18
	LCD_Port |= (1<<EN);
     cd6:	88 e2       	ldi	r24, 0x28	; 40
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	28 e2       	ldi	r18, 0x28	; 40
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	f9 01       	movw	r30, r18
     ce0:	20 81       	ld	r18, Z
     ce2:	22 60       	ori	r18, 0x02	; 2
     ce4:	fc 01       	movw	r30, r24
     ce6:	20 83       	st	Z, r18
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a0 e8       	ldi	r26, 0x80	; 128
     cee:	bf e3       	ldi	r27, 0x3F	; 63
     cf0:	89 ab       	std	Y+49, r24	; 0x31
     cf2:	9a ab       	std	Y+50, r25	; 0x32
     cf4:	ab ab       	std	Y+51, r26	; 0x33
     cf6:	bc ab       	std	Y+52, r27	; 0x34
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     cf8:	69 a9       	ldd	r22, Y+49	; 0x31
     cfa:	7a a9       	ldd	r23, Y+50	; 0x32
     cfc:	8b a9       	ldd	r24, Y+51	; 0x33
     cfe:	9c a9       	ldd	r25, Y+52	; 0x34
     d00:	2b ea       	ldi	r18, 0xAB	; 171
     d02:	3a ea       	ldi	r19, 0xAA	; 170
     d04:	4a ea       	ldi	r20, 0xAA	; 170
     d06:	50 e4       	ldi	r21, 0x40	; 64
     d08:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	8d ab       	std	Y+53, r24	; 0x35
     d12:	9e ab       	std	Y+54, r25	; 0x36
     d14:	af ab       	std	Y+55, r26	; 0x37
     d16:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
     d18:	11 e0       	ldi	r17, 0x01	; 1
     d1a:	6d a9       	ldd	r22, Y+53	; 0x35
     d1c:	7e a9       	ldd	r23, Y+54	; 0x36
     d1e:	8f a9       	ldd	r24, Y+55	; 0x37
     d20:	98 ad       	ldd	r25, Y+56	; 0x38
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e8       	ldi	r20, 0x80	; 128
     d28:	5f e3       	ldi	r21, 0x3F	; 63
     d2a:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
     d2e:	88 23       	and	r24, r24
     d30:	0c f0       	brlt	.+2      	; 0xd34 <__stack+0x435>
     d32:	10 e0       	ldi	r17, 0x00	; 0
     d34:	11 23       	and	r17, r17
     d36:	19 f0       	breq	.+6      	; 0xd3e <__stack+0x43f>
		__ticks = 1;
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	89 af       	std	Y+57, r24	; 0x39
     d3c:	e6 c0       	rjmp	.+460    	; 0xf0a <__stack+0x60b>
	else if (__tmp > 255)
     d3e:	11 e0       	ldi	r17, 0x01	; 1
     d40:	6d a9       	ldd	r22, Y+53	; 0x35
     d42:	7e a9       	ldd	r23, Y+54	; 0x36
     d44:	8f a9       	ldd	r24, Y+55	; 0x37
     d46:	98 ad       	ldd	r25, Y+56	; 0x38
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	4f e7       	ldi	r20, 0x7F	; 127
     d4e:	53 e4       	ldi	r21, 0x43	; 67
     d50:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
     d54:	18 16       	cp	r1, r24
     d56:	0c f0       	brlt	.+2      	; 0xd5a <__stack+0x45b>
     d58:	10 e0       	ldi	r17, 0x00	; 0
     d5a:	11 23       	and	r17, r17
     d5c:	09 f4       	brne	.+2      	; 0xd60 <__stack+0x461>
     d5e:	cc c0       	rjmp	.+408    	; 0xef8 <__stack+0x5f9>
	{
		_delay_ms(__us / 1000.0);
     d60:	69 a9       	ldd	r22, Y+49	; 0x31
     d62:	7a a9       	ldd	r23, Y+50	; 0x32
     d64:	8b a9       	ldd	r24, Y+51	; 0x33
     d66:	9c a9       	ldd	r25, Y+52	; 0x34
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	4a e7       	ldi	r20, 0x7A	; 122
     d6e:	54 e4       	ldi	r21, 0x44	; 68
     d70:	0e 94 36 12 	call	0x246c	; 0x246c <__divsf3>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	8a af       	std	Y+58, r24	; 0x3a
     d7a:	9b af       	std	Y+59, r25	; 0x3b
     d7c:	ac af       	std	Y+60, r26	; 0x3c
     d7e:	bd af       	std	Y+61, r27	; 0x3d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     d80:	8e 01       	movw	r16, r28
     d82:	02 5c       	subi	r16, 0xC2	; 194
     d84:	1f 4f       	sbci	r17, 0xFF	; 255
     d86:	6a ad       	ldd	r22, Y+58	; 0x3a
     d88:	7b ad       	ldd	r23, Y+59	; 0x3b
     d8a:	8c ad       	ldd	r24, Y+60	; 0x3c
     d8c:	9d ad       	ldd	r25, Y+61	; 0x3d
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	4a e7       	ldi	r20, 0x7A	; 122
     d94:	55 e4       	ldi	r21, 0x45	; 69
     d96:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	f8 01       	movw	r30, r16
     da0:	80 83       	st	Z, r24
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	a2 83       	std	Z+2, r26	; 0x02
     da6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     da8:	ce 01       	movw	r24, r28
     daa:	ce 96       	adiw	r24, 0x3e	; 62
     dac:	11 e0       	ldi	r17, 0x01	; 1
     dae:	fc 01       	movw	r30, r24
     db0:	60 81       	ld	r22, Z
     db2:	71 81       	ldd	r23, Z+1	; 0x01
     db4:	82 81       	ldd	r24, Z+2	; 0x02
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e8       	ldi	r20, 0x80	; 128
     dbe:	5f e3       	ldi	r21, 0x3F	; 63
     dc0:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
     dc4:	88 23       	and	r24, r24
     dc6:	0c f0       	brlt	.+2      	; 0xdca <__stack+0x4cb>
     dc8:	10 e0       	ldi	r17, 0x00	; 0
     dca:	11 23       	and	r17, r17
     dcc:	49 f0       	breq	.+18     	; 0xde0 <__stack+0x4e1>
		__ticks = 1;
     dce:	ce 01       	movw	r24, r28
     dd0:	8e 5b       	subi	r24, 0xBE	; 190
     dd2:	9f 4f       	sbci	r25, 0xFF	; 255
     dd4:	21 e0       	ldi	r18, 0x01	; 1
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	fc 01       	movw	r30, r24
     dda:	31 83       	std	Z+1, r19	; 0x01
     ddc:	20 83       	st	Z, r18
     dde:	6e c0       	rjmp	.+220    	; 0xebc <__stack+0x5bd>
	else if (__tmp > 65535)
     de0:	ce 01       	movw	r24, r28
     de2:	ce 96       	adiw	r24, 0x3e	; 62
     de4:	11 e0       	ldi	r17, 0x01	; 1
     de6:	fc 01       	movw	r30, r24
     de8:	60 81       	ld	r22, Z
     dea:	71 81       	ldd	r23, Z+1	; 0x01
     dec:	82 81       	ldd	r24, Z+2	; 0x02
     dee:	93 81       	ldd	r25, Z+3	; 0x03
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	3f ef       	ldi	r19, 0xFF	; 255
     df4:	4f e7       	ldi	r20, 0x7F	; 127
     df6:	57 e4       	ldi	r21, 0x47	; 71
     df8:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
     dfc:	18 16       	cp	r1, r24
     dfe:	0c f0       	brlt	.+2      	; 0xe02 <__stack+0x503>
     e00:	10 e0       	ldi	r17, 0x00	; 0
     e02:	11 23       	and	r17, r17
     e04:	09 f4       	brne	.+2      	; 0xe08 <__stack+0x509>
     e06:	49 c0       	rjmp	.+146    	; 0xe9a <__stack+0x59b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e08:	6a ad       	ldd	r22, Y+58	; 0x3a
     e0a:	7b ad       	ldd	r23, Y+59	; 0x3b
     e0c:	8c ad       	ldd	r24, Y+60	; 0x3c
     e0e:	9d ad       	ldd	r25, Y+61	; 0x3d
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e2       	ldi	r20, 0x20	; 32
     e16:	51 e4       	ldi	r21, 0x41	; 65
     e18:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	8e 01       	movw	r16, r28
     e22:	0e 5b       	subi	r16, 0xBE	; 190
     e24:	1f 4f       	sbci	r17, 0xFF	; 255
     e26:	bc 01       	movw	r22, r24
     e28:	cd 01       	movw	r24, r26
     e2a:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	f8 01       	movw	r30, r16
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	80 83       	st	Z, r24
     e38:	27 c0       	rjmp	.+78     	; 0xe88 <__stack+0x589>
     e3a:	ce 01       	movw	r24, r28
     e3c:	8c 5b       	subi	r24, 0xBC	; 188
     e3e:	9f 4f       	sbci	r25, 0xFF	; 255
     e40:	20 e9       	ldi	r18, 0x90	; 144
     e42:	31 e0       	ldi	r19, 0x01	; 1
     e44:	fc 01       	movw	r30, r24
     e46:	31 83       	std	Z+1, r19	; 0x01
     e48:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e4a:	ce 01       	movw	r24, r28
     e4c:	8c 5b       	subi	r24, 0xBC	; 188
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	fc 01       	movw	r30, r24
     e52:	80 81       	ld	r24, Z
     e54:	91 81       	ldd	r25, Z+1	; 0x01
     e56:	8c 01       	movw	r16, r24
     e58:	c8 01       	movw	r24, r16
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <__stack+0x55b>
     e5e:	8c 01       	movw	r16, r24
     e60:	ce 01       	movw	r24, r28
     e62:	8c 5b       	subi	r24, 0xBC	; 188
     e64:	9f 4f       	sbci	r25, 0xFF	; 255
     e66:	fc 01       	movw	r30, r24
     e68:	11 83       	std	Z+1, r17	; 0x01
     e6a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6c:	ce 01       	movw	r24, r28
     e6e:	8e 5b       	subi	r24, 0xBE	; 190
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	9e 01       	movw	r18, r28
     e74:	2e 5b       	subi	r18, 0xBE	; 190
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
     e78:	f9 01       	movw	r30, r18
     e7a:	20 81       	ld	r18, Z
     e7c:	31 81       	ldd	r19, Z+1	; 0x01
     e7e:	21 50       	subi	r18, 0x01	; 1
     e80:	30 40       	sbci	r19, 0x00	; 0
     e82:	fc 01       	movw	r30, r24
     e84:	31 83       	std	Z+1, r19	; 0x01
     e86:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e88:	ce 01       	movw	r24, r28
     e8a:	8e 5b       	subi	r24, 0xBE	; 190
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	fc 01       	movw	r30, r24
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	89 f6       	brne	.-94     	; 0xe3a <__stack+0x53b>
     e98:	4b c0       	rjmp	.+150    	; 0xf30 <__stack+0x631>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9a:	8e 01       	movw	r16, r28
     e9c:	0e 5b       	subi	r16, 0xBE	; 190
     e9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ea0:	ce 01       	movw	r24, r28
     ea2:	ce 96       	adiw	r24, 0x3e	; 62
     ea4:	fc 01       	movw	r30, r24
     ea6:	60 81       	ld	r22, Z
     ea8:	71 81       	ldd	r23, Z+1	; 0x01
     eaa:	82 81       	ldd	r24, Z+2	; 0x02
     eac:	93 81       	ldd	r25, Z+3	; 0x03
     eae:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	f8 01       	movw	r30, r16
     eb8:	91 83       	std	Z+1, r25	; 0x01
     eba:	80 83       	st	Z, r24
     ebc:	ce 01       	movw	r24, r28
     ebe:	8a 5b       	subi	r24, 0xBA	; 186
     ec0:	9f 4f       	sbci	r25, 0xFF	; 255
     ec2:	9e 01       	movw	r18, r28
     ec4:	2e 5b       	subi	r18, 0xBE	; 190
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	f9 01       	movw	r30, r18
     eca:	20 81       	ld	r18, Z
     ecc:	31 81       	ldd	r19, Z+1	; 0x01
     ece:	fc 01       	movw	r30, r24
     ed0:	31 83       	std	Z+1, r19	; 0x01
     ed2:	20 83       	st	Z, r18
     ed4:	ce 01       	movw	r24, r28
     ed6:	8a 5b       	subi	r24, 0xBA	; 186
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	fc 01       	movw	r30, r24
     edc:	80 81       	ld	r24, Z
     ede:	91 81       	ldd	r25, Z+1	; 0x01
     ee0:	8c 01       	movw	r16, r24
     ee2:	c8 01       	movw	r24, r16
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <__stack+0x5e5>
     ee8:	8c 01       	movw	r16, r24
     eea:	ce 01       	movw	r24, r28
     eec:	8a 5b       	subi	r24, 0xBA	; 186
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	fc 01       	movw	r30, r24
     ef2:	11 83       	std	Z+1, r17	; 0x01
     ef4:	00 83       	st	Z, r16
     ef6:	1c c0       	rjmp	.+56     	; 0xf30 <__stack+0x631>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ef8:	6d a9       	ldd	r22, Y+53	; 0x35
     efa:	7e a9       	ldd	r23, Y+54	; 0x36
     efc:	8f a9       	ldd	r24, Y+55	; 0x37
     efe:	98 ad       	ldd	r25, Y+56	; 0x38
     f00:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	89 af       	std	Y+57, r24	; 0x39
     f0a:	ce 01       	movw	r24, r28
     f0c:	88 5b       	subi	r24, 0xB8	; 184
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	29 ad       	ldd	r18, Y+57	; 0x39
     f12:	fc 01       	movw	r30, r24
     f14:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f16:	ce 01       	movw	r24, r28
     f18:	88 5b       	subi	r24, 0xB8	; 184
     f1a:	9f 4f       	sbci	r25, 0xFF	; 255
     f1c:	fc 01       	movw	r30, r24
     f1e:	80 81       	ld	r24, Z
     f20:	18 2f       	mov	r17, r24
     f22:	1a 95       	dec	r17
     f24:	f1 f7       	brne	.-4      	; 0xf22 <__stack+0x623>
     f26:	ce 01       	movw	r24, r28
     f28:	88 5b       	subi	r24, 0xB8	; 184
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
     f2c:	fc 01       	movw	r30, r24
     f2e:	10 83       	st	Z, r17
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     f30:	88 e2       	ldi	r24, 0x28	; 40
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	28 e2       	ldi	r18, 0x28	; 40
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	f9 01       	movw	r30, r18
     f3a:	20 81       	ld	r18, Z
     f3c:	2d 7f       	andi	r18, 0xFD	; 253
     f3e:	fc 01       	movw	r30, r24
     f40:	20 83       	st	Z, r18
     f42:	9e 01       	movw	r18, r28
     f44:	27 5b       	subi	r18, 0xB7	; 183
     f46:	3f 4f       	sbci	r19, 0xFF	; 255
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a0 e0       	ldi	r26, 0x00	; 0
     f4e:	b0 e4       	ldi	r27, 0x40	; 64
     f50:	f9 01       	movw	r30, r18
     f52:	80 83       	st	Z, r24
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	a2 83       	std	Z+2, r26	; 0x02
     f58:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     f5a:	8e 01       	movw	r16, r28
     f5c:	03 5b       	subi	r16, 0xB3	; 179
     f5e:	1f 4f       	sbci	r17, 0xFF	; 255
     f60:	ce 01       	movw	r24, r28
     f62:	87 5b       	subi	r24, 0xB7	; 183
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	fc 01       	movw	r30, r24
     f68:	60 81       	ld	r22, Z
     f6a:	71 81       	ldd	r23, Z+1	; 0x01
     f6c:	82 81       	ldd	r24, Z+2	; 0x02
     f6e:	93 81       	ldd	r25, Z+3	; 0x03
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4a e7       	ldi	r20, 0x7A	; 122
     f76:	55 e4       	ldi	r21, 0x45	; 69
     f78:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	f8 01       	movw	r30, r16
     f82:	80 83       	st	Z, r24
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	a2 83       	std	Z+2, r26	; 0x02
     f88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f8a:	ce 01       	movw	r24, r28
     f8c:	83 5b       	subi	r24, 0xB3	; 179
     f8e:	9f 4f       	sbci	r25, 0xFF	; 255
     f90:	11 e0       	ldi	r17, 0x01	; 1
     f92:	fc 01       	movw	r30, r24
     f94:	60 81       	ld	r22, Z
     f96:	71 81       	ldd	r23, Z+1	; 0x01
     f98:	82 81       	ldd	r24, Z+2	; 0x02
     f9a:	93 81       	ldd	r25, Z+3	; 0x03
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e8       	ldi	r20, 0x80	; 128
     fa2:	5f e3       	ldi	r21, 0x3F	; 63
     fa4:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
     fa8:	88 23       	and	r24, r24
     faa:	0c f0       	brlt	.+2      	; 0xfae <__stack+0x6af>
     fac:	10 e0       	ldi	r17, 0x00	; 0
     fae:	11 23       	and	r17, r17
     fb0:	49 f0       	breq	.+18     	; 0xfc4 <__stack+0x6c5>
		__ticks = 1;
     fb2:	ce 01       	movw	r24, r28
     fb4:	8f 5a       	subi	r24, 0xAF	; 175
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	fc 01       	movw	r30, r24
     fbe:	31 83       	std	Z+1, r19	; 0x01
     fc0:	20 83       	st	Z, r18
     fc2:	74 c0       	rjmp	.+232    	; 0x10ac <__stack+0x7ad>
	else if (__tmp > 65535)
     fc4:	ce 01       	movw	r24, r28
     fc6:	83 5b       	subi	r24, 0xB3	; 179
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	11 e0       	ldi	r17, 0x01	; 1
     fcc:	fc 01       	movw	r30, r24
     fce:	60 81       	ld	r22, Z
     fd0:	71 81       	ldd	r23, Z+1	; 0x01
     fd2:	82 81       	ldd	r24, Z+2	; 0x02
     fd4:	93 81       	ldd	r25, Z+3	; 0x03
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	3f ef       	ldi	r19, 0xFF	; 255
     fda:	4f e7       	ldi	r20, 0x7F	; 127
     fdc:	57 e4       	ldi	r21, 0x47	; 71
     fde:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
     fe2:	18 16       	cp	r1, r24
     fe4:	0c f0       	brlt	.+2      	; 0xfe8 <__stack+0x6e9>
     fe6:	10 e0       	ldi	r17, 0x00	; 0
     fe8:	11 23       	and	r17, r17
     fea:	09 f4       	brne	.+2      	; 0xfee <__stack+0x6ef>
     fec:	4d c0       	rjmp	.+154    	; 0x1088 <__stack+0x789>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fee:	ce 01       	movw	r24, r28
     ff0:	87 5b       	subi	r24, 0xB7	; 183
     ff2:	9f 4f       	sbci	r25, 0xFF	; 255
     ff4:	fc 01       	movw	r30, r24
     ff6:	60 81       	ld	r22, Z
     ff8:	71 81       	ldd	r23, Z+1	; 0x01
     ffa:	82 81       	ldd	r24, Z+2	; 0x02
     ffc:	93 81       	ldd	r25, Z+3	; 0x03
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e2       	ldi	r20, 0x20	; 32
    1004:	51 e4       	ldi	r21, 0x41	; 65
    1006:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	8e 01       	movw	r16, r28
    1010:	0f 5a       	subi	r16, 0xAF	; 175
    1012:	1f 4f       	sbci	r17, 0xFF	; 255
    1014:	bc 01       	movw	r22, r24
    1016:	cd 01       	movw	r24, r26
    1018:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	f8 01       	movw	r30, r16
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	80 83       	st	Z, r24
    1026:	27 c0       	rjmp	.+78     	; 0x1076 <__stack+0x777>
    1028:	ce 01       	movw	r24, r28
    102a:	8d 5a       	subi	r24, 0xAD	; 173
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	20 e9       	ldi	r18, 0x90	; 144
    1030:	31 e0       	ldi	r19, 0x01	; 1
    1032:	fc 01       	movw	r30, r24
    1034:	31 83       	std	Z+1, r19	; 0x01
    1036:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1038:	ce 01       	movw	r24, r28
    103a:	8d 5a       	subi	r24, 0xAD	; 173
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	fc 01       	movw	r30, r24
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	8c 01       	movw	r16, r24
    1046:	c8 01       	movw	r24, r16
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <__stack+0x749>
    104c:	8c 01       	movw	r16, r24
    104e:	ce 01       	movw	r24, r28
    1050:	8d 5a       	subi	r24, 0xAD	; 173
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	fc 01       	movw	r30, r24
    1056:	11 83       	std	Z+1, r17	; 0x01
    1058:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105a:	ce 01       	movw	r24, r28
    105c:	8f 5a       	subi	r24, 0xAF	; 175
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	9e 01       	movw	r18, r28
    1062:	2f 5a       	subi	r18, 0xAF	; 175
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	f9 01       	movw	r30, r18
    1068:	20 81       	ld	r18, Z
    106a:	31 81       	ldd	r19, Z+1	; 0x01
    106c:	21 50       	subi	r18, 0x01	; 1
    106e:	30 40       	sbci	r19, 0x00	; 0
    1070:	fc 01       	movw	r30, r24
    1072:	31 83       	std	Z+1, r19	; 0x01
    1074:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1076:	ce 01       	movw	r24, r28
    1078:	8f 5a       	subi	r24, 0xAF	; 175
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	fc 01       	movw	r30, r24
    107e:	80 81       	ld	r24, Z
    1080:	91 81       	ldd	r25, Z+1	; 0x01
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	89 f6       	brne	.-94     	; 0x1028 <__stack+0x729>
    1086:	2f c0       	rjmp	.+94     	; 0x10e6 <__stack+0x7e7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1088:	8e 01       	movw	r16, r28
    108a:	0f 5a       	subi	r16, 0xAF	; 175
    108c:	1f 4f       	sbci	r17, 0xFF	; 255
    108e:	ce 01       	movw	r24, r28
    1090:	83 5b       	subi	r24, 0xB3	; 179
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	fc 01       	movw	r30, r24
    1096:	60 81       	ld	r22, Z
    1098:	71 81       	ldd	r23, Z+1	; 0x01
    109a:	82 81       	ldd	r24, Z+2	; 0x02
    109c:	93 81       	ldd	r25, Z+3	; 0x03
    109e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	f8 01       	movw	r30, r16
    10a8:	91 83       	std	Z+1, r25	; 0x01
    10aa:	80 83       	st	Z, r24
    10ac:	ce 01       	movw	r24, r28
    10ae:	8b 5a       	subi	r24, 0xAB	; 171
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	9e 01       	movw	r18, r28
    10b4:	2f 5a       	subi	r18, 0xAF	; 175
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
    10b8:	f9 01       	movw	r30, r18
    10ba:	20 81       	ld	r18, Z
    10bc:	31 81       	ldd	r19, Z+1	; 0x01
    10be:	fc 01       	movw	r30, r24
    10c0:	31 83       	std	Z+1, r19	; 0x01
    10c2:	20 83       	st	Z, r18
    10c4:	ce 01       	movw	r24, r28
    10c6:	8b 5a       	subi	r24, 0xAB	; 171
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	fc 01       	movw	r30, r24
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
    10d0:	8c 01       	movw	r16, r24
    10d2:	c8 01       	movw	r24, r16
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <__stack+0x7d5>
    10d8:	8c 01       	movw	r16, r24
    10da:	ce 01       	movw	r24, r28
    10dc:	8b 5a       	subi	r24, 0xAB	; 171
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	fc 01       	movw	r30, r24
    10e2:	11 83       	std	Z+1, r17	; 0x01
    10e4:	00 83       	st	Z, r16
	_delay_ms(2);
}
    10e6:	c9 5a       	subi	r28, 0xA9	; 169
    10e8:	df 4f       	sbci	r29, 0xFF	; 255
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	08 95       	ret

000010fe <LCD_Char>:

void LCD_Char( unsigned char data )
{
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	c7 55       	subi	r28, 0x57	; 87
    110c:	d0 40       	sbci	r29, 0x00	; 0
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	9e 01       	movw	r18, r28
    111a:	29 5a       	subi	r18, 0xA9	; 169
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	f9 01       	movw	r30, r18
    1120:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x03) | (data >> 2); /* sending upper nibble */
    1122:	88 e2       	ldi	r24, 0x28	; 40
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	28 e2       	ldi	r18, 0x28	; 40
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	f9 01       	movw	r30, r18
    112c:	20 81       	ld	r18, Z
    112e:	42 2f       	mov	r20, r18
    1130:	43 70       	andi	r20, 0x03	; 3
    1132:	9e 01       	movw	r18, r28
    1134:	29 5a       	subi	r18, 0xA9	; 169
    1136:	3f 4f       	sbci	r19, 0xFF	; 255
    1138:	f9 01       	movw	r30, r18
    113a:	20 81       	ld	r18, Z
    113c:	26 95       	lsr	r18
    113e:	26 95       	lsr	r18
    1140:	24 2b       	or	r18, r20
    1142:	fc 01       	movw	r30, r24
    1144:	20 83       	st	Z, r18
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
    1146:	88 e2       	ldi	r24, 0x28	; 40
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	28 e2       	ldi	r18, 0x28	; 40
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	f9 01       	movw	r30, r18
    1150:	20 81       	ld	r18, Z
    1152:	21 60       	ori	r18, 0x01	; 1
    1154:	fc 01       	movw	r30, r24
    1156:	20 83       	st	Z, r18
	LCD_Port|= (1<<EN);
    1158:	88 e2       	ldi	r24, 0x28	; 40
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	28 e2       	ldi	r18, 0x28	; 40
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	f9 01       	movw	r30, r18
    1162:	20 81       	ld	r18, Z
    1164:	22 60       	ori	r18, 0x02	; 2
    1166:	fc 01       	movw	r30, r24
    1168:	20 83       	st	Z, r18
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a0 e8       	ldi	r26, 0x80	; 128
    1170:	bf e3       	ldi	r27, 0x3F	; 63
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	ab 83       	std	Y+3, r26	; 0x03
    1178:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    117a:	69 81       	ldd	r22, Y+1	; 0x01
    117c:	7a 81       	ldd	r23, Y+2	; 0x02
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	2b ea       	ldi	r18, 0xAB	; 171
    1184:	3a ea       	ldi	r19, 0xAA	; 170
    1186:	4a ea       	ldi	r20, 0xAA	; 170
    1188:	50 e4       	ldi	r21, 0x40	; 64
    118a:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	8d 83       	std	Y+5, r24	; 0x05
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	af 83       	std	Y+7, r26	; 0x07
    1198:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    119a:	11 e0       	ldi	r17, 0x01	; 1
    119c:	6d 81       	ldd	r22, Y+5	; 0x05
    119e:	7e 81       	ldd	r23, Y+6	; 0x06
    11a0:	8f 81       	ldd	r24, Y+7	; 0x07
    11a2:	98 85       	ldd	r25, Y+8	; 0x08
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	40 e8       	ldi	r20, 0x80	; 128
    11aa:	5f e3       	ldi	r21, 0x3F	; 63
    11ac:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
    11b0:	88 23       	and	r24, r24
    11b2:	0c f0       	brlt	.+2      	; 0x11b6 <LCD_Char+0xb8>
    11b4:	10 e0       	ldi	r17, 0x00	; 0
    11b6:	11 23       	and	r17, r17
    11b8:	19 f0       	breq	.+6      	; 0x11c0 <LCD_Char+0xc2>
		__ticks = 1;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	89 87       	std	Y+9, r24	; 0x09
    11be:	a3 c0       	rjmp	.+326    	; 0x1306 <LCD_Char+0x208>
	else if (__tmp > 255)
    11c0:	11 e0       	ldi	r17, 0x01	; 1
    11c2:	6d 81       	ldd	r22, Y+5	; 0x05
    11c4:	7e 81       	ldd	r23, Y+6	; 0x06
    11c6:	8f 81       	ldd	r24, Y+7	; 0x07
    11c8:	98 85       	ldd	r25, Y+8	; 0x08
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	4f e7       	ldi	r20, 0x7F	; 127
    11d0:	53 e4       	ldi	r21, 0x43	; 67
    11d2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
    11d6:	18 16       	cp	r1, r24
    11d8:	0c f0       	brlt	.+2      	; 0x11dc <LCD_Char+0xde>
    11da:	10 e0       	ldi	r17, 0x00	; 0
    11dc:	11 23       	and	r17, r17
    11de:	09 f4       	brne	.+2      	; 0x11e2 <LCD_Char+0xe4>
    11e0:	89 c0       	rjmp	.+274    	; 0x12f4 <LCD_Char+0x1f6>
	{
		_delay_ms(__us / 1000.0);
    11e2:	69 81       	ldd	r22, Y+1	; 0x01
    11e4:	7a 81       	ldd	r23, Y+2	; 0x02
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	4a e7       	ldi	r20, 0x7A	; 122
    11f0:	54 e4       	ldi	r21, 0x44	; 68
    11f2:	0e 94 36 12 	call	0x246c	; 0x246c <__divsf3>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	8a 87       	std	Y+10, r24	; 0x0a
    11fc:	9b 87       	std	Y+11, r25	; 0x0b
    11fe:	ac 87       	std	Y+12, r26	; 0x0c
    1200:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1202:	6a 85       	ldd	r22, Y+10	; 0x0a
    1204:	7b 85       	ldd	r23, Y+11	; 0x0b
    1206:	8c 85       	ldd	r24, Y+12	; 0x0c
    1208:	9d 85       	ldd	r25, Y+13	; 0x0d
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	4a e7       	ldi	r20, 0x7A	; 122
    1210:	55 e4       	ldi	r21, 0x45	; 69
    1212:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	8e 87       	std	Y+14, r24	; 0x0e
    121c:	9f 87       	std	Y+15, r25	; 0x0f
    121e:	a8 8b       	std	Y+16, r26	; 0x10
    1220:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    1222:	11 e0       	ldi	r17, 0x01	; 1
    1224:	6e 85       	ldd	r22, Y+14	; 0x0e
    1226:	7f 85       	ldd	r23, Y+15	; 0x0f
    1228:	88 89       	ldd	r24, Y+16	; 0x10
    122a:	99 89       	ldd	r25, Y+17	; 0x11
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e8       	ldi	r20, 0x80	; 128
    1232:	5f e3       	ldi	r21, 0x3F	; 63
    1234:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
    1238:	88 23       	and	r24, r24
    123a:	0c f0       	brlt	.+2      	; 0x123e <LCD_Char+0x140>
    123c:	10 e0       	ldi	r17, 0x00	; 0
    123e:	11 23       	and	r17, r17
    1240:	29 f0       	breq	.+10     	; 0x124c <LCD_Char+0x14e>
		__ticks = 1;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9b 8b       	std	Y+19, r25	; 0x13
    1248:	8a 8b       	std	Y+18, r24	; 0x12
    124a:	46 c0       	rjmp	.+140    	; 0x12d8 <LCD_Char+0x1da>
	else if (__tmp > 65535)
    124c:	11 e0       	ldi	r17, 0x01	; 1
    124e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1250:	7f 85       	ldd	r23, Y+15	; 0x0f
    1252:	88 89       	ldd	r24, Y+16	; 0x10
    1254:	99 89       	ldd	r25, Y+17	; 0x11
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	57 e4       	ldi	r21, 0x47	; 71
    125e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
    1262:	18 16       	cp	r1, r24
    1264:	0c f0       	brlt	.+2      	; 0x1268 <LCD_Char+0x16a>
    1266:	10 e0       	ldi	r17, 0x00	; 0
    1268:	11 23       	and	r17, r17
    126a:	61 f1       	breq	.+88     	; 0x12c4 <LCD_Char+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126c:	6a 85       	ldd	r22, Y+10	; 0x0a
    126e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1270:	8c 85       	ldd	r24, Y+12	; 0x0c
    1272:	9d 85       	ldd	r25, Y+13	; 0x0d
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e2       	ldi	r20, 0x20	; 32
    127a:	51 e4       	ldi	r21, 0x41	; 65
    127c:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	bc 01       	movw	r22, r24
    1286:	cd 01       	movw	r24, r26
    1288:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	9b 8b       	std	Y+19, r25	; 0x13
    1292:	8a 8b       	std	Y+18, r24	; 0x12
    1294:	12 c0       	rjmp	.+36     	; 0x12ba <LCD_Char+0x1bc>
    1296:	80 e9       	ldi	r24, 0x90	; 144
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	9d 8b       	std	Y+21, r25	; 0x15
    129c:	8c 8b       	std	Y+20, r24	; 0x14
    129e:	8c 89       	ldd	r24, Y+20	; 0x14
    12a0:	9d 89       	ldd	r25, Y+21	; 0x15
    12a2:	8c 01       	movw	r16, r24
    12a4:	c8 01       	movw	r24, r16
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <LCD_Char+0x1a8>
    12aa:	8c 01       	movw	r16, r24
    12ac:	1d 8b       	std	Y+21, r17	; 0x15
    12ae:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b0:	8a 89       	ldd	r24, Y+18	; 0x12
    12b2:	9b 89       	ldd	r25, Y+19	; 0x13
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	9b 8b       	std	Y+19, r25	; 0x13
    12b8:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ba:	8a 89       	ldd	r24, Y+18	; 0x12
    12bc:	9b 89       	ldd	r25, Y+19	; 0x13
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	51 f7       	brne	.-44     	; 0x1296 <LCD_Char+0x198>
    12c2:	28 c0       	rjmp	.+80     	; 0x1314 <LCD_Char+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c4:	6e 85       	ldd	r22, Y+14	; 0x0e
    12c6:	7f 85       	ldd	r23, Y+15	; 0x0f
    12c8:	88 89       	ldd	r24, Y+16	; 0x10
    12ca:	99 89       	ldd	r25, Y+17	; 0x11
    12cc:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	9b 8b       	std	Y+19, r25	; 0x13
    12d6:	8a 8b       	std	Y+18, r24	; 0x12
    12d8:	8a 89       	ldd	r24, Y+18	; 0x12
    12da:	9b 89       	ldd	r25, Y+19	; 0x13
    12dc:	9f 8b       	std	Y+23, r25	; 0x17
    12de:	8e 8b       	std	Y+22, r24	; 0x16
    12e0:	8e 89       	ldd	r24, Y+22	; 0x16
    12e2:	9f 89       	ldd	r25, Y+23	; 0x17
    12e4:	8c 01       	movw	r16, r24
    12e6:	f8 01       	movw	r30, r16
    12e8:	31 97       	sbiw	r30, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <LCD_Char+0x1ea>
    12ec:	8f 01       	movw	r16, r30
    12ee:	1f 8b       	std	Y+23, r17	; 0x17
    12f0:	0e 8b       	std	Y+22, r16	; 0x16
    12f2:	10 c0       	rjmp	.+32     	; 0x1314 <LCD_Char+0x216>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12f4:	6d 81       	ldd	r22, Y+5	; 0x05
    12f6:	7e 81       	ldd	r23, Y+6	; 0x06
    12f8:	8f 81       	ldd	r24, Y+7	; 0x07
    12fa:	98 85       	ldd	r25, Y+8	; 0x08
    12fc:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	89 87       	std	Y+9, r24	; 0x09
    1306:	89 85       	ldd	r24, Y+9	; 0x09
    1308:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    130a:	88 8d       	ldd	r24, Y+24	; 0x18
    130c:	18 2f       	mov	r17, r24
    130e:	1a 95       	dec	r17
    1310:	f1 f7       	brne	.-4      	; 0x130e <LCD_Char+0x210>
    1312:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1314:	88 e2       	ldi	r24, 0x28	; 40
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	28 e2       	ldi	r18, 0x28	; 40
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	f9 01       	movw	r30, r18
    131e:	20 81       	ld	r18, Z
    1320:	2d 7f       	andi	r18, 0xFD	; 253
    1322:	fc 01       	movw	r30, r24
    1324:	20 83       	st	Z, r18
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a8 e4       	ldi	r26, 0x48	; 72
    132c:	b3 e4       	ldi	r27, 0x43	; 67
    132e:	89 8f       	std	Y+25, r24	; 0x19
    1330:	9a 8f       	std	Y+26, r25	; 0x1a
    1332:	ab 8f       	std	Y+27, r26	; 0x1b
    1334:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1336:	69 8d       	ldd	r22, Y+25	; 0x19
    1338:	7a 8d       	ldd	r23, Y+26	; 0x1a
    133a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    133c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    133e:	2b ea       	ldi	r18, 0xAB	; 171
    1340:	3a ea       	ldi	r19, 0xAA	; 170
    1342:	4a ea       	ldi	r20, 0xAA	; 170
    1344:	50 e4       	ldi	r21, 0x40	; 64
    1346:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	8d 8f       	std	Y+29, r24	; 0x1d
    1350:	9e 8f       	std	Y+30, r25	; 0x1e
    1352:	af 8f       	std	Y+31, r26	; 0x1f
    1354:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
    1356:	11 e0       	ldi	r17, 0x01	; 1
    1358:	6d 8d       	ldd	r22, Y+29	; 0x1d
    135a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    135c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    135e:	98 a1       	ldd	r25, Y+32	; 0x20
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e8       	ldi	r20, 0x80	; 128
    1366:	5f e3       	ldi	r21, 0x3F	; 63
    1368:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
    136c:	88 23       	and	r24, r24
    136e:	0c f0       	brlt	.+2      	; 0x1372 <LCD_Char+0x274>
    1370:	10 e0       	ldi	r17, 0x00	; 0
    1372:	11 23       	and	r17, r17
    1374:	19 f0       	breq	.+6      	; 0x137c <LCD_Char+0x27e>
		__ticks = 1;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	89 a3       	std	Y+33, r24	; 0x21
    137a:	a3 c0       	rjmp	.+326    	; 0x14c2 <LCD_Char+0x3c4>
	else if (__tmp > 255)
    137c:	11 e0       	ldi	r17, 0x01	; 1
    137e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1380:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1382:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1384:	98 a1       	ldd	r25, Y+32	; 0x20
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	4f e7       	ldi	r20, 0x7F	; 127
    138c:	53 e4       	ldi	r21, 0x43	; 67
    138e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
    1392:	18 16       	cp	r1, r24
    1394:	0c f0       	brlt	.+2      	; 0x1398 <LCD_Char+0x29a>
    1396:	10 e0       	ldi	r17, 0x00	; 0
    1398:	11 23       	and	r17, r17
    139a:	09 f4       	brne	.+2      	; 0x139e <LCD_Char+0x2a0>
    139c:	89 c0       	rjmp	.+274    	; 0x14b0 <LCD_Char+0x3b2>
	{
		_delay_ms(__us / 1000.0);
    139e:	69 8d       	ldd	r22, Y+25	; 0x19
    13a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	4a e7       	ldi	r20, 0x7A	; 122
    13ac:	54 e4       	ldi	r21, 0x44	; 68
    13ae:	0e 94 36 12 	call	0x246c	; 0x246c <__divsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8a a3       	std	Y+34, r24	; 0x22
    13b8:	9b a3       	std	Y+35, r25	; 0x23
    13ba:	ac a3       	std	Y+36, r26	; 0x24
    13bc:	bd a3       	std	Y+37, r27	; 0x25
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    13be:	6a a1       	ldd	r22, Y+34	; 0x22
    13c0:	7b a1       	ldd	r23, Y+35	; 0x23
    13c2:	8c a1       	ldd	r24, Y+36	; 0x24
    13c4:	9d a1       	ldd	r25, Y+37	; 0x25
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	4a e7       	ldi	r20, 0x7A	; 122
    13cc:	55 e4       	ldi	r21, 0x45	; 69
    13ce:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	8e a3       	std	Y+38, r24	; 0x26
    13d8:	9f a3       	std	Y+39, r25	; 0x27
    13da:	a8 a7       	std	Y+40, r26	; 0x28
    13dc:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
    13de:	11 e0       	ldi	r17, 0x01	; 1
    13e0:	6e a1       	ldd	r22, Y+38	; 0x26
    13e2:	7f a1       	ldd	r23, Y+39	; 0x27
    13e4:	88 a5       	ldd	r24, Y+40	; 0x28
    13e6:	99 a5       	ldd	r25, Y+41	; 0x29
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e8       	ldi	r20, 0x80	; 128
    13ee:	5f e3       	ldi	r21, 0x3F	; 63
    13f0:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
    13f4:	88 23       	and	r24, r24
    13f6:	0c f0       	brlt	.+2      	; 0x13fa <LCD_Char+0x2fc>
    13f8:	10 e0       	ldi	r17, 0x00	; 0
    13fa:	11 23       	and	r17, r17
    13fc:	29 f0       	breq	.+10     	; 0x1408 <LCD_Char+0x30a>
		__ticks = 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9b a7       	std	Y+43, r25	; 0x2b
    1404:	8a a7       	std	Y+42, r24	; 0x2a
    1406:	46 c0       	rjmp	.+140    	; 0x1494 <LCD_Char+0x396>
	else if (__tmp > 65535)
    1408:	11 e0       	ldi	r17, 0x01	; 1
    140a:	6e a1       	ldd	r22, Y+38	; 0x26
    140c:	7f a1       	ldd	r23, Y+39	; 0x27
    140e:	88 a5       	ldd	r24, Y+40	; 0x28
    1410:	99 a5       	ldd	r25, Y+41	; 0x29
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
    141e:	18 16       	cp	r1, r24
    1420:	0c f0       	brlt	.+2      	; 0x1424 <LCD_Char+0x326>
    1422:	10 e0       	ldi	r17, 0x00	; 0
    1424:	11 23       	and	r17, r17
    1426:	61 f1       	breq	.+88     	; 0x1480 <LCD_Char+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1428:	6a a1       	ldd	r22, Y+34	; 0x22
    142a:	7b a1       	ldd	r23, Y+35	; 0x23
    142c:	8c a1       	ldd	r24, Y+36	; 0x24
    142e:	9d a1       	ldd	r25, Y+37	; 0x25
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e2       	ldi	r20, 0x20	; 32
    1436:	51 e4       	ldi	r21, 0x41	; 65
    1438:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9b a7       	std	Y+43, r25	; 0x2b
    144e:	8a a7       	std	Y+42, r24	; 0x2a
    1450:	12 c0       	rjmp	.+36     	; 0x1476 <LCD_Char+0x378>
    1452:	80 e9       	ldi	r24, 0x90	; 144
    1454:	91 e0       	ldi	r25, 0x01	; 1
    1456:	9d a7       	std	Y+45, r25	; 0x2d
    1458:	8c a7       	std	Y+44, r24	; 0x2c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    145a:	8c a5       	ldd	r24, Y+44	; 0x2c
    145c:	9d a5       	ldd	r25, Y+45	; 0x2d
    145e:	8c 01       	movw	r16, r24
    1460:	c8 01       	movw	r24, r16
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <LCD_Char+0x364>
    1466:	8c 01       	movw	r16, r24
    1468:	1d a7       	std	Y+45, r17	; 0x2d
    146a:	0c a7       	std	Y+44, r16	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146c:	8a a5       	ldd	r24, Y+42	; 0x2a
    146e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	9b a7       	std	Y+43, r25	; 0x2b
    1474:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1476:	8a a5       	ldd	r24, Y+42	; 0x2a
    1478:	9b a5       	ldd	r25, Y+43	; 0x2b
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	51 f7       	brne	.-44     	; 0x1452 <LCD_Char+0x354>
    147e:	28 c0       	rjmp	.+80     	; 0x14d0 <LCD_Char+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1480:	6e a1       	ldd	r22, Y+38	; 0x26
    1482:	7f a1       	ldd	r23, Y+39	; 0x27
    1484:	88 a5       	ldd	r24, Y+40	; 0x28
    1486:	99 a5       	ldd	r25, Y+41	; 0x29
    1488:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	9b a7       	std	Y+43, r25	; 0x2b
    1492:	8a a7       	std	Y+42, r24	; 0x2a
    1494:	8a a5       	ldd	r24, Y+42	; 0x2a
    1496:	9b a5       	ldd	r25, Y+43	; 0x2b
    1498:	9f a7       	std	Y+47, r25	; 0x2f
    149a:	8e a7       	std	Y+46, r24	; 0x2e
    149c:	8e a5       	ldd	r24, Y+46	; 0x2e
    149e:	9f a5       	ldd	r25, Y+47	; 0x2f
    14a0:	8c 01       	movw	r16, r24
    14a2:	f8 01       	movw	r30, r16
    14a4:	31 97       	sbiw	r30, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <LCD_Char+0x3a6>
    14a8:	8f 01       	movw	r16, r30
    14aa:	1f a7       	std	Y+47, r17	; 0x2f
    14ac:	0e a7       	std	Y+46, r16	; 0x2e
    14ae:	10 c0       	rjmp	.+32     	; 0x14d0 <LCD_Char+0x3d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14b0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    14b2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    14b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14b6:	98 a1       	ldd	r25, Y+32	; 0x20
    14b8:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	89 a3       	std	Y+33, r24	; 0x21
    14c2:	89 a1       	ldd	r24, Y+33	; 0x21
    14c4:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14c6:	88 a9       	ldd	r24, Y+48	; 0x30
    14c8:	18 2f       	mov	r17, r24
    14ca:	1a 95       	dec	r17
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <LCD_Char+0x3cc>
    14ce:	18 ab       	std	Y+48, r17	; 0x30

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x03) | (data << 2); /* sending lower nibble */
    14d0:	88 e2       	ldi	r24, 0x28	; 40
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	28 e2       	ldi	r18, 0x28	; 40
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	f9 01       	movw	r30, r18
    14da:	20 81       	ld	r18, Z
    14dc:	42 2f       	mov	r20, r18
    14de:	43 70       	andi	r20, 0x03	; 3
    14e0:	9e 01       	movw	r18, r28
    14e2:	29 5a       	subi	r18, 0xA9	; 169
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
    14e6:	f9 01       	movw	r30, r18
    14e8:	20 81       	ld	r18, Z
    14ea:	22 2f       	mov	r18, r18
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	22 0f       	add	r18, r18
    14f0:	33 1f       	adc	r19, r19
    14f2:	22 0f       	add	r18, r18
    14f4:	33 1f       	adc	r19, r19
    14f6:	24 2b       	or	r18, r20
    14f8:	fc 01       	movw	r30, r24
    14fa:	20 83       	st	Z, r18
	LCD_Port |= (1<<EN);
    14fc:	88 e2       	ldi	r24, 0x28	; 40
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	28 e2       	ldi	r18, 0x28	; 40
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	f9 01       	movw	r30, r18
    1506:	20 81       	ld	r18, Z
    1508:	22 60       	ori	r18, 0x02	; 2
    150a:	fc 01       	movw	r30, r24
    150c:	20 83       	st	Z, r18
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a0 e8       	ldi	r26, 0x80	; 128
    1514:	bf e3       	ldi	r27, 0x3F	; 63
    1516:	89 ab       	std	Y+49, r24	; 0x31
    1518:	9a ab       	std	Y+50, r25	; 0x32
    151a:	ab ab       	std	Y+51, r26	; 0x33
    151c:	bc ab       	std	Y+52, r27	; 0x34
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    151e:	69 a9       	ldd	r22, Y+49	; 0x31
    1520:	7a a9       	ldd	r23, Y+50	; 0x32
    1522:	8b a9       	ldd	r24, Y+51	; 0x33
    1524:	9c a9       	ldd	r25, Y+52	; 0x34
    1526:	2b ea       	ldi	r18, 0xAB	; 171
    1528:	3a ea       	ldi	r19, 0xAA	; 170
    152a:	4a ea       	ldi	r20, 0xAA	; 170
    152c:	50 e4       	ldi	r21, 0x40	; 64
    152e:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	8d ab       	std	Y+53, r24	; 0x35
    1538:	9e ab       	std	Y+54, r25	; 0x36
    153a:	af ab       	std	Y+55, r26	; 0x37
    153c:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    153e:	11 e0       	ldi	r17, 0x01	; 1
    1540:	6d a9       	ldd	r22, Y+53	; 0x35
    1542:	7e a9       	ldd	r23, Y+54	; 0x36
    1544:	8f a9       	ldd	r24, Y+55	; 0x37
    1546:	98 ad       	ldd	r25, Y+56	; 0x38
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
    1554:	88 23       	and	r24, r24
    1556:	0c f0       	brlt	.+2      	; 0x155a <LCD_Char+0x45c>
    1558:	10 e0       	ldi	r17, 0x00	; 0
    155a:	11 23       	and	r17, r17
    155c:	19 f0       	breq	.+6      	; 0x1564 <LCD_Char+0x466>
		__ticks = 1;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	89 af       	std	Y+57, r24	; 0x39
    1562:	e6 c0       	rjmp	.+460    	; 0x1730 <LCD_Char+0x632>
	else if (__tmp > 255)
    1564:	11 e0       	ldi	r17, 0x01	; 1
    1566:	6d a9       	ldd	r22, Y+53	; 0x35
    1568:	7e a9       	ldd	r23, Y+54	; 0x36
    156a:	8f a9       	ldd	r24, Y+55	; 0x37
    156c:	98 ad       	ldd	r25, Y+56	; 0x38
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	4f e7       	ldi	r20, 0x7F	; 127
    1574:	53 e4       	ldi	r21, 0x43	; 67
    1576:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
    157a:	18 16       	cp	r1, r24
    157c:	0c f0       	brlt	.+2      	; 0x1580 <LCD_Char+0x482>
    157e:	10 e0       	ldi	r17, 0x00	; 0
    1580:	11 23       	and	r17, r17
    1582:	09 f4       	brne	.+2      	; 0x1586 <LCD_Char+0x488>
    1584:	cc c0       	rjmp	.+408    	; 0x171e <LCD_Char+0x620>
	{
		_delay_ms(__us / 1000.0);
    1586:	69 a9       	ldd	r22, Y+49	; 0x31
    1588:	7a a9       	ldd	r23, Y+50	; 0x32
    158a:	8b a9       	ldd	r24, Y+51	; 0x33
    158c:	9c a9       	ldd	r25, Y+52	; 0x34
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	4a e7       	ldi	r20, 0x7A	; 122
    1594:	54 e4       	ldi	r21, 0x44	; 68
    1596:	0e 94 36 12 	call	0x246c	; 0x246c <__divsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	8a af       	std	Y+58, r24	; 0x3a
    15a0:	9b af       	std	Y+59, r25	; 0x3b
    15a2:	ac af       	std	Y+60, r26	; 0x3c
    15a4:	bd af       	std	Y+61, r27	; 0x3d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    15a6:	8e 01       	movw	r16, r28
    15a8:	02 5c       	subi	r16, 0xC2	; 194
    15aa:	1f 4f       	sbci	r17, 0xFF	; 255
    15ac:	6a ad       	ldd	r22, Y+58	; 0x3a
    15ae:	7b ad       	ldd	r23, Y+59	; 0x3b
    15b0:	8c ad       	ldd	r24, Y+60	; 0x3c
    15b2:	9d ad       	ldd	r25, Y+61	; 0x3d
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	4a e7       	ldi	r20, 0x7A	; 122
    15ba:	55 e4       	ldi	r21, 0x45	; 69
    15bc:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	f8 01       	movw	r30, r16
    15c6:	80 83       	st	Z, r24
    15c8:	91 83       	std	Z+1, r25	; 0x01
    15ca:	a2 83       	std	Z+2, r26	; 0x02
    15cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ce:	ce 01       	movw	r24, r28
    15d0:	ce 96       	adiw	r24, 0x3e	; 62
    15d2:	11 e0       	ldi	r17, 0x01	; 1
    15d4:	fc 01       	movw	r30, r24
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e8       	ldi	r20, 0x80	; 128
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	0c f0       	brlt	.+2      	; 0x15f0 <LCD_Char+0x4f2>
    15ee:	10 e0       	ldi	r17, 0x00	; 0
    15f0:	11 23       	and	r17, r17
    15f2:	49 f0       	breq	.+18     	; 0x1606 <LCD_Char+0x508>
		__ticks = 1;
    15f4:	ce 01       	movw	r24, r28
    15f6:	8e 5b       	subi	r24, 0xBE	; 190
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	21 e0       	ldi	r18, 0x01	; 1
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	fc 01       	movw	r30, r24
    1600:	31 83       	std	Z+1, r19	; 0x01
    1602:	20 83       	st	Z, r18
    1604:	6e c0       	rjmp	.+220    	; 0x16e2 <LCD_Char+0x5e4>
	else if (__tmp > 65535)
    1606:	ce 01       	movw	r24, r28
    1608:	ce 96       	adiw	r24, 0x3e	; 62
    160a:	11 e0       	ldi	r17, 0x01	; 1
    160c:	fc 01       	movw	r30, r24
    160e:	60 81       	ld	r22, Z
    1610:	71 81       	ldd	r23, Z+1	; 0x01
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	3f ef       	ldi	r19, 0xFF	; 255
    161a:	4f e7       	ldi	r20, 0x7F	; 127
    161c:	57 e4       	ldi	r21, 0x47	; 71
    161e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
    1622:	18 16       	cp	r1, r24
    1624:	0c f0       	brlt	.+2      	; 0x1628 <LCD_Char+0x52a>
    1626:	10 e0       	ldi	r17, 0x00	; 0
    1628:	11 23       	and	r17, r17
    162a:	09 f4       	brne	.+2      	; 0x162e <LCD_Char+0x530>
    162c:	49 c0       	rjmp	.+146    	; 0x16c0 <LCD_Char+0x5c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162e:	6a ad       	ldd	r22, Y+58	; 0x3a
    1630:	7b ad       	ldd	r23, Y+59	; 0x3b
    1632:	8c ad       	ldd	r24, Y+60	; 0x3c
    1634:	9d ad       	ldd	r25, Y+61	; 0x3d
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e2       	ldi	r20, 0x20	; 32
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	8e 01       	movw	r16, r28
    1648:	0e 5b       	subi	r16, 0xBE	; 190
    164a:	1f 4f       	sbci	r17, 0xFF	; 255
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	f8 01       	movw	r30, r16
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
    165e:	27 c0       	rjmp	.+78     	; 0x16ae <LCD_Char+0x5b0>
    1660:	ce 01       	movw	r24, r28
    1662:	8c 5b       	subi	r24, 0xBC	; 188
    1664:	9f 4f       	sbci	r25, 0xFF	; 255
    1666:	20 e9       	ldi	r18, 0x90	; 144
    1668:	31 e0       	ldi	r19, 0x01	; 1
    166a:	fc 01       	movw	r30, r24
    166c:	31 83       	std	Z+1, r19	; 0x01
    166e:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1670:	ce 01       	movw	r24, r28
    1672:	8c 5b       	subi	r24, 0xBC	; 188
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	fc 01       	movw	r30, r24
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	8c 01       	movw	r16, r24
    167e:	c8 01       	movw	r24, r16
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <LCD_Char+0x582>
    1684:	8c 01       	movw	r16, r24
    1686:	ce 01       	movw	r24, r28
    1688:	8c 5b       	subi	r24, 0xBC	; 188
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	fc 01       	movw	r30, r24
    168e:	11 83       	std	Z+1, r17	; 0x01
    1690:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1692:	ce 01       	movw	r24, r28
    1694:	8e 5b       	subi	r24, 0xBE	; 190
    1696:	9f 4f       	sbci	r25, 0xFF	; 255
    1698:	9e 01       	movw	r18, r28
    169a:	2e 5b       	subi	r18, 0xBE	; 190
    169c:	3f 4f       	sbci	r19, 0xFF	; 255
    169e:	f9 01       	movw	r30, r18
    16a0:	20 81       	ld	r18, Z
    16a2:	31 81       	ldd	r19, Z+1	; 0x01
    16a4:	21 50       	subi	r18, 0x01	; 1
    16a6:	30 40       	sbci	r19, 0x00	; 0
    16a8:	fc 01       	movw	r30, r24
    16aa:	31 83       	std	Z+1, r19	; 0x01
    16ac:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ae:	ce 01       	movw	r24, r28
    16b0:	8e 5b       	subi	r24, 0xBE	; 190
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	fc 01       	movw	r30, r24
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	89 f6       	brne	.-94     	; 0x1660 <LCD_Char+0x562>
    16be:	4b c0       	rjmp	.+150    	; 0x1756 <LCD_Char+0x658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c0:	8e 01       	movw	r16, r28
    16c2:	0e 5b       	subi	r16, 0xBE	; 190
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	ce 01       	movw	r24, r28
    16c8:	ce 96       	adiw	r24, 0x3e	; 62
    16ca:	fc 01       	movw	r30, r24
    16cc:	60 81       	ld	r22, Z
    16ce:	71 81       	ldd	r23, Z+1	; 0x01
    16d0:	82 81       	ldd	r24, Z+2	; 0x02
    16d2:	93 81       	ldd	r25, Z+3	; 0x03
    16d4:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	f8 01       	movw	r30, r16
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	80 83       	st	Z, r24
    16e2:	ce 01       	movw	r24, r28
    16e4:	8a 5b       	subi	r24, 0xBA	; 186
    16e6:	9f 4f       	sbci	r25, 0xFF	; 255
    16e8:	9e 01       	movw	r18, r28
    16ea:	2e 5b       	subi	r18, 0xBE	; 190
    16ec:	3f 4f       	sbci	r19, 0xFF	; 255
    16ee:	f9 01       	movw	r30, r18
    16f0:	20 81       	ld	r18, Z
    16f2:	31 81       	ldd	r19, Z+1	; 0x01
    16f4:	fc 01       	movw	r30, r24
    16f6:	31 83       	std	Z+1, r19	; 0x01
    16f8:	20 83       	st	Z, r18
    16fa:	ce 01       	movw	r24, r28
    16fc:	8a 5b       	subi	r24, 0xBA	; 186
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	fc 01       	movw	r30, r24
    1702:	80 81       	ld	r24, Z
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	8c 01       	movw	r16, r24
    1708:	c8 01       	movw	r24, r16
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <LCD_Char+0x60c>
    170e:	8c 01       	movw	r16, r24
    1710:	ce 01       	movw	r24, r28
    1712:	8a 5b       	subi	r24, 0xBA	; 186
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	fc 01       	movw	r30, r24
    1718:	11 83       	std	Z+1, r17	; 0x01
    171a:	00 83       	st	Z, r16
    171c:	1c c0       	rjmp	.+56     	; 0x1756 <LCD_Char+0x658>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    171e:	6d a9       	ldd	r22, Y+53	; 0x35
    1720:	7e a9       	ldd	r23, Y+54	; 0x36
    1722:	8f a9       	ldd	r24, Y+55	; 0x37
    1724:	98 ad       	ldd	r25, Y+56	; 0x38
    1726:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	89 af       	std	Y+57, r24	; 0x39
    1730:	ce 01       	movw	r24, r28
    1732:	88 5b       	subi	r24, 0xB8	; 184
    1734:	9f 4f       	sbci	r25, 0xFF	; 255
    1736:	29 ad       	ldd	r18, Y+57	; 0x39
    1738:	fc 01       	movw	r30, r24
    173a:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    173c:	ce 01       	movw	r24, r28
    173e:	88 5b       	subi	r24, 0xB8	; 184
    1740:	9f 4f       	sbci	r25, 0xFF	; 255
    1742:	fc 01       	movw	r30, r24
    1744:	80 81       	ld	r24, Z
    1746:	18 2f       	mov	r17, r24
    1748:	1a 95       	dec	r17
    174a:	f1 f7       	brne	.-4      	; 0x1748 <LCD_Char+0x64a>
    174c:	ce 01       	movw	r24, r28
    174e:	88 5b       	subi	r24, 0xB8	; 184
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	fc 01       	movw	r30, r24
    1754:	10 83       	st	Z, r17
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1756:	88 e2       	ldi	r24, 0x28	; 40
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	28 e2       	ldi	r18, 0x28	; 40
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	f9 01       	movw	r30, r18
    1760:	20 81       	ld	r18, Z
    1762:	2d 7f       	andi	r18, 0xFD	; 253
    1764:	fc 01       	movw	r30, r24
    1766:	20 83       	st	Z, r18
    1768:	9e 01       	movw	r18, r28
    176a:	27 5b       	subi	r18, 0xB7	; 183
    176c:	3f 4f       	sbci	r19, 0xFF	; 255
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a0 e0       	ldi	r26, 0x00	; 0
    1774:	b0 e4       	ldi	r27, 0x40	; 64
    1776:	f9 01       	movw	r30, r18
    1778:	80 83       	st	Z, r24
    177a:	91 83       	std	Z+1, r25	; 0x01
    177c:	a2 83       	std	Z+2, r26	; 0x02
    177e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1780:	8e 01       	movw	r16, r28
    1782:	03 5b       	subi	r16, 0xB3	; 179
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	ce 01       	movw	r24, r28
    1788:	87 5b       	subi	r24, 0xB7	; 183
    178a:	9f 4f       	sbci	r25, 0xFF	; 255
    178c:	fc 01       	movw	r30, r24
    178e:	60 81       	ld	r22, Z
    1790:	71 81       	ldd	r23, Z+1	; 0x01
    1792:	82 81       	ldd	r24, Z+2	; 0x02
    1794:	93 81       	ldd	r25, Z+3	; 0x03
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	4a e7       	ldi	r20, 0x7A	; 122
    179c:	55 e4       	ldi	r21, 0x45	; 69
    179e:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	f8 01       	movw	r30, r16
    17a8:	80 83       	st	Z, r24
    17aa:	91 83       	std	Z+1, r25	; 0x01
    17ac:	a2 83       	std	Z+2, r26	; 0x02
    17ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b0:	ce 01       	movw	r24, r28
    17b2:	83 5b       	subi	r24, 0xB3	; 179
    17b4:	9f 4f       	sbci	r25, 0xFF	; 255
    17b6:	11 e0       	ldi	r17, 0x01	; 1
    17b8:	fc 01       	movw	r30, r24
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f e3       	ldi	r21, 0x3F	; 63
    17ca:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
    17ce:	88 23       	and	r24, r24
    17d0:	0c f0       	brlt	.+2      	; 0x17d4 <LCD_Char+0x6d6>
    17d2:	10 e0       	ldi	r17, 0x00	; 0
    17d4:	11 23       	and	r17, r17
    17d6:	49 f0       	breq	.+18     	; 0x17ea <LCD_Char+0x6ec>
		__ticks = 1;
    17d8:	ce 01       	movw	r24, r28
    17da:	8f 5a       	subi	r24, 0xAF	; 175
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	fc 01       	movw	r30, r24
    17e4:	31 83       	std	Z+1, r19	; 0x01
    17e6:	20 83       	st	Z, r18
    17e8:	74 c0       	rjmp	.+232    	; 0x18d2 <LCD_Char+0x7d4>
	else if (__tmp > 65535)
    17ea:	ce 01       	movw	r24, r28
    17ec:	83 5b       	subi	r24, 0xB3	; 179
    17ee:	9f 4f       	sbci	r25, 0xFF	; 255
    17f0:	11 e0       	ldi	r17, 0x01	; 1
    17f2:	fc 01       	movw	r30, r24
    17f4:	60 81       	ld	r22, Z
    17f6:	71 81       	ldd	r23, Z+1	; 0x01
    17f8:	82 81       	ldd	r24, Z+2	; 0x02
    17fa:	93 81       	ldd	r25, Z+3	; 0x03
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	3f ef       	ldi	r19, 0xFF	; 255
    1800:	4f e7       	ldi	r20, 0x7F	; 127
    1802:	57 e4       	ldi	r21, 0x47	; 71
    1804:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
    1808:	18 16       	cp	r1, r24
    180a:	0c f0       	brlt	.+2      	; 0x180e <LCD_Char+0x710>
    180c:	10 e0       	ldi	r17, 0x00	; 0
    180e:	11 23       	and	r17, r17
    1810:	09 f4       	brne	.+2      	; 0x1814 <LCD_Char+0x716>
    1812:	4d c0       	rjmp	.+154    	; 0x18ae <LCD_Char+0x7b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1814:	ce 01       	movw	r24, r28
    1816:	87 5b       	subi	r24, 0xB7	; 183
    1818:	9f 4f       	sbci	r25, 0xFF	; 255
    181a:	fc 01       	movw	r30, r24
    181c:	60 81       	ld	r22, Z
    181e:	71 81       	ldd	r23, Z+1	; 0x01
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e2       	ldi	r20, 0x20	; 32
    182a:	51 e4       	ldi	r21, 0x41	; 65
    182c:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	8e 01       	movw	r16, r28
    1836:	0f 5a       	subi	r16, 0xAF	; 175
    1838:	1f 4f       	sbci	r17, 0xFF	; 255
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	f8 01       	movw	r30, r16
    1848:	91 83       	std	Z+1, r25	; 0x01
    184a:	80 83       	st	Z, r24
    184c:	27 c0       	rjmp	.+78     	; 0x189c <LCD_Char+0x79e>
    184e:	ce 01       	movw	r24, r28
    1850:	8d 5a       	subi	r24, 0xAD	; 173
    1852:	9f 4f       	sbci	r25, 0xFF	; 255
    1854:	20 e9       	ldi	r18, 0x90	; 144
    1856:	31 e0       	ldi	r19, 0x01	; 1
    1858:	fc 01       	movw	r30, r24
    185a:	31 83       	std	Z+1, r19	; 0x01
    185c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    185e:	ce 01       	movw	r24, r28
    1860:	8d 5a       	subi	r24, 0xAD	; 173
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	fc 01       	movw	r30, r24
    1866:	80 81       	ld	r24, Z
    1868:	91 81       	ldd	r25, Z+1	; 0x01
    186a:	8c 01       	movw	r16, r24
    186c:	c8 01       	movw	r24, r16
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_Char+0x770>
    1872:	8c 01       	movw	r16, r24
    1874:	ce 01       	movw	r24, r28
    1876:	8d 5a       	subi	r24, 0xAD	; 173
    1878:	9f 4f       	sbci	r25, 0xFF	; 255
    187a:	fc 01       	movw	r30, r24
    187c:	11 83       	std	Z+1, r17	; 0x01
    187e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1880:	ce 01       	movw	r24, r28
    1882:	8f 5a       	subi	r24, 0xAF	; 175
    1884:	9f 4f       	sbci	r25, 0xFF	; 255
    1886:	9e 01       	movw	r18, r28
    1888:	2f 5a       	subi	r18, 0xAF	; 175
    188a:	3f 4f       	sbci	r19, 0xFF	; 255
    188c:	f9 01       	movw	r30, r18
    188e:	20 81       	ld	r18, Z
    1890:	31 81       	ldd	r19, Z+1	; 0x01
    1892:	21 50       	subi	r18, 0x01	; 1
    1894:	30 40       	sbci	r19, 0x00	; 0
    1896:	fc 01       	movw	r30, r24
    1898:	31 83       	std	Z+1, r19	; 0x01
    189a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189c:	ce 01       	movw	r24, r28
    189e:	8f 5a       	subi	r24, 0xAF	; 175
    18a0:	9f 4f       	sbci	r25, 0xFF	; 255
    18a2:	fc 01       	movw	r30, r24
    18a4:	80 81       	ld	r24, Z
    18a6:	91 81       	ldd	r25, Z+1	; 0x01
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	89 f6       	brne	.-94     	; 0x184e <LCD_Char+0x750>
    18ac:	2f c0       	rjmp	.+94     	; 0x190c <LCD_Char+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ae:	8e 01       	movw	r16, r28
    18b0:	0f 5a       	subi	r16, 0xAF	; 175
    18b2:	1f 4f       	sbci	r17, 0xFF	; 255
    18b4:	ce 01       	movw	r24, r28
    18b6:	83 5b       	subi	r24, 0xB3	; 179
    18b8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ba:	fc 01       	movw	r30, r24
    18bc:	60 81       	ld	r22, Z
    18be:	71 81       	ldd	r23, Z+1	; 0x01
    18c0:	82 81       	ldd	r24, Z+2	; 0x02
    18c2:	93 81       	ldd	r25, Z+3	; 0x03
    18c4:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	f8 01       	movw	r30, r16
    18ce:	91 83       	std	Z+1, r25	; 0x01
    18d0:	80 83       	st	Z, r24
    18d2:	ce 01       	movw	r24, r28
    18d4:	8b 5a       	subi	r24, 0xAB	; 171
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	9e 01       	movw	r18, r28
    18da:	2f 5a       	subi	r18, 0xAF	; 175
    18dc:	3f 4f       	sbci	r19, 0xFF	; 255
    18de:	f9 01       	movw	r30, r18
    18e0:	20 81       	ld	r18, Z
    18e2:	31 81       	ldd	r19, Z+1	; 0x01
    18e4:	fc 01       	movw	r30, r24
    18e6:	31 83       	std	Z+1, r19	; 0x01
    18e8:	20 83       	st	Z, r18
    18ea:	ce 01       	movw	r24, r28
    18ec:	8b 5a       	subi	r24, 0xAB	; 171
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	fc 01       	movw	r30, r24
    18f2:	80 81       	ld	r24, Z
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	8c 01       	movw	r16, r24
    18f8:	c8 01       	movw	r24, r16
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <LCD_Char+0x7fc>
    18fe:	8c 01       	movw	r16, r24
    1900:	ce 01       	movw	r24, r28
    1902:	8b 5a       	subi	r24, 0xAB	; 171
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	fc 01       	movw	r30, r24
    1908:	11 83       	std	Z+1, r17	; 0x01
    190a:	00 83       	st	Z, r16
	_delay_ms(2);
}
    190c:	c9 5a       	subi	r28, 0xA9	; 169
    190e:	df 4f       	sbci	r29, 0xFF	; 255
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	6c 97       	sbiw	r28, 0x1c	; 28
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
    193c:	87 e2       	ldi	r24, 0x27	; 39
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	2f ef       	ldi	r18, 0xFF	; 255
    1942:	fc 01       	movw	r30, r24
    1944:	20 83       	st	Z, r18
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 ea       	ldi	r26, 0xA0	; 160
    194c:	b1 e4       	ldi	r27, 0x41	; 65
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	9a 83       	std	Y+2, r25	; 0x02
    1952:	ab 83       	std	Y+3, r26	; 0x03
    1954:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1956:	69 81       	ldd	r22, Y+1	; 0x01
    1958:	7a 81       	ldd	r23, Y+2	; 0x02
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a e7       	ldi	r20, 0x7A	; 122
    1964:	55 e4       	ldi	r21, 0x45	; 69
    1966:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	8d 83       	std	Y+5, r24	; 0x05
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	af 83       	std	Y+7, r26	; 0x07
    1974:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1976:	11 e0       	ldi	r17, 0x01	; 1
    1978:	6d 81       	ldd	r22, Y+5	; 0x05
    197a:	7e 81       	ldd	r23, Y+6	; 0x06
    197c:	8f 81       	ldd	r24, Y+7	; 0x07
    197e:	98 85       	ldd	r25, Y+8	; 0x08
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e8       	ldi	r20, 0x80	; 128
    1986:	5f e3       	ldi	r21, 0x3F	; 63
    1988:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
    198c:	88 23       	and	r24, r24
    198e:	0c f0       	brlt	.+2      	; 0x1992 <LCD_Init+0x6e>
    1990:	10 e0       	ldi	r17, 0x00	; 0
    1992:	11 23       	and	r17, r17
    1994:	29 f0       	breq	.+10     	; 0x19a0 <LCD_Init+0x7c>
		__ticks = 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9a 87       	std	Y+10, r25	; 0x0a
    199c:	89 87       	std	Y+9, r24	; 0x09
    199e:	46 c0       	rjmp	.+140    	; 0x1a2c <LCD_Init+0x108>
	else if (__tmp > 65535)
    19a0:	11 e0       	ldi	r17, 0x01	; 1
    19a2:	6d 81       	ldd	r22, Y+5	; 0x05
    19a4:	7e 81       	ldd	r23, Y+6	; 0x06
    19a6:	8f 81       	ldd	r24, Y+7	; 0x07
    19a8:	98 85       	ldd	r25, Y+8	; 0x08
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	0c f0       	brlt	.+2      	; 0x19bc <LCD_Init+0x98>
    19ba:	10 e0       	ldi	r17, 0x00	; 0
    19bc:	11 23       	and	r17, r17
    19be:	61 f1       	breq	.+88     	; 0x1a18 <LCD_Init+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c0:	69 81       	ldd	r22, Y+1	; 0x01
    19c2:	7a 81       	ldd	r23, Y+2	; 0x02
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	9c 81       	ldd	r25, Y+4	; 0x04
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e2       	ldi	r20, 0x20	; 32
    19ce:	51 e4       	ldi	r21, 0x41	; 65
    19d0:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	bc 01       	movw	r22, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	9a 87       	std	Y+10, r25	; 0x0a
    19e6:	89 87       	std	Y+9, r24	; 0x09
    19e8:	12 c0       	rjmp	.+36     	; 0x1a0e <LCD_Init+0xea>
    19ea:	80 e9       	ldi	r24, 0x90	; 144
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	9c 87       	std	Y+12, r25	; 0x0c
    19f0:	8b 87       	std	Y+11, r24	; 0x0b
    19f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    19f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    19f6:	8c 01       	movw	r16, r24
    19f8:	c8 01       	movw	r24, r16
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <LCD_Init+0xd6>
    19fe:	8c 01       	movw	r16, r24
    1a00:	1c 87       	std	Y+12, r17	; 0x0c
    1a02:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	9a 87       	std	Y+10, r25	; 0x0a
    1a0c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	89 85       	ldd	r24, Y+9	; 0x09
    1a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	51 f7       	brne	.-44     	; 0x19ea <LCD_Init+0xc6>
    1a16:	17 c0       	rjmp	.+46     	; 0x1a46 <LCD_Init+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	6d 81       	ldd	r22, Y+5	; 0x05
    1a1a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1e:	98 85       	ldd	r25, Y+8	; 0x08
    1a20:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9a 87       	std	Y+10, r25	; 0x0a
    1a2a:	89 87       	std	Y+9, r24	; 0x09
    1a2c:	89 85       	ldd	r24, Y+9	; 0x09
    1a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a30:	9e 87       	std	Y+14, r25	; 0x0e
    1a32:	8d 87       	std	Y+13, r24	; 0x0d
    1a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a38:	8c 01       	movw	r16, r24
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	31 97       	sbiw	r30, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_Init+0x118>
    1a40:	8f 01       	movw	r16, r30
    1a42:	1e 87       	std	Y+14, r17	; 0x0e
    1a44:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
    1a46:	82 e0       	ldi	r24, 0x02	; 2
    1a48:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
    1a4c:	88 e2       	ldi	r24, 0x28	; 40
    1a4e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
    1a52:	8c e0       	ldi	r24, 0x0C	; 12
    1a54:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
    1a58:	86 e0       	ldi	r24, 0x06	; 6
    1a5a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Command>
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a0 e0       	ldi	r26, 0x00	; 0
    1a6a:	b0 e4       	ldi	r27, 0x40	; 64
    1a6c:	8f 87       	std	Y+15, r24	; 0x0f
    1a6e:	98 8b       	std	Y+16, r25	; 0x10
    1a70:	a9 8b       	std	Y+17, r26	; 0x11
    1a72:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a74:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a76:	78 89       	ldd	r23, Y+16	; 0x10
    1a78:	89 89       	ldd	r24, Y+17	; 0x11
    1a7a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	4a e7       	ldi	r20, 0x7A	; 122
    1a82:	55 e4       	ldi	r21, 0x45	; 69
    1a84:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	8b 8b       	std	Y+19, r24	; 0x13
    1a8e:	9c 8b       	std	Y+20, r25	; 0x14
    1a90:	ad 8b       	std	Y+21, r26	; 0x15
    1a92:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1a94:	11 e0       	ldi	r17, 0x01	; 1
    1a96:	6b 89       	ldd	r22, Y+19	; 0x13
    1a98:	7c 89       	ldd	r23, Y+20	; 0x14
    1a9a:	8d 89       	ldd	r24, Y+21	; 0x15
    1a9c:	9e 89       	ldd	r25, Y+22	; 0x16
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	0c f0       	brlt	.+2      	; 0x1ab0 <LCD_Init+0x18c>
    1aae:	10 e0       	ldi	r17, 0x00	; 0
    1ab0:	11 23       	and	r17, r17
    1ab2:	29 f0       	breq	.+10     	; 0x1abe <LCD_Init+0x19a>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	98 8f       	std	Y+24, r25	; 0x18
    1aba:	8f 8b       	std	Y+23, r24	; 0x17
    1abc:	46 c0       	rjmp	.+140    	; 0x1b4a <LCD_Init+0x226>
	else if (__tmp > 65535)
    1abe:	11 e0       	ldi	r17, 0x01	; 1
    1ac0:	6b 89       	ldd	r22, Y+19	; 0x13
    1ac2:	7c 89       	ldd	r23, Y+20	; 0x14
    1ac4:	8d 89       	ldd	r24, Y+21	; 0x15
    1ac6:	9e 89       	ldd	r25, Y+22	; 0x16
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	0c f0       	brlt	.+2      	; 0x1ada <LCD_Init+0x1b6>
    1ad8:	10 e0       	ldi	r17, 0x00	; 0
    1ada:	11 23       	and	r17, r17
    1adc:	61 f1       	breq	.+88     	; 0x1b36 <LCD_Init+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ade:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ae0:	78 89       	ldd	r23, Y+16	; 0x10
    1ae2:	89 89       	ldd	r24, Y+17	; 0x11
    1ae4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e2       	ldi	r20, 0x20	; 32
    1aec:	51 e4       	ldi	r21, 0x41	; 65
    1aee:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	bc 01       	movw	r22, r24
    1af8:	cd 01       	movw	r24, r26
    1afa:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	98 8f       	std	Y+24, r25	; 0x18
    1b04:	8f 8b       	std	Y+23, r24	; 0x17
    1b06:	12 c0       	rjmp	.+36     	; 0x1b2c <LCD_Init+0x208>
    1b08:	80 e9       	ldi	r24, 0x90	; 144
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b0e:	89 8f       	std	Y+25, r24	; 0x19
    1b10:	89 8d       	ldd	r24, Y+25	; 0x19
    1b12:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b14:	8c 01       	movw	r16, r24
    1b16:	c8 01       	movw	r24, r16
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_Init+0x1f4>
    1b1c:	8c 01       	movw	r16, r24
    1b1e:	1a 8f       	std	Y+26, r17	; 0x1a
    1b20:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b22:	8f 89       	ldd	r24, Y+23	; 0x17
    1b24:	98 8d       	ldd	r25, Y+24	; 0x18
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	98 8f       	std	Y+24, r25	; 0x18
    1b2a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	51 f7       	brne	.-44     	; 0x1b08 <LCD_Init+0x1e4>
    1b34:	17 c0       	rjmp	.+46     	; 0x1b64 <LCD_Init+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b36:	6b 89       	ldd	r22, Y+19	; 0x13
    1b38:	7c 89       	ldd	r23, Y+20	; 0x14
    1b3a:	8d 89       	ldd	r24, Y+21	; 0x15
    1b3c:	9e 89       	ldd	r25, Y+22	; 0x16
    1b3e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	98 8f       	std	Y+24, r25	; 0x18
    1b48:	8f 8b       	std	Y+23, r24	; 0x17
    1b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4e:	9c 8f       	std	Y+28, r25	; 0x1c
    1b50:	8b 8f       	std	Y+27, r24	; 0x1b
    1b52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b56:	8c 01       	movw	r16, r24
    1b58:	f8 01       	movw	r30, r16
    1b5a:	31 97       	sbiw	r30, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <LCD_Init+0x236>
    1b5e:	8f 01       	movw	r16, r30
    1b60:	1c 8f       	std	Y+28, r17	; 0x1c
    1b62:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(2);
}
    1b64:	6c 96       	adiw	r28, 0x1c	; 28
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	08 95       	ret

00001b7a <LCD_String>:

void LCD_String (char *str)		/* Send string to LCD function */
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <LCD_String+0x6>
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <LCD_String+0x8>
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    1b8a:	1a 82       	std	Y+2, r1	; 0x02
    1b8c:	19 82       	std	Y+1, r1	; 0x01
    1b8e:	0f c0       	rjmp	.+30     	; 0x1bae <LCD_String+0x34>
	{
		LCD_Char (str[i]);
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	9a 81       	ldd	r25, Y+2	; 0x02
    1b94:	2b 81       	ldd	r18, Y+3	; 0x03
    1b96:	3c 81       	ldd	r19, Y+4	; 0x04
    1b98:	82 0f       	add	r24, r18
    1b9a:	93 1f       	adc	r25, r19
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	80 81       	ld	r24, Z
    1ba0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Char>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	01 96       	adiw	r24, 0x01	; 1
    1baa:	9a 83       	std	Y+2, r25	; 0x02
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb6:	82 0f       	add	r24, r18
    1bb8:	93 1f       	adc	r25, r19
    1bba:	fc 01       	movw	r30, r24
    1bbc:	80 81       	ld	r24, Z
    1bbe:	88 23       	and	r24, r24
    1bc0:	39 f7       	brne	.-50     	; 0x1b90 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
	}
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <LCD_String_xy+0x6>
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <LCD_String_xy+0x8>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	6a 83       	std	Y+2, r22	; 0x02
    1be0:	5c 83       	std	Y+4, r21	; 0x04
    1be2:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	88 23       	and	r24, r24
    1be8:	49 f4       	brne	.+18     	; 0x1bfc <LCD_String_xy+0x2c>
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	80 31       	cpi	r24, 0x10	; 16
    1bee:	30 f4       	brcc	.+12     	; 0x1bfc <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	8f 70       	andi	r24, 0x0F	; 15
    1bf4:	80 68       	ori	r24, 0x80	; 128
    1bf6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Command>
    1bfa:	0b c0       	rjmp	.+22     	; 0x1c12 <LCD_String_xy+0x42>
	else if (row == 1 && pos<16)
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	41 f4       	brne	.+16     	; 0x1c12 <LCD_String_xy+0x42>
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	80 31       	cpi	r24, 0x10	; 16
    1c06:	28 f4       	brcc	.+10     	; 0x1c12 <LCD_String_xy+0x42>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	8f 70       	andi	r24, 0x0F	; 15
    1c0c:	80 6c       	ori	r24, 0xC0	; 192
    1c0e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	9c 81       	ldd	r25, Y+4	; 0x04
    1c16:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <LCD_String>
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <LCD_Clear>:

void LCD_Clear()
{
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	2e 97       	sbiw	r28, 0x0e	; 14
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
	LCD_Command (0x01);		/* Clear display */
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Command>
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	a0 e0       	ldi	r26, 0x00	; 0
    1c4c:	b0 e4       	ldi	r27, 0x40	; 64
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	9a 83       	std	Y+2, r25	; 0x02
    1c52:	ab 83       	std	Y+3, r26	; 0x03
    1c54:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c56:	69 81       	ldd	r22, Y+1	; 0x01
    1c58:	7a 81       	ldd	r23, Y+2	; 0x02
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	4a e7       	ldi	r20, 0x7A	; 122
    1c64:	55 e4       	ldi	r21, 0x45	; 69
    1c66:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	af 83       	std	Y+7, r26	; 0x07
    1c74:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1c76:	11 e0       	ldi	r17, 0x01	; 1
    1c78:	6d 81       	ldd	r22, Y+5	; 0x05
    1c7a:	7e 81       	ldd	r23, Y+6	; 0x06
    1c7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c7e:	98 85       	ldd	r25, Y+8	; 0x08
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 44 13 	call	0x2688	; 0x2688 <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	0c f0       	brlt	.+2      	; 0x1c92 <LCD_Clear+0x6a>
    1c90:	10 e0       	ldi	r17, 0x00	; 0
    1c92:	11 23       	and	r17, r17
    1c94:	29 f0       	breq	.+10     	; 0x1ca0 <LCD_Clear+0x78>
		__ticks = 1;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	9a 87       	std	Y+10, r25	; 0x0a
    1c9c:	89 87       	std	Y+9, r24	; 0x09
    1c9e:	46 c0       	rjmp	.+140    	; 0x1d2c <LCD_Clear+0x104>
	else if (__tmp > 65535)
    1ca0:	11 e0       	ldi	r17, 0x01	; 1
    1ca2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ca4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ca6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca8:	98 85       	ldd	r25, Y+8	; 0x08
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	57 e4       	ldi	r21, 0x47	; 71
    1cb2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	0c f0       	brlt	.+2      	; 0x1cbc <LCD_Clear+0x94>
    1cba:	10 e0       	ldi	r17, 0x00	; 0
    1cbc:	11 23       	and	r17, r17
    1cbe:	61 f1       	breq	.+88     	; 0x1d18 <LCD_Clear+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	69 81       	ldd	r22, Y+1	; 0x01
    1cc2:	7a 81       	ldd	r23, Y+2	; 0x02
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e2       	ldi	r20, 0x20	; 32
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	0e 94 3c 11 	call	0x2278	; 0x2278 <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9a 87       	std	Y+10, r25	; 0x0a
    1ce6:	89 87       	std	Y+9, r24	; 0x09
    1ce8:	12 c0       	rjmp	.+36     	; 0x1d0e <LCD_Clear+0xe6>
    1cea:	80 e9       	ldi	r24, 0x90	; 144
    1cec:	91 e0       	ldi	r25, 0x01	; 1
    1cee:	9c 87       	std	Y+12, r25	; 0x0c
    1cf0:	8b 87       	std	Y+11, r24	; 0x0b
    1cf2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cf4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cf6:	8c 01       	movw	r16, r24
    1cf8:	c8 01       	movw	r24, r16
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <LCD_Clear+0xd2>
    1cfe:	8c 01       	movw	r16, r24
    1d00:	1c 87       	std	Y+12, r17	; 0x0c
    1d02:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d04:	89 85       	ldd	r24, Y+9	; 0x09
    1d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	9a 87       	std	Y+10, r25	; 0x0a
    1d0c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0e:	89 85       	ldd	r24, Y+9	; 0x09
    1d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	51 f7       	brne	.-44     	; 0x1cea <LCD_Clear+0xc2>
    1d16:	17 c0       	rjmp	.+46     	; 0x1d46 <LCD_Clear+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d18:	6d 81       	ldd	r22, Y+5	; 0x05
    1d1a:	7e 81       	ldd	r23, Y+6	; 0x06
    1d1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d1e:	98 85       	ldd	r25, Y+8	; 0x08
    1d20:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9a 87       	std	Y+10, r25	; 0x0a
    1d2a:	89 87       	std	Y+9, r24	; 0x09
    1d2c:	89 85       	ldd	r24, Y+9	; 0x09
    1d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d30:	9e 87       	std	Y+14, r25	; 0x0e
    1d32:	8d 87       	std	Y+13, r24	; 0x0d
    1d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d38:	8c 01       	movw	r16, r24
    1d3a:	c8 01       	movw	r24, r16
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <LCD_Clear+0x114>
    1d40:	8c 01       	movw	r16, r24
    1d42:	1e 87       	std	Y+14, r17	; 0x0e
    1d44:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    1d46:	80 e8       	ldi	r24, 0x80	; 128
    1d48:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LCD_Command>
}
    1d4c:	2e 96       	adiw	r28, 0x0e	; 14
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	08 95       	ret

00001d62 <PWM0_setDutyCycle>:
D4,D7 pwm1 direction -> output on D7
*/


void PWM0_setDutyCycle(unsigned char dutyCycle)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	0f 92       	push	r0
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	89 83       	std	Y+1, r24	; 0x01
	OCR0A = dutyCycle;
    1d6e:	87 e4       	ldi	r24, 0x47	; 71
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	29 81       	ldd	r18, Y+1	; 0x01
    1d74:	fc 01       	movw	r30, r24
    1d76:	20 83       	st	Z, r18
}
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <PWM1_setDutyCycle>:

void PWM1_setDutyCycle(unsigned char dutyCycle)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	0f 92       	push	r0
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	89 83       	std	Y+1, r24	; 0x01
	OCR0B = dutyCycle;
    1d8c:	88 e4       	ldi	r24, 0x48	; 72
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	29 81       	ldd	r18, Y+1	; 0x01
    1d92:	fc 01       	movw	r30, r24
    1d94:	20 83       	st	Z, r18
}
    1d96:	0f 90       	pop	r0
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <PWM0_ClockWise>:
void PWM0_ClockWise()
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
	PORTD |=  (1 << 0) ;
    1da6:	8b e2       	ldi	r24, 0x2B	; 43
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	2b e2       	ldi	r18, 0x2B	; 43
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	f9 01       	movw	r30, r18
    1db0:	20 81       	ld	r18, Z
    1db2:	21 60       	ori	r18, 0x01	; 1
    1db4:	fc 01       	movw	r30, r24
    1db6:	20 83       	st	Z, r18
	PORTD &=  ~(1 << 1) ;
    1db8:	8b e2       	ldi	r24, 0x2B	; 43
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	2b e2       	ldi	r18, 0x2B	; 43
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	f9 01       	movw	r30, r18
    1dc2:	20 81       	ld	r18, Z
    1dc4:	2d 7f       	andi	r18, 0xFD	; 253
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	20 83       	st	Z, r18
}
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <PWM0_AntiClockWise>:

void PWM0_AntiClockWise()
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
	PORTD |=  (1 << 1) ;
    1dd8:	8b e2       	ldi	r24, 0x2B	; 43
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	2b e2       	ldi	r18, 0x2B	; 43
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	f9 01       	movw	r30, r18
    1de2:	20 81       	ld	r18, Z
    1de4:	22 60       	ori	r18, 0x02	; 2
    1de6:	fc 01       	movw	r30, r24
    1de8:	20 83       	st	Z, r18
	PORTD &=  ~(1 << 0) ;
    1dea:	8b e2       	ldi	r24, 0x2B	; 43
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	2b e2       	ldi	r18, 0x2B	; 43
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	f9 01       	movw	r30, r18
    1df4:	20 81       	ld	r18, Z
    1df6:	2e 7f       	andi	r18, 0xFE	; 254
    1df8:	fc 01       	movw	r30, r24
    1dfa:	20 83       	st	Z, r18
}
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <PWM1_ClockWise>:

void PWM1_ClockWise()
{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
	PORTD |=  (1 << 4) ;
    1e0a:	8b e2       	ldi	r24, 0x2B	; 43
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	2b e2       	ldi	r18, 0x2B	; 43
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	f9 01       	movw	r30, r18
    1e14:	20 81       	ld	r18, Z
    1e16:	20 61       	ori	r18, 0x10	; 16
    1e18:	fc 01       	movw	r30, r24
    1e1a:	20 83       	st	Z, r18
	PORTD &=  ~(1 << 7) ;
    1e1c:	8b e2       	ldi	r24, 0x2B	; 43
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	2b e2       	ldi	r18, 0x2B	; 43
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	f9 01       	movw	r30, r18
    1e26:	20 81       	ld	r18, Z
    1e28:	2f 77       	andi	r18, 0x7F	; 127
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	20 83       	st	Z, r18
}
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <PWM1_AntiClockWise>:

void PWM1_AntiClockWise()
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
	PORTD |=  (1 << 7) ;
    1e3c:	8b e2       	ldi	r24, 0x2B	; 43
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	2b e2       	ldi	r18, 0x2B	; 43
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	f9 01       	movw	r30, r18
    1e46:	20 81       	ld	r18, Z
    1e48:	20 68       	ori	r18, 0x80	; 128
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	20 83       	st	Z, r18
	PORTD &=  ~(1 << 4) ;
    1e4e:	8b e2       	ldi	r24, 0x2B	; 43
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	2b e2       	ldi	r18, 0x2B	; 43
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	f9 01       	movw	r30, r18
    1e58:	20 81       	ld	r18, Z
    1e5a:	2f 7e       	andi	r18, 0xEF	; 239
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	20 83       	st	Z, r18
}
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <PWM_start>:
void PWM_start()
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1 << 6) | (1 << 1) | (1 << 0) | (1 << 7) | (1 << 4) | (1 << 5) ;
    1e6e:	8a e2       	ldi	r24, 0x2A	; 42
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	2a e2       	ldi	r18, 0x2A	; 42
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	f9 01       	movw	r30, r18
    1e78:	20 81       	ld	r18, Z
    1e7a:	23 6f       	ori	r18, 0xF3	; 243
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	20 83       	st	Z, r18
	TCCR0A |= (1 << COM0A1);
    1e80:	84 e4       	ldi	r24, 0x44	; 68
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	24 e4       	ldi	r18, 0x44	; 68
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	f9 01       	movw	r30, r18
    1e8a:	20 81       	ld	r18, Z
    1e8c:	20 68       	ori	r18, 0x80	; 128
    1e8e:	fc 01       	movw	r30, r24
    1e90:	20 83       	st	Z, r18
	TCCR0A |= (1 << WGM00);
    1e92:	84 e4       	ldi	r24, 0x44	; 68
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	24 e4       	ldi	r18, 0x44	; 68
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	f9 01       	movw	r30, r18
    1e9c:	20 81       	ld	r18, Z
    1e9e:	21 60       	ori	r18, 0x01	; 1
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	20 83       	st	Z, r18
	TCCR0B |= (1 << CS01);
    1ea4:	85 e4       	ldi	r24, 0x45	; 69
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	25 e4       	ldi	r18, 0x45	; 69
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	f9 01       	movw	r30, r18
    1eae:	20 81       	ld	r18, Z
    1eb0:	22 60       	ori	r18, 0x02	; 2
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	20 83       	st	Z, r18
	PWM0_setDutyCycle(255);
    1eb6:	8f ef       	ldi	r24, 0xFF	; 255
    1eb8:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <PWM0_setDutyCycle>
	PWM1_setDutyCycle(255);
    1ebc:	8f ef       	ldi	r24, 0xFF	; 255
    1ebe:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <PWM1_setDutyCycle>
	PWM0_ClockWise();
    1ec2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <PWM0_ClockWise>
	PWM1_AntiClockWise();
    1ec6:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <PWM1_AntiClockWise>
}
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <__fixunssfsi>:
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	7b 01       	movw	r14, r22
    1eda:	8c 01       	movw	r16, r24
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	5f e4       	ldi	r21, 0x4F	; 79
    1ee4:	0e 94 14 13 	call	0x2628	; 0x2628 <__gesf2>
    1ee8:	87 fd       	sbrc	r24, 7
    1eea:	11 c0       	rjmp	.+34     	; 0x1f0e <__fixunssfsi+0x3e>
    1eec:	c8 01       	movw	r24, r16
    1eee:	b7 01       	movw	r22, r14
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	5f e4       	ldi	r21, 0x4F	; 79
    1ef8:	0e 94 0b 11 	call	0x2216	; 0x2216 <__subsf3>
    1efc:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__fixsfsi>
    1f00:	9b 01       	movw	r18, r22
    1f02:	ac 01       	movw	r20, r24
    1f04:	20 50       	subi	r18, 0x00	; 0
    1f06:	30 40       	sbci	r19, 0x00	; 0
    1f08:	40 40       	sbci	r20, 0x00	; 0
    1f0a:	50 48       	sbci	r21, 0x80	; 128
    1f0c:	06 c0       	rjmp	.+12     	; 0x1f1a <__fixunssfsi+0x4a>
    1f0e:	c8 01       	movw	r24, r16
    1f10:	b7 01       	movw	r22, r14
    1f12:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__fixsfsi>
    1f16:	9b 01       	movw	r18, r22
    1f18:	ac 01       	movw	r20, r24
    1f1a:	b9 01       	movw	r22, r18
    1f1c:	ca 01       	movw	r24, r20
    1f1e:	1f 91       	pop	r17
    1f20:	0f 91       	pop	r16
    1f22:	ff 90       	pop	r15
    1f24:	ef 90       	pop	r14
    1f26:	08 95       	ret

00001f28 <_fpadd_parts>:
    1f28:	a0 e0       	ldi	r26, 0x00	; 0
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	ea e9       	ldi	r30, 0x9A	; 154
    1f2e:	ff e0       	ldi	r31, 0x0F	; 15
    1f30:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x8>
    1f34:	fc 01       	movw	r30, r24
    1f36:	ea 01       	movw	r28, r20
    1f38:	80 81       	ld	r24, Z
    1f3a:	82 30       	cpi	r24, 0x02	; 2
    1f3c:	08 f4       	brcc	.+2      	; 0x1f40 <_fpadd_parts+0x18>
    1f3e:	38 c1       	rjmp	.+624    	; 0x21b0 <_fpadd_parts+0x288>
    1f40:	db 01       	movw	r26, r22
    1f42:	9c 91       	ld	r25, X
    1f44:	92 30       	cpi	r25, 0x02	; 2
    1f46:	08 f4       	brcc	.+2      	; 0x1f4a <_fpadd_parts+0x22>
    1f48:	30 c1       	rjmp	.+608    	; 0x21aa <_fpadd_parts+0x282>
    1f4a:	84 30       	cpi	r24, 0x04	; 4
    1f4c:	59 f4       	brne	.+22     	; 0x1f64 <_fpadd_parts+0x3c>
    1f4e:	94 30       	cpi	r25, 0x04	; 4
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <_fpadd_parts+0x2c>
    1f52:	2e c1       	rjmp	.+604    	; 0x21b0 <_fpadd_parts+0x288>
    1f54:	91 81       	ldd	r25, Z+1	; 0x01
    1f56:	11 96       	adiw	r26, 0x01	; 1
    1f58:	8c 91       	ld	r24, X
    1f5a:	11 97       	sbiw	r26, 0x01	; 1
    1f5c:	98 17       	cp	r25, r24
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <_fpadd_parts+0x3a>
    1f60:	21 c1       	rjmp	.+578    	; 0x21a4 <_fpadd_parts+0x27c>
    1f62:	26 c1       	rjmp	.+588    	; 0x21b0 <_fpadd_parts+0x288>
    1f64:	94 30       	cpi	r25, 0x04	; 4
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <_fpadd_parts+0x42>
    1f68:	20 c1       	rjmp	.+576    	; 0x21aa <_fpadd_parts+0x282>
    1f6a:	92 30       	cpi	r25, 0x02	; 2
    1f6c:	b1 f4       	brne	.+44     	; 0x1f9a <_fpadd_parts+0x72>
    1f6e:	82 30       	cpi	r24, 0x02	; 2
    1f70:	09 f0       	breq	.+2      	; 0x1f74 <_fpadd_parts+0x4c>
    1f72:	1e c1       	rjmp	.+572    	; 0x21b0 <_fpadd_parts+0x288>
    1f74:	ca 01       	movw	r24, r20
    1f76:	af 01       	movw	r20, r30
    1f78:	28 e0       	ldi	r18, 0x08	; 8
    1f7a:	da 01       	movw	r26, r20
    1f7c:	0d 90       	ld	r0, X+
    1f7e:	ad 01       	movw	r20, r26
    1f80:	dc 01       	movw	r26, r24
    1f82:	0d 92       	st	X+, r0
    1f84:	cd 01       	movw	r24, r26
    1f86:	21 50       	subi	r18, 0x01	; 1
    1f88:	c1 f7       	brne	.-16     	; 0x1f7a <_fpadd_parts+0x52>
    1f8a:	db 01       	movw	r26, r22
    1f8c:	11 96       	adiw	r26, 0x01	; 1
    1f8e:	8c 91       	ld	r24, X
    1f90:	11 97       	sbiw	r26, 0x01	; 1
    1f92:	91 81       	ldd	r25, Z+1	; 0x01
    1f94:	89 23       	and	r24, r25
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	0a c1       	rjmp	.+532    	; 0x21ae <_fpadd_parts+0x286>
    1f9a:	82 30       	cpi	r24, 0x02	; 2
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <_fpadd_parts+0x78>
    1f9e:	05 c1       	rjmp	.+522    	; 0x21aa <_fpadd_parts+0x282>
    1fa0:	c2 80       	ldd	r12, Z+2	; 0x02
    1fa2:	d3 80       	ldd	r13, Z+3	; 0x03
    1fa4:	db 01       	movw	r26, r22
    1fa6:	12 96       	adiw	r26, 0x02	; 2
    1fa8:	6d 90       	ld	r6, X+
    1faa:	7c 90       	ld	r7, X
    1fac:	13 97       	sbiw	r26, 0x03	; 3
    1fae:	24 81       	ldd	r18, Z+4	; 0x04
    1fb0:	35 81       	ldd	r19, Z+5	; 0x05
    1fb2:	46 81       	ldd	r20, Z+6	; 0x06
    1fb4:	57 81       	ldd	r21, Z+7	; 0x07
    1fb6:	14 96       	adiw	r26, 0x04	; 4
    1fb8:	ed 90       	ld	r14, X+
    1fba:	fd 90       	ld	r15, X+
    1fbc:	0d 91       	ld	r16, X+
    1fbe:	1c 91       	ld	r17, X
    1fc0:	17 97       	sbiw	r26, 0x07	; 7
    1fc2:	c6 01       	movw	r24, r12
    1fc4:	86 19       	sub	r24, r6
    1fc6:	97 09       	sbc	r25, r7
    1fc8:	5c 01       	movw	r10, r24
    1fca:	97 ff       	sbrs	r25, 7
    1fcc:	04 c0       	rjmp	.+8      	; 0x1fd6 <_fpadd_parts+0xae>
    1fce:	aa 24       	eor	r10, r10
    1fd0:	bb 24       	eor	r11, r11
    1fd2:	a8 1a       	sub	r10, r24
    1fd4:	b9 0a       	sbc	r11, r25
    1fd6:	b0 e2       	ldi	r27, 0x20	; 32
    1fd8:	ab 16       	cp	r10, r27
    1fda:	b1 04       	cpc	r11, r1
    1fdc:	0c f0       	brlt	.+2      	; 0x1fe0 <_fpadd_parts+0xb8>
    1fde:	61 c0       	rjmp	.+194    	; 0x20a2 <_fpadd_parts+0x17a>
    1fe0:	18 16       	cp	r1, r24
    1fe2:	19 06       	cpc	r1, r25
    1fe4:	6c f5       	brge	.+90     	; 0x2040 <_fpadd_parts+0x118>
    1fe6:	37 01       	movw	r6, r14
    1fe8:	48 01       	movw	r8, r16
    1fea:	0a 2c       	mov	r0, r10
    1fec:	04 c0       	rjmp	.+8      	; 0x1ff6 <_fpadd_parts+0xce>
    1fee:	96 94       	lsr	r9
    1ff0:	87 94       	ror	r8
    1ff2:	77 94       	ror	r7
    1ff4:	67 94       	ror	r6
    1ff6:	0a 94       	dec	r0
    1ff8:	d2 f7       	brpl	.-12     	; 0x1fee <_fpadd_parts+0xc6>
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	a0 e0       	ldi	r26, 0x00	; 0
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	0a 2c       	mov	r0, r10
    2004:	04 c0       	rjmp	.+8      	; 0x200e <_fpadd_parts+0xe6>
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	aa 1f       	adc	r26, r26
    200c:	bb 1f       	adc	r27, r27
    200e:	0a 94       	dec	r0
    2010:	d2 f7       	brpl	.-12     	; 0x2006 <_fpadd_parts+0xde>
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	a1 09       	sbc	r26, r1
    2016:	b1 09       	sbc	r27, r1
    2018:	8e 21       	and	r24, r14
    201a:	9f 21       	and	r25, r15
    201c:	a0 23       	and	r26, r16
    201e:	b1 23       	and	r27, r17
    2020:	ee 24       	eor	r14, r14
    2022:	ff 24       	eor	r15, r15
    2024:	87 01       	movw	r16, r14
    2026:	e3 94       	inc	r14
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	a1 05       	cpc	r26, r1
    202c:	b1 05       	cpc	r27, r1
    202e:	19 f4       	brne	.+6      	; 0x2036 <_fpadd_parts+0x10e>
    2030:	ee 24       	eor	r14, r14
    2032:	ff 24       	eor	r15, r15
    2034:	87 01       	movw	r16, r14
    2036:	e6 28       	or	r14, r6
    2038:	f7 28       	or	r15, r7
    203a:	08 29       	or	r16, r8
    203c:	19 29       	or	r17, r9
    203e:	3c c0       	rjmp	.+120    	; 0x20b8 <_fpadd_parts+0x190>
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	d1 f1       	breq	.+116    	; 0x20b8 <_fpadd_parts+0x190>
    2044:	ca 0c       	add	r12, r10
    2046:	db 1c       	adc	r13, r11
    2048:	39 01       	movw	r6, r18
    204a:	4a 01       	movw	r8, r20
    204c:	0a 2c       	mov	r0, r10
    204e:	04 c0       	rjmp	.+8      	; 0x2058 <_fpadd_parts+0x130>
    2050:	96 94       	lsr	r9
    2052:	87 94       	ror	r8
    2054:	77 94       	ror	r7
    2056:	67 94       	ror	r6
    2058:	0a 94       	dec	r0
    205a:	d2 f7       	brpl	.-12     	; 0x2050 <_fpadd_parts+0x128>
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e0       	ldi	r26, 0x00	; 0
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	0a 2c       	mov	r0, r10
    2066:	04 c0       	rjmp	.+8      	; 0x2070 <_fpadd_parts+0x148>
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	aa 1f       	adc	r26, r26
    206e:	bb 1f       	adc	r27, r27
    2070:	0a 94       	dec	r0
    2072:	d2 f7       	brpl	.-12     	; 0x2068 <_fpadd_parts+0x140>
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	a1 09       	sbc	r26, r1
    2078:	b1 09       	sbc	r27, r1
    207a:	82 23       	and	r24, r18
    207c:	93 23       	and	r25, r19
    207e:	a4 23       	and	r26, r20
    2080:	b5 23       	and	r27, r21
    2082:	21 e0       	ldi	r18, 0x01	; 1
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	50 e0       	ldi	r21, 0x00	; 0
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	a1 05       	cpc	r26, r1
    208e:	b1 05       	cpc	r27, r1
    2090:	19 f4       	brne	.+6      	; 0x2098 <_fpadd_parts+0x170>
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	a9 01       	movw	r20, r18
    2098:	26 29       	or	r18, r6
    209a:	37 29       	or	r19, r7
    209c:	48 29       	or	r20, r8
    209e:	59 29       	or	r21, r9
    20a0:	0b c0       	rjmp	.+22     	; 0x20b8 <_fpadd_parts+0x190>
    20a2:	6c 14       	cp	r6, r12
    20a4:	7d 04       	cpc	r7, r13
    20a6:	24 f4       	brge	.+8      	; 0x20b0 <_fpadd_parts+0x188>
    20a8:	ee 24       	eor	r14, r14
    20aa:	ff 24       	eor	r15, r15
    20ac:	87 01       	movw	r16, r14
    20ae:	04 c0       	rjmp	.+8      	; 0x20b8 <_fpadd_parts+0x190>
    20b0:	63 01       	movw	r12, r6
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	a9 01       	movw	r20, r18
    20b8:	81 81       	ldd	r24, Z+1	; 0x01
    20ba:	fb 01       	movw	r30, r22
    20bc:	91 81       	ldd	r25, Z+1	; 0x01
    20be:	89 17       	cp	r24, r25
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <_fpadd_parts+0x19c>
    20c2:	45 c0       	rjmp	.+138    	; 0x214e <_fpadd_parts+0x226>
    20c4:	88 23       	and	r24, r24
    20c6:	49 f0       	breq	.+18     	; 0x20da <_fpadd_parts+0x1b2>
    20c8:	d8 01       	movw	r26, r16
    20ca:	c7 01       	movw	r24, r14
    20cc:	82 1b       	sub	r24, r18
    20ce:	93 0b       	sbc	r25, r19
    20d0:	a4 0b       	sbc	r26, r20
    20d2:	b5 0b       	sbc	r27, r21
    20d4:	9c 01       	movw	r18, r24
    20d6:	ad 01       	movw	r20, r26
    20d8:	04 c0       	rjmp	.+8      	; 0x20e2 <_fpadd_parts+0x1ba>
    20da:	2e 19       	sub	r18, r14
    20dc:	3f 09       	sbc	r19, r15
    20de:	40 0b       	sbc	r20, r16
    20e0:	51 0b       	sbc	r21, r17
    20e2:	57 fd       	sbrc	r21, 7
    20e4:	04 c0       	rjmp	.+8      	; 0x20ee <_fpadd_parts+0x1c6>
    20e6:	19 82       	std	Y+1, r1	; 0x01
    20e8:	db 82       	std	Y+3, r13	; 0x03
    20ea:	ca 82       	std	Y+2, r12	; 0x02
    20ec:	0b c0       	rjmp	.+22     	; 0x2104 <_fpadd_parts+0x1dc>
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	db 82       	std	Y+3, r13	; 0x03
    20f4:	ca 82       	std	Y+2, r12	; 0x02
    20f6:	50 95       	com	r21
    20f8:	40 95       	com	r20
    20fa:	30 95       	com	r19
    20fc:	21 95       	neg	r18
    20fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2100:	4f 4f       	sbci	r20, 0xFF	; 255
    2102:	5f 4f       	sbci	r21, 0xFF	; 255
    2104:	2c 83       	std	Y+4, r18	; 0x04
    2106:	3d 83       	std	Y+5, r19	; 0x05
    2108:	4e 83       	std	Y+6, r20	; 0x06
    210a:	5f 83       	std	Y+7, r21	; 0x07
    210c:	0d c0       	rjmp	.+26     	; 0x2128 <_fpadd_parts+0x200>
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	aa 1f       	adc	r26, r26
    2114:	bb 1f       	adc	r27, r27
    2116:	8c 83       	std	Y+4, r24	; 0x04
    2118:	9d 83       	std	Y+5, r25	; 0x05
    211a:	ae 83       	std	Y+6, r26	; 0x06
    211c:	bf 83       	std	Y+7, r27	; 0x07
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	9b 81       	ldd	r25, Y+3	; 0x03
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	9b 83       	std	Y+3, r25	; 0x03
    2126:	8a 83       	std	Y+2, r24	; 0x02
    2128:	8c 81       	ldd	r24, Y+4	; 0x04
    212a:	9d 81       	ldd	r25, Y+5	; 0x05
    212c:	ae 81       	ldd	r26, Y+6	; 0x06
    212e:	bf 81       	ldd	r27, Y+7	; 0x07
    2130:	9c 01       	movw	r18, r24
    2132:	ad 01       	movw	r20, r26
    2134:	21 50       	subi	r18, 0x01	; 1
    2136:	30 40       	sbci	r19, 0x00	; 0
    2138:	40 40       	sbci	r20, 0x00	; 0
    213a:	50 40       	sbci	r21, 0x00	; 0
    213c:	2f 3f       	cpi	r18, 0xFF	; 255
    213e:	ef ef       	ldi	r30, 0xFF	; 255
    2140:	3e 07       	cpc	r19, r30
    2142:	ef ef       	ldi	r30, 0xFF	; 255
    2144:	4e 07       	cpc	r20, r30
    2146:	ef e3       	ldi	r30, 0x3F	; 63
    2148:	5e 07       	cpc	r21, r30
    214a:	08 f3       	brcs	.-62     	; 0x210e <_fpadd_parts+0x1e6>
    214c:	0b c0       	rjmp	.+22     	; 0x2164 <_fpadd_parts+0x23c>
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	db 82       	std	Y+3, r13	; 0x03
    2152:	ca 82       	std	Y+2, r12	; 0x02
    2154:	2e 0d       	add	r18, r14
    2156:	3f 1d       	adc	r19, r15
    2158:	40 1f       	adc	r20, r16
    215a:	51 1f       	adc	r21, r17
    215c:	2c 83       	std	Y+4, r18	; 0x04
    215e:	3d 83       	std	Y+5, r19	; 0x05
    2160:	4e 83       	std	Y+6, r20	; 0x06
    2162:	5f 83       	std	Y+7, r21	; 0x07
    2164:	83 e0       	ldi	r24, 0x03	; 3
    2166:	88 83       	st	Y, r24
    2168:	2c 81       	ldd	r18, Y+4	; 0x04
    216a:	3d 81       	ldd	r19, Y+5	; 0x05
    216c:	4e 81       	ldd	r20, Y+6	; 0x06
    216e:	5f 81       	ldd	r21, Y+7	; 0x07
    2170:	57 ff       	sbrs	r21, 7
    2172:	1d c0       	rjmp	.+58     	; 0x21ae <_fpadd_parts+0x286>
    2174:	da 01       	movw	r26, r20
    2176:	c9 01       	movw	r24, r18
    2178:	81 70       	andi	r24, 0x01	; 1
    217a:	90 70       	andi	r25, 0x00	; 0
    217c:	a0 70       	andi	r26, 0x00	; 0
    217e:	b0 70       	andi	r27, 0x00	; 0
    2180:	56 95       	lsr	r21
    2182:	47 95       	ror	r20
    2184:	37 95       	ror	r19
    2186:	27 95       	ror	r18
    2188:	82 2b       	or	r24, r18
    218a:	93 2b       	or	r25, r19
    218c:	a4 2b       	or	r26, r20
    218e:	b5 2b       	or	r27, r21
    2190:	8c 83       	std	Y+4, r24	; 0x04
    2192:	9d 83       	std	Y+5, r25	; 0x05
    2194:	ae 83       	std	Y+6, r26	; 0x06
    2196:	bf 83       	std	Y+7, r27	; 0x07
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	9b 81       	ldd	r25, Y+3	; 0x03
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	9b 83       	std	Y+3, r25	; 0x03
    21a0:	8a 83       	std	Y+2, r24	; 0x02
    21a2:	05 c0       	rjmp	.+10     	; 0x21ae <_fpadd_parts+0x286>
    21a4:	e8 e2       	ldi	r30, 0x28	; 40
    21a6:	f1 e0       	ldi	r31, 0x01	; 1
    21a8:	03 c0       	rjmp	.+6      	; 0x21b0 <_fpadd_parts+0x288>
    21aa:	fb 01       	movw	r30, r22
    21ac:	01 c0       	rjmp	.+2      	; 0x21b0 <_fpadd_parts+0x288>
    21ae:	fe 01       	movw	r30, r28
    21b0:	cf 01       	movw	r24, r30
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	ee e0       	ldi	r30, 0x0E	; 14
    21b8:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x8>

000021bc <__addsf3>:
    21bc:	a0 e2       	ldi	r26, 0x20	; 32
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e4 ee       	ldi	r30, 0xE4	; 228
    21c2:	f0 e1       	ldi	r31, 0x10	; 16
    21c4:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__prologue_saves__+0x18>
    21c8:	69 83       	std	Y+1, r22	; 0x01
    21ca:	7a 83       	std	Y+2, r23	; 0x02
    21cc:	8b 83       	std	Y+3, r24	; 0x03
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	2d 83       	std	Y+5, r18	; 0x05
    21d2:	3e 83       	std	Y+6, r19	; 0x06
    21d4:	4f 83       	std	Y+7, r20	; 0x07
    21d6:	58 87       	std	Y+8, r21	; 0x08
    21d8:	89 e0       	ldi	r24, 0x09	; 9
    21da:	e8 2e       	mov	r14, r24
    21dc:	f1 2c       	mov	r15, r1
    21de:	ec 0e       	add	r14, r28
    21e0:	fd 1e       	adc	r15, r29
    21e2:	ce 01       	movw	r24, r28
    21e4:	01 96       	adiw	r24, 0x01	; 1
    21e6:	b7 01       	movw	r22, r14
    21e8:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    21ec:	8e 01       	movw	r16, r28
    21ee:	0f 5e       	subi	r16, 0xEF	; 239
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	ce 01       	movw	r24, r28
    21f4:	05 96       	adiw	r24, 0x05	; 5
    21f6:	b8 01       	movw	r22, r16
    21f8:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    21fc:	c7 01       	movw	r24, r14
    21fe:	b8 01       	movw	r22, r16
    2200:	ae 01       	movw	r20, r28
    2202:	47 5e       	subi	r20, 0xE7	; 231
    2204:	5f 4f       	sbci	r21, 0xFF	; 255
    2206:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <_fpadd_parts>
    220a:	0e 94 c6 13 	call	0x278c	; 0x278c <__pack_f>
    220e:	a0 96       	adiw	r28, 0x20	; 32
    2210:	e6 e0       	ldi	r30, 0x06	; 6
    2212:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__epilogue_restores__+0x18>

00002216 <__subsf3>:
    2216:	a0 e2       	ldi	r26, 0x20	; 32
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e1 e1       	ldi	r30, 0x11	; 17
    221c:	f1 e1       	ldi	r31, 0x11	; 17
    221e:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__prologue_saves__+0x18>
    2222:	69 83       	std	Y+1, r22	; 0x01
    2224:	7a 83       	std	Y+2, r23	; 0x02
    2226:	8b 83       	std	Y+3, r24	; 0x03
    2228:	9c 83       	std	Y+4, r25	; 0x04
    222a:	2d 83       	std	Y+5, r18	; 0x05
    222c:	3e 83       	std	Y+6, r19	; 0x06
    222e:	4f 83       	std	Y+7, r20	; 0x07
    2230:	58 87       	std	Y+8, r21	; 0x08
    2232:	8e 01       	movw	r16, r28
    2234:	07 5f       	subi	r16, 0xF7	; 247
    2236:	1f 4f       	sbci	r17, 0xFF	; 255
    2238:	ce 01       	movw	r24, r28
    223a:	01 96       	adiw	r24, 0x01	; 1
    223c:	b8 01       	movw	r22, r16
    223e:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    2242:	91 e1       	ldi	r25, 0x11	; 17
    2244:	e9 2e       	mov	r14, r25
    2246:	f1 2c       	mov	r15, r1
    2248:	ec 0e       	add	r14, r28
    224a:	fd 1e       	adc	r15, r29
    224c:	ce 01       	movw	r24, r28
    224e:	05 96       	adiw	r24, 0x05	; 5
    2250:	b7 01       	movw	r22, r14
    2252:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    2256:	8a 89       	ldd	r24, Y+18	; 0x12
    2258:	91 e0       	ldi	r25, 0x01	; 1
    225a:	89 27       	eor	r24, r25
    225c:	8a 8b       	std	Y+18, r24	; 0x12
    225e:	c8 01       	movw	r24, r16
    2260:	b7 01       	movw	r22, r14
    2262:	ae 01       	movw	r20, r28
    2264:	47 5e       	subi	r20, 0xE7	; 231
    2266:	5f 4f       	sbci	r21, 0xFF	; 255
    2268:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <_fpadd_parts>
    226c:	0e 94 c6 13 	call	0x278c	; 0x278c <__pack_f>
    2270:	a0 96       	adiw	r28, 0x20	; 32
    2272:	e6 e0       	ldi	r30, 0x06	; 6
    2274:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__epilogue_restores__+0x18>

00002278 <__mulsf3>:
    2278:	a0 e2       	ldi	r26, 0x20	; 32
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e2 e4       	ldi	r30, 0x42	; 66
    227e:	f1 e1       	ldi	r31, 0x11	; 17
    2280:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__prologue_saves__>
    2284:	69 83       	std	Y+1, r22	; 0x01
    2286:	7a 83       	std	Y+2, r23	; 0x02
    2288:	8b 83       	std	Y+3, r24	; 0x03
    228a:	9c 83       	std	Y+4, r25	; 0x04
    228c:	2d 83       	std	Y+5, r18	; 0x05
    228e:	3e 83       	std	Y+6, r19	; 0x06
    2290:	4f 83       	std	Y+7, r20	; 0x07
    2292:	58 87       	std	Y+8, r21	; 0x08
    2294:	ce 01       	movw	r24, r28
    2296:	01 96       	adiw	r24, 0x01	; 1
    2298:	be 01       	movw	r22, r28
    229a:	67 5f       	subi	r22, 0xF7	; 247
    229c:	7f 4f       	sbci	r23, 0xFF	; 255
    229e:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    22a2:	ce 01       	movw	r24, r28
    22a4:	05 96       	adiw	r24, 0x05	; 5
    22a6:	be 01       	movw	r22, r28
    22a8:	6f 5e       	subi	r22, 0xEF	; 239
    22aa:	7f 4f       	sbci	r23, 0xFF	; 255
    22ac:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    22b0:	99 85       	ldd	r25, Y+9	; 0x09
    22b2:	92 30       	cpi	r25, 0x02	; 2
    22b4:	78 f0       	brcs	.+30     	; 0x22d4 <__mulsf3+0x5c>
    22b6:	89 89       	ldd	r24, Y+17	; 0x11
    22b8:	82 30       	cpi	r24, 0x02	; 2
    22ba:	c0 f0       	brcs	.+48     	; 0x22ec <__mulsf3+0x74>
    22bc:	94 30       	cpi	r25, 0x04	; 4
    22be:	19 f4       	brne	.+6      	; 0x22c6 <__mulsf3+0x4e>
    22c0:	82 30       	cpi	r24, 0x02	; 2
    22c2:	41 f4       	brne	.+16     	; 0x22d4 <__mulsf3+0x5c>
    22c4:	cb c0       	rjmp	.+406    	; 0x245c <__mulsf3+0x1e4>
    22c6:	84 30       	cpi	r24, 0x04	; 4
    22c8:	19 f4       	brne	.+6      	; 0x22d0 <__mulsf3+0x58>
    22ca:	92 30       	cpi	r25, 0x02	; 2
    22cc:	79 f4       	brne	.+30     	; 0x22ec <__mulsf3+0x74>
    22ce:	c6 c0       	rjmp	.+396    	; 0x245c <__mulsf3+0x1e4>
    22d0:	92 30       	cpi	r25, 0x02	; 2
    22d2:	51 f4       	brne	.+20     	; 0x22e8 <__mulsf3+0x70>
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	2a 85       	ldd	r18, Y+10	; 0x0a
    22d8:	9a 89       	ldd	r25, Y+18	; 0x12
    22da:	29 17       	cp	r18, r25
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <__mulsf3+0x68>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	8a 87       	std	Y+10, r24	; 0x0a
    22e2:	ce 01       	movw	r24, r28
    22e4:	09 96       	adiw	r24, 0x09	; 9
    22e6:	bc c0       	rjmp	.+376    	; 0x2460 <__mulsf3+0x1e8>
    22e8:	82 30       	cpi	r24, 0x02	; 2
    22ea:	51 f4       	brne	.+20     	; 0x2300 <__mulsf3+0x88>
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    22f0:	9a 89       	ldd	r25, Y+18	; 0x12
    22f2:	29 17       	cp	r18, r25
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <__mulsf3+0x80>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	8a 8b       	std	Y+18, r24	; 0x12
    22fa:	ce 01       	movw	r24, r28
    22fc:	41 96       	adiw	r24, 0x11	; 17
    22fe:	b0 c0       	rjmp	.+352    	; 0x2460 <__mulsf3+0x1e8>
    2300:	6d 84       	ldd	r6, Y+13	; 0x0d
    2302:	7e 84       	ldd	r7, Y+14	; 0x0e
    2304:	8f 84       	ldd	r8, Y+15	; 0x0f
    2306:	98 88       	ldd	r9, Y+16	; 0x10
    2308:	ed 88       	ldd	r14, Y+21	; 0x15
    230a:	fe 88       	ldd	r15, Y+22	; 0x16
    230c:	0f 89       	ldd	r16, Y+23	; 0x17
    230e:	18 8d       	ldd	r17, Y+24	; 0x18
    2310:	e0 e2       	ldi	r30, 0x20	; 32
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	dc 01       	movw	r26, r24
    231a:	aa 24       	eor	r10, r10
    231c:	bb 24       	eor	r11, r11
    231e:	65 01       	movw	r12, r10
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	a9 01       	movw	r20, r18
    2326:	b3 01       	movw	r22, r6
    2328:	61 70       	andi	r22, 0x01	; 1
    232a:	70 70       	andi	r23, 0x00	; 0
    232c:	61 15       	cp	r22, r1
    232e:	71 05       	cpc	r23, r1
    2330:	d1 f0       	breq	.+52     	; 0x2366 <__mulsf3+0xee>
    2332:	2e 0d       	add	r18, r14
    2334:	3f 1d       	adc	r19, r15
    2336:	40 1f       	adc	r20, r16
    2338:	51 1f       	adc	r21, r17
    233a:	15 01       	movw	r2, r10
    233c:	26 01       	movw	r4, r12
    233e:	28 0e       	add	r2, r24
    2340:	39 1e       	adc	r3, r25
    2342:	4a 1e       	adc	r4, r26
    2344:	5b 1e       	adc	r5, r27
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	a0 e0       	ldi	r26, 0x00	; 0
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	2e 15       	cp	r18, r14
    2350:	3f 05       	cpc	r19, r15
    2352:	40 07       	cpc	r20, r16
    2354:	51 07       	cpc	r21, r17
    2356:	18 f0       	brcs	.+6      	; 0x235e <__mulsf3+0xe6>
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	dc 01       	movw	r26, r24
    235e:	82 0d       	add	r24, r2
    2360:	93 1d       	adc	r25, r3
    2362:	a4 1d       	adc	r26, r4
    2364:	b5 1d       	adc	r27, r5
    2366:	aa 0c       	add	r10, r10
    2368:	bb 1c       	adc	r11, r11
    236a:	cc 1c       	adc	r12, r12
    236c:	dd 1c       	adc	r13, r13
    236e:	17 ff       	sbrs	r17, 7
    2370:	09 c0       	rjmp	.+18     	; 0x2384 <__mulsf3+0x10c>
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	26 2e       	mov	r2, r22
    2376:	31 2c       	mov	r3, r1
    2378:	41 2c       	mov	r4, r1
    237a:	51 2c       	mov	r5, r1
    237c:	a2 28       	or	r10, r2
    237e:	b3 28       	or	r11, r3
    2380:	c4 28       	or	r12, r4
    2382:	d5 28       	or	r13, r5
    2384:	31 97       	sbiw	r30, 0x01	; 1
    2386:	49 f0       	breq	.+18     	; 0x239a <__mulsf3+0x122>
    2388:	ee 0c       	add	r14, r14
    238a:	ff 1c       	adc	r15, r15
    238c:	00 1f       	adc	r16, r16
    238e:	11 1f       	adc	r17, r17
    2390:	96 94       	lsr	r9
    2392:	87 94       	ror	r8
    2394:	77 94       	ror	r7
    2396:	67 94       	ror	r6
    2398:	c6 cf       	rjmp	.-116    	; 0x2326 <__mulsf3+0xae>
    239a:	6b 89       	ldd	r22, Y+19	; 0x13
    239c:	7c 89       	ldd	r23, Y+20	; 0x14
    239e:	eb 85       	ldd	r30, Y+11	; 0x0b
    23a0:	fc 85       	ldd	r31, Y+12	; 0x0c
    23a2:	6e 0f       	add	r22, r30
    23a4:	7f 1f       	adc	r23, r31
    23a6:	6e 5f       	subi	r22, 0xFE	; 254
    23a8:	7f 4f       	sbci	r23, 0xFF	; 255
    23aa:	7c 8f       	std	Y+28, r23	; 0x1c
    23ac:	6b 8f       	std	Y+27, r22	; 0x1b
    23ae:	61 e0       	ldi	r22, 0x01	; 1
    23b0:	ea 85       	ldd	r30, Y+10	; 0x0a
    23b2:	7a 89       	ldd	r23, Y+18	; 0x12
    23b4:	e7 17       	cp	r30, r23
    23b6:	09 f4       	brne	.+2      	; 0x23ba <__mulsf3+0x142>
    23b8:	60 e0       	ldi	r22, 0x00	; 0
    23ba:	6a 8f       	std	Y+26, r22	; 0x1a
    23bc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    23be:	7c 8d       	ldd	r23, Y+28	; 0x1c
    23c0:	10 c0       	rjmp	.+32     	; 0x23e2 <__mulsf3+0x16a>
    23c2:	fc 01       	movw	r30, r24
    23c4:	e1 70       	andi	r30, 0x01	; 1
    23c6:	f0 70       	andi	r31, 0x00	; 0
    23c8:	30 97       	sbiw	r30, 0x00	; 0
    23ca:	29 f0       	breq	.+10     	; 0x23d6 <__mulsf3+0x15e>
    23cc:	56 95       	lsr	r21
    23ce:	47 95       	ror	r20
    23d0:	37 95       	ror	r19
    23d2:	27 95       	ror	r18
    23d4:	50 68       	ori	r21, 0x80	; 128
    23d6:	b6 95       	lsr	r27
    23d8:	a7 95       	ror	r26
    23da:	97 95       	ror	r25
    23dc:	87 95       	ror	r24
    23de:	6f 5f       	subi	r22, 0xFF	; 255
    23e0:	7f 4f       	sbci	r23, 0xFF	; 255
    23e2:	b7 fd       	sbrc	r27, 7
    23e4:	ee cf       	rjmp	.-36     	; 0x23c2 <__mulsf3+0x14a>
    23e6:	0c c0       	rjmp	.+24     	; 0x2400 <__mulsf3+0x188>
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	aa 1f       	adc	r26, r26
    23ee:	bb 1f       	adc	r27, r27
    23f0:	57 fd       	sbrc	r21, 7
    23f2:	81 60       	ori	r24, 0x01	; 1
    23f4:	22 0f       	add	r18, r18
    23f6:	33 1f       	adc	r19, r19
    23f8:	44 1f       	adc	r20, r20
    23fa:	55 1f       	adc	r21, r21
    23fc:	61 50       	subi	r22, 0x01	; 1
    23fe:	70 40       	sbci	r23, 0x00	; 0
    2400:	80 30       	cpi	r24, 0x00	; 0
    2402:	e0 e0       	ldi	r30, 0x00	; 0
    2404:	9e 07       	cpc	r25, r30
    2406:	e0 e0       	ldi	r30, 0x00	; 0
    2408:	ae 07       	cpc	r26, r30
    240a:	e0 e4       	ldi	r30, 0x40	; 64
    240c:	be 07       	cpc	r27, r30
    240e:	60 f3       	brcs	.-40     	; 0x23e8 <__mulsf3+0x170>
    2410:	6b 8f       	std	Y+27, r22	; 0x1b
    2412:	7c 8f       	std	Y+28, r23	; 0x1c
    2414:	6f e7       	ldi	r22, 0x7F	; 127
    2416:	e6 2e       	mov	r14, r22
    2418:	f1 2c       	mov	r15, r1
    241a:	01 2d       	mov	r16, r1
    241c:	11 2d       	mov	r17, r1
    241e:	e8 22       	and	r14, r24
    2420:	f9 22       	and	r15, r25
    2422:	0a 23       	and	r16, r26
    2424:	1b 23       	and	r17, r27
    2426:	60 e4       	ldi	r22, 0x40	; 64
    2428:	e6 16       	cp	r14, r22
    242a:	f1 04       	cpc	r15, r1
    242c:	01 05       	cpc	r16, r1
    242e:	11 05       	cpc	r17, r1
    2430:	61 f4       	brne	.+24     	; 0x244a <__mulsf3+0x1d2>
    2432:	87 fd       	sbrc	r24, 7
    2434:	0a c0       	rjmp	.+20     	; 0x244a <__mulsf3+0x1d2>
    2436:	21 15       	cp	r18, r1
    2438:	31 05       	cpc	r19, r1
    243a:	41 05       	cpc	r20, r1
    243c:	51 05       	cpc	r21, r1
    243e:	29 f0       	breq	.+10     	; 0x244a <__mulsf3+0x1d2>
    2440:	80 5c       	subi	r24, 0xC0	; 192
    2442:	9f 4f       	sbci	r25, 0xFF	; 255
    2444:	af 4f       	sbci	r26, 0xFF	; 255
    2446:	bf 4f       	sbci	r27, 0xFF	; 255
    2448:	80 78       	andi	r24, 0x80	; 128
    244a:	8d 8f       	std	Y+29, r24	; 0x1d
    244c:	9e 8f       	std	Y+30, r25	; 0x1e
    244e:	af 8f       	std	Y+31, r26	; 0x1f
    2450:	b8 a3       	std	Y+32, r27	; 0x20
    2452:	83 e0       	ldi	r24, 0x03	; 3
    2454:	89 8f       	std	Y+25, r24	; 0x19
    2456:	ce 01       	movw	r24, r28
    2458:	49 96       	adiw	r24, 0x19	; 25
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <__mulsf3+0x1e8>
    245c:	88 e2       	ldi	r24, 0x28	; 40
    245e:	91 e0       	ldi	r25, 0x01	; 1
    2460:	0e 94 c6 13 	call	0x278c	; 0x278c <__pack_f>
    2464:	a0 96       	adiw	r28, 0x20	; 32
    2466:	e2 e1       	ldi	r30, 0x12	; 18
    2468:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__epilogue_restores__>

0000246c <__divsf3>:
    246c:	a8 e1       	ldi	r26, 0x18	; 24
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	ec e3       	ldi	r30, 0x3C	; 60
    2472:	f2 e1       	ldi	r31, 0x12	; 18
    2474:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__prologue_saves__+0x10>
    2478:	69 83       	std	Y+1, r22	; 0x01
    247a:	7a 83       	std	Y+2, r23	; 0x02
    247c:	8b 83       	std	Y+3, r24	; 0x03
    247e:	9c 83       	std	Y+4, r25	; 0x04
    2480:	2d 83       	std	Y+5, r18	; 0x05
    2482:	3e 83       	std	Y+6, r19	; 0x06
    2484:	4f 83       	std	Y+7, r20	; 0x07
    2486:	58 87       	std	Y+8, r21	; 0x08
    2488:	8e 01       	movw	r16, r28
    248a:	07 5f       	subi	r16, 0xF7	; 247
    248c:	1f 4f       	sbci	r17, 0xFF	; 255
    248e:	ce 01       	movw	r24, r28
    2490:	01 96       	adiw	r24, 0x01	; 1
    2492:	b8 01       	movw	r22, r16
    2494:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    2498:	81 e1       	ldi	r24, 0x11	; 17
    249a:	e8 2e       	mov	r14, r24
    249c:	f1 2c       	mov	r15, r1
    249e:	ec 0e       	add	r14, r28
    24a0:	fd 1e       	adc	r15, r29
    24a2:	ce 01       	movw	r24, r28
    24a4:	05 96       	adiw	r24, 0x05	; 5
    24a6:	b7 01       	movw	r22, r14
    24a8:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    24ac:	99 85       	ldd	r25, Y+9	; 0x09
    24ae:	92 30       	cpi	r25, 0x02	; 2
    24b0:	08 f4       	brcc	.+2      	; 0x24b4 <__divsf3+0x48>
    24b2:	83 c0       	rjmp	.+262    	; 0x25ba <__divsf3+0x14e>
    24b4:	89 89       	ldd	r24, Y+17	; 0x11
    24b6:	82 30       	cpi	r24, 0x02	; 2
    24b8:	08 f4       	brcc	.+2      	; 0x24bc <__divsf3+0x50>
    24ba:	7b c0       	rjmp	.+246    	; 0x25b2 <__divsf3+0x146>
    24bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    24be:	3a 89       	ldd	r19, Y+18	; 0x12
    24c0:	23 27       	eor	r18, r19
    24c2:	2a 87       	std	Y+10, r18	; 0x0a
    24c4:	94 30       	cpi	r25, 0x04	; 4
    24c6:	11 f0       	breq	.+4      	; 0x24cc <__divsf3+0x60>
    24c8:	92 30       	cpi	r25, 0x02	; 2
    24ca:	21 f4       	brne	.+8      	; 0x24d4 <__divsf3+0x68>
    24cc:	98 17       	cp	r25, r24
    24ce:	09 f0       	breq	.+2      	; 0x24d2 <__divsf3+0x66>
    24d0:	6c c0       	rjmp	.+216    	; 0x25aa <__divsf3+0x13e>
    24d2:	71 c0       	rjmp	.+226    	; 0x25b6 <__divsf3+0x14a>
    24d4:	84 30       	cpi	r24, 0x04	; 4
    24d6:	39 f4       	brne	.+14     	; 0x24e6 <__divsf3+0x7a>
    24d8:	1d 86       	std	Y+13, r1	; 0x0d
    24da:	1e 86       	std	Y+14, r1	; 0x0e
    24dc:	1f 86       	std	Y+15, r1	; 0x0f
    24de:	18 8a       	std	Y+16, r1	; 0x10
    24e0:	1c 86       	std	Y+12, r1	; 0x0c
    24e2:	1b 86       	std	Y+11, r1	; 0x0b
    24e4:	6a c0       	rjmp	.+212    	; 0x25ba <__divsf3+0x14e>
    24e6:	82 30       	cpi	r24, 0x02	; 2
    24e8:	19 f4       	brne	.+6      	; 0x24f0 <__divsf3+0x84>
    24ea:	84 e0       	ldi	r24, 0x04	; 4
    24ec:	89 87       	std	Y+9, r24	; 0x09
    24ee:	65 c0       	rjmp	.+202    	; 0x25ba <__divsf3+0x14e>
    24f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    24f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    24f4:	2b 89       	ldd	r18, Y+19	; 0x13
    24f6:	3c 89       	ldd	r19, Y+20	; 0x14
    24f8:	82 1b       	sub	r24, r18
    24fa:	93 0b       	sbc	r25, r19
    24fc:	9c 87       	std	Y+12, r25	; 0x0c
    24fe:	8b 87       	std	Y+11, r24	; 0x0b
    2500:	2d 85       	ldd	r18, Y+13	; 0x0d
    2502:	3e 85       	ldd	r19, Y+14	; 0x0e
    2504:	4f 85       	ldd	r20, Y+15	; 0x0f
    2506:	58 89       	ldd	r21, Y+16	; 0x10
    2508:	ed 88       	ldd	r14, Y+21	; 0x15
    250a:	fe 88       	ldd	r15, Y+22	; 0x16
    250c:	0f 89       	ldd	r16, Y+23	; 0x17
    250e:	18 8d       	ldd	r17, Y+24	; 0x18
    2510:	2e 15       	cp	r18, r14
    2512:	3f 05       	cpc	r19, r15
    2514:	40 07       	cpc	r20, r16
    2516:	51 07       	cpc	r21, r17
    2518:	38 f4       	brcc	.+14     	; 0x2528 <__divsf3+0xbc>
    251a:	22 0f       	add	r18, r18
    251c:	33 1f       	adc	r19, r19
    251e:	44 1f       	adc	r20, r20
    2520:	55 1f       	adc	r21, r21
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	9c 87       	std	Y+12, r25	; 0x0c
    2526:	8b 87       	std	Y+11, r24	; 0x0b
    2528:	6f e1       	ldi	r22, 0x1F	; 31
    252a:	70 e0       	ldi	r23, 0x00	; 0
    252c:	a1 2c       	mov	r10, r1
    252e:	b1 2c       	mov	r11, r1
    2530:	c1 2c       	mov	r12, r1
    2532:	a0 e4       	ldi	r26, 0x40	; 64
    2534:	da 2e       	mov	r13, r26
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	dc 01       	movw	r26, r24
    253c:	2e 15       	cp	r18, r14
    253e:	3f 05       	cpc	r19, r15
    2540:	40 07       	cpc	r20, r16
    2542:	51 07       	cpc	r21, r17
    2544:	40 f0       	brcs	.+16     	; 0x2556 <__divsf3+0xea>
    2546:	8a 29       	or	r24, r10
    2548:	9b 29       	or	r25, r11
    254a:	ac 29       	or	r26, r12
    254c:	bd 29       	or	r27, r13
    254e:	2e 19       	sub	r18, r14
    2550:	3f 09       	sbc	r19, r15
    2552:	40 0b       	sbc	r20, r16
    2554:	51 0b       	sbc	r21, r17
    2556:	d6 94       	lsr	r13
    2558:	c7 94       	ror	r12
    255a:	b7 94       	ror	r11
    255c:	a7 94       	ror	r10
    255e:	22 0f       	add	r18, r18
    2560:	33 1f       	adc	r19, r19
    2562:	44 1f       	adc	r20, r20
    2564:	55 1f       	adc	r21, r21
    2566:	61 50       	subi	r22, 0x01	; 1
    2568:	70 40       	sbci	r23, 0x00	; 0
    256a:	41 f7       	brne	.-48     	; 0x253c <__divsf3+0xd0>
    256c:	6f e7       	ldi	r22, 0x7F	; 127
    256e:	e6 2e       	mov	r14, r22
    2570:	f1 2c       	mov	r15, r1
    2572:	01 2d       	mov	r16, r1
    2574:	11 2d       	mov	r17, r1
    2576:	e8 22       	and	r14, r24
    2578:	f9 22       	and	r15, r25
    257a:	0a 23       	and	r16, r26
    257c:	1b 23       	and	r17, r27
    257e:	60 e4       	ldi	r22, 0x40	; 64
    2580:	e6 16       	cp	r14, r22
    2582:	f1 04       	cpc	r15, r1
    2584:	01 05       	cpc	r16, r1
    2586:	11 05       	cpc	r17, r1
    2588:	61 f4       	brne	.+24     	; 0x25a2 <__divsf3+0x136>
    258a:	87 fd       	sbrc	r24, 7
    258c:	0a c0       	rjmp	.+20     	; 0x25a2 <__divsf3+0x136>
    258e:	21 15       	cp	r18, r1
    2590:	31 05       	cpc	r19, r1
    2592:	41 05       	cpc	r20, r1
    2594:	51 05       	cpc	r21, r1
    2596:	29 f0       	breq	.+10     	; 0x25a2 <__divsf3+0x136>
    2598:	80 5c       	subi	r24, 0xC0	; 192
    259a:	9f 4f       	sbci	r25, 0xFF	; 255
    259c:	af 4f       	sbci	r26, 0xFF	; 255
    259e:	bf 4f       	sbci	r27, 0xFF	; 255
    25a0:	80 78       	andi	r24, 0x80	; 128
    25a2:	8d 87       	std	Y+13, r24	; 0x0d
    25a4:	9e 87       	std	Y+14, r25	; 0x0e
    25a6:	af 87       	std	Y+15, r26	; 0x0f
    25a8:	b8 8b       	std	Y+16, r27	; 0x10
    25aa:	8e 01       	movw	r16, r28
    25ac:	07 5f       	subi	r16, 0xF7	; 247
    25ae:	1f 4f       	sbci	r17, 0xFF	; 255
    25b0:	04 c0       	rjmp	.+8      	; 0x25ba <__divsf3+0x14e>
    25b2:	87 01       	movw	r16, r14
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <__divsf3+0x14e>
    25b6:	08 e2       	ldi	r16, 0x28	; 40
    25b8:	11 e0       	ldi	r17, 0x01	; 1
    25ba:	c8 01       	movw	r24, r16
    25bc:	0e 94 c6 13 	call	0x278c	; 0x278c <__pack_f>
    25c0:	68 96       	adiw	r28, 0x18	; 24
    25c2:	ea e0       	ldi	r30, 0x0A	; 10
    25c4:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__epilogue_restores__+0x10>

000025c8 <__gtsf2>:
    25c8:	a8 e1       	ldi	r26, 0x18	; 24
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	ea ee       	ldi	r30, 0xEA	; 234
    25ce:	f2 e1       	ldi	r31, 0x12	; 18
    25d0:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__prologue_saves__+0x18>
    25d4:	69 83       	std	Y+1, r22	; 0x01
    25d6:	7a 83       	std	Y+2, r23	; 0x02
    25d8:	8b 83       	std	Y+3, r24	; 0x03
    25da:	9c 83       	std	Y+4, r25	; 0x04
    25dc:	2d 83       	std	Y+5, r18	; 0x05
    25de:	3e 83       	std	Y+6, r19	; 0x06
    25e0:	4f 83       	std	Y+7, r20	; 0x07
    25e2:	58 87       	std	Y+8, r21	; 0x08
    25e4:	8e 01       	movw	r16, r28
    25e6:	07 5f       	subi	r16, 0xF7	; 247
    25e8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ea:	ce 01       	movw	r24, r28
    25ec:	01 96       	adiw	r24, 0x01	; 1
    25ee:	b8 01       	movw	r22, r16
    25f0:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    25f4:	81 e1       	ldi	r24, 0x11	; 17
    25f6:	e8 2e       	mov	r14, r24
    25f8:	f1 2c       	mov	r15, r1
    25fa:	ec 0e       	add	r14, r28
    25fc:	fd 1e       	adc	r15, r29
    25fe:	ce 01       	movw	r24, r28
    2600:	05 96       	adiw	r24, 0x05	; 5
    2602:	b7 01       	movw	r22, r14
    2604:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    2608:	89 85       	ldd	r24, Y+9	; 0x09
    260a:	82 30       	cpi	r24, 0x02	; 2
    260c:	40 f0       	brcs	.+16     	; 0x261e <__gtsf2+0x56>
    260e:	89 89       	ldd	r24, Y+17	; 0x11
    2610:	82 30       	cpi	r24, 0x02	; 2
    2612:	28 f0       	brcs	.+10     	; 0x261e <__gtsf2+0x56>
    2614:	c8 01       	movw	r24, r16
    2616:	b7 01       	movw	r22, r14
    2618:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fpcmp_parts_f>
    261c:	01 c0       	rjmp	.+2      	; 0x2620 <__gtsf2+0x58>
    261e:	8f ef       	ldi	r24, 0xFF	; 255
    2620:	68 96       	adiw	r28, 0x18	; 24
    2622:	e6 e0       	ldi	r30, 0x06	; 6
    2624:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__epilogue_restores__+0x18>

00002628 <__gesf2>:
    2628:	a8 e1       	ldi	r26, 0x18	; 24
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	ea e1       	ldi	r30, 0x1A	; 26
    262e:	f3 e1       	ldi	r31, 0x13	; 19
    2630:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__prologue_saves__+0x18>
    2634:	69 83       	std	Y+1, r22	; 0x01
    2636:	7a 83       	std	Y+2, r23	; 0x02
    2638:	8b 83       	std	Y+3, r24	; 0x03
    263a:	9c 83       	std	Y+4, r25	; 0x04
    263c:	2d 83       	std	Y+5, r18	; 0x05
    263e:	3e 83       	std	Y+6, r19	; 0x06
    2640:	4f 83       	std	Y+7, r20	; 0x07
    2642:	58 87       	std	Y+8, r21	; 0x08
    2644:	8e 01       	movw	r16, r28
    2646:	07 5f       	subi	r16, 0xF7	; 247
    2648:	1f 4f       	sbci	r17, 0xFF	; 255
    264a:	ce 01       	movw	r24, r28
    264c:	01 96       	adiw	r24, 0x01	; 1
    264e:	b8 01       	movw	r22, r16
    2650:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    2654:	81 e1       	ldi	r24, 0x11	; 17
    2656:	e8 2e       	mov	r14, r24
    2658:	f1 2c       	mov	r15, r1
    265a:	ec 0e       	add	r14, r28
    265c:	fd 1e       	adc	r15, r29
    265e:	ce 01       	movw	r24, r28
    2660:	05 96       	adiw	r24, 0x05	; 5
    2662:	b7 01       	movw	r22, r14
    2664:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    2668:	89 85       	ldd	r24, Y+9	; 0x09
    266a:	82 30       	cpi	r24, 0x02	; 2
    266c:	40 f0       	brcs	.+16     	; 0x267e <__gesf2+0x56>
    266e:	89 89       	ldd	r24, Y+17	; 0x11
    2670:	82 30       	cpi	r24, 0x02	; 2
    2672:	28 f0       	brcs	.+10     	; 0x267e <__gesf2+0x56>
    2674:	c8 01       	movw	r24, r16
    2676:	b7 01       	movw	r22, r14
    2678:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fpcmp_parts_f>
    267c:	01 c0       	rjmp	.+2      	; 0x2680 <__gesf2+0x58>
    267e:	8f ef       	ldi	r24, 0xFF	; 255
    2680:	68 96       	adiw	r28, 0x18	; 24
    2682:	e6 e0       	ldi	r30, 0x06	; 6
    2684:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__epilogue_restores__+0x18>

00002688 <__ltsf2>:
    2688:	a8 e1       	ldi	r26, 0x18	; 24
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	ea e4       	ldi	r30, 0x4A	; 74
    268e:	f3 e1       	ldi	r31, 0x13	; 19
    2690:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__prologue_saves__+0x18>
    2694:	69 83       	std	Y+1, r22	; 0x01
    2696:	7a 83       	std	Y+2, r23	; 0x02
    2698:	8b 83       	std	Y+3, r24	; 0x03
    269a:	9c 83       	std	Y+4, r25	; 0x04
    269c:	2d 83       	std	Y+5, r18	; 0x05
    269e:	3e 83       	std	Y+6, r19	; 0x06
    26a0:	4f 83       	std	Y+7, r20	; 0x07
    26a2:	58 87       	std	Y+8, r21	; 0x08
    26a4:	8e 01       	movw	r16, r28
    26a6:	07 5f       	subi	r16, 0xF7	; 247
    26a8:	1f 4f       	sbci	r17, 0xFF	; 255
    26aa:	ce 01       	movw	r24, r28
    26ac:	01 96       	adiw	r24, 0x01	; 1
    26ae:	b8 01       	movw	r22, r16
    26b0:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    26b4:	81 e1       	ldi	r24, 0x11	; 17
    26b6:	e8 2e       	mov	r14, r24
    26b8:	f1 2c       	mov	r15, r1
    26ba:	ec 0e       	add	r14, r28
    26bc:	fd 1e       	adc	r15, r29
    26be:	ce 01       	movw	r24, r28
    26c0:	05 96       	adiw	r24, 0x05	; 5
    26c2:	b7 01       	movw	r22, r14
    26c4:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    26c8:	89 85       	ldd	r24, Y+9	; 0x09
    26ca:	82 30       	cpi	r24, 0x02	; 2
    26cc:	40 f0       	brcs	.+16     	; 0x26de <__ltsf2+0x56>
    26ce:	89 89       	ldd	r24, Y+17	; 0x11
    26d0:	82 30       	cpi	r24, 0x02	; 2
    26d2:	28 f0       	brcs	.+10     	; 0x26de <__ltsf2+0x56>
    26d4:	c8 01       	movw	r24, r16
    26d6:	b7 01       	movw	r22, r14
    26d8:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fpcmp_parts_f>
    26dc:	01 c0       	rjmp	.+2      	; 0x26e0 <__ltsf2+0x58>
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	68 96       	adiw	r28, 0x18	; 24
    26e2:	e6 e0       	ldi	r30, 0x06	; 6
    26e4:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__epilogue_restores__+0x18>

000026e8 <__fixsfsi>:
    26e8:	ac e0       	ldi	r26, 0x0C	; 12
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	ea e7       	ldi	r30, 0x7A	; 122
    26ee:	f3 e1       	ldi	r31, 0x13	; 19
    26f0:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__prologue_saves__+0x20>
    26f4:	69 83       	std	Y+1, r22	; 0x01
    26f6:	7a 83       	std	Y+2, r23	; 0x02
    26f8:	8b 83       	std	Y+3, r24	; 0x03
    26fa:	9c 83       	std	Y+4, r25	; 0x04
    26fc:	ce 01       	movw	r24, r28
    26fe:	01 96       	adiw	r24, 0x01	; 1
    2700:	be 01       	movw	r22, r28
    2702:	6b 5f       	subi	r22, 0xFB	; 251
    2704:	7f 4f       	sbci	r23, 0xFF	; 255
    2706:	0e 94 94 14 	call	0x2928	; 0x2928 <__unpack_f>
    270a:	8d 81       	ldd	r24, Y+5	; 0x05
    270c:	82 30       	cpi	r24, 0x02	; 2
    270e:	81 f1       	breq	.+96     	; 0x2770 <__fixsfsi+0x88>
    2710:	82 30       	cpi	r24, 0x02	; 2
    2712:	70 f1       	brcs	.+92     	; 0x2770 <__fixsfsi+0x88>
    2714:	84 30       	cpi	r24, 0x04	; 4
    2716:	21 f4       	brne	.+8      	; 0x2720 <__fixsfsi+0x38>
    2718:	8e 81       	ldd	r24, Y+6	; 0x06
    271a:	88 23       	and	r24, r24
    271c:	69 f1       	breq	.+90     	; 0x2778 <__fixsfsi+0x90>
    271e:	0a c0       	rjmp	.+20     	; 0x2734 <__fixsfsi+0x4c>
    2720:	2f 81       	ldd	r18, Y+7	; 0x07
    2722:	38 85       	ldd	r19, Y+8	; 0x08
    2724:	37 fd       	sbrc	r19, 7
    2726:	24 c0       	rjmp	.+72     	; 0x2770 <__fixsfsi+0x88>
    2728:	6e 81       	ldd	r22, Y+6	; 0x06
    272a:	2f 31       	cpi	r18, 0x1F	; 31
    272c:	31 05       	cpc	r19, r1
    272e:	3c f0       	brlt	.+14     	; 0x273e <__fixsfsi+0x56>
    2730:	66 23       	and	r22, r22
    2732:	11 f1       	breq	.+68     	; 0x2778 <__fixsfsi+0x90>
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	50 e8       	ldi	r21, 0x80	; 128
    273c:	21 c0       	rjmp	.+66     	; 0x2780 <__fixsfsi+0x98>
    273e:	8e e1       	ldi	r24, 0x1E	; 30
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	82 1b       	sub	r24, r18
    2744:	93 0b       	sbc	r25, r19
    2746:	29 85       	ldd	r18, Y+9	; 0x09
    2748:	3a 85       	ldd	r19, Y+10	; 0x0a
    274a:	4b 85       	ldd	r20, Y+11	; 0x0b
    274c:	5c 85       	ldd	r21, Y+12	; 0x0c
    274e:	04 c0       	rjmp	.+8      	; 0x2758 <__fixsfsi+0x70>
    2750:	56 95       	lsr	r21
    2752:	47 95       	ror	r20
    2754:	37 95       	ror	r19
    2756:	27 95       	ror	r18
    2758:	8a 95       	dec	r24
    275a:	d2 f7       	brpl	.-12     	; 0x2750 <__fixsfsi+0x68>
    275c:	66 23       	and	r22, r22
    275e:	81 f0       	breq	.+32     	; 0x2780 <__fixsfsi+0x98>
    2760:	50 95       	com	r21
    2762:	40 95       	com	r20
    2764:	30 95       	com	r19
    2766:	21 95       	neg	r18
    2768:	3f 4f       	sbci	r19, 0xFF	; 255
    276a:	4f 4f       	sbci	r20, 0xFF	; 255
    276c:	5f 4f       	sbci	r21, 0xFF	; 255
    276e:	08 c0       	rjmp	.+16     	; 0x2780 <__fixsfsi+0x98>
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	a9 01       	movw	r20, r18
    2776:	04 c0       	rjmp	.+8      	; 0x2780 <__fixsfsi+0x98>
    2778:	2f ef       	ldi	r18, 0xFF	; 255
    277a:	3f ef       	ldi	r19, 0xFF	; 255
    277c:	4f ef       	ldi	r20, 0xFF	; 255
    277e:	5f e7       	ldi	r21, 0x7F	; 127
    2780:	b9 01       	movw	r22, r18
    2782:	ca 01       	movw	r24, r20
    2784:	2c 96       	adiw	r28, 0x0c	; 12
    2786:	e2 e0       	ldi	r30, 0x02	; 2
    2788:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <__epilogue_restores__+0x20>

0000278c <__pack_f>:
    278c:	ef 92       	push	r14
    278e:	ff 92       	push	r15
    2790:	0f 93       	push	r16
    2792:	1f 93       	push	r17
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	fc 01       	movw	r30, r24
    279a:	24 81       	ldd	r18, Z+4	; 0x04
    279c:	35 81       	ldd	r19, Z+5	; 0x05
    279e:	46 81       	ldd	r20, Z+6	; 0x06
    27a0:	57 81       	ldd	r21, Z+7	; 0x07
    27a2:	61 81       	ldd	r22, Z+1	; 0x01
    27a4:	80 81       	ld	r24, Z
    27a6:	82 30       	cpi	r24, 0x02	; 2
    27a8:	20 f4       	brcc	.+8      	; 0x27b2 <__pack_f+0x26>
    27aa:	40 61       	ori	r20, 0x10	; 16
    27ac:	ef ef       	ldi	r30, 0xFF	; 255
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	a3 c0       	rjmp	.+326    	; 0x28f8 <__pack_f+0x16c>
    27b2:	84 30       	cpi	r24, 0x04	; 4
    27b4:	09 f4       	brne	.+2      	; 0x27b8 <__pack_f+0x2c>
    27b6:	9b c0       	rjmp	.+310    	; 0x28ee <__pack_f+0x162>
    27b8:	82 30       	cpi	r24, 0x02	; 2
    27ba:	09 f4       	brne	.+2      	; 0x27be <__pack_f+0x32>
    27bc:	92 c0       	rjmp	.+292    	; 0x28e2 <__pack_f+0x156>
    27be:	21 15       	cp	r18, r1
    27c0:	31 05       	cpc	r19, r1
    27c2:	41 05       	cpc	r20, r1
    27c4:	51 05       	cpc	r21, r1
    27c6:	09 f4       	brne	.+2      	; 0x27ca <__pack_f+0x3e>
    27c8:	8f c0       	rjmp	.+286    	; 0x28e8 <__pack_f+0x15c>
    27ca:	02 80       	ldd	r0, Z+2	; 0x02
    27cc:	f3 81       	ldd	r31, Z+3	; 0x03
    27ce:	e0 2d       	mov	r30, r0
    27d0:	8f ef       	ldi	r24, 0xFF	; 255
    27d2:	e2 38       	cpi	r30, 0x82	; 130
    27d4:	f8 07       	cpc	r31, r24
    27d6:	0c f0       	brlt	.+2      	; 0x27da <__pack_f+0x4e>
    27d8:	5a c0       	rjmp	.+180    	; 0x288e <__pack_f+0x102>
    27da:	c2 e8       	ldi	r28, 0x82	; 130
    27dc:	df ef       	ldi	r29, 0xFF	; 255
    27de:	ce 1b       	sub	r28, r30
    27e0:	df 0b       	sbc	r29, r31
    27e2:	ca 31       	cpi	r28, 0x1A	; 26
    27e4:	d1 05       	cpc	r29, r1
    27e6:	6c f5       	brge	.+90     	; 0x2842 <__pack_f+0xb6>
    27e8:	79 01       	movw	r14, r18
    27ea:	8a 01       	movw	r16, r20
    27ec:	0c 2e       	mov	r0, r28
    27ee:	04 c0       	rjmp	.+8      	; 0x27f8 <__pack_f+0x6c>
    27f0:	16 95       	lsr	r17
    27f2:	07 95       	ror	r16
    27f4:	f7 94       	ror	r15
    27f6:	e7 94       	ror	r14
    27f8:	0a 94       	dec	r0
    27fa:	d2 f7       	brpl	.-12     	; 0x27f0 <__pack_f+0x64>
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	a0 e0       	ldi	r26, 0x00	; 0
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	0c 2e       	mov	r0, r28
    2806:	04 c0       	rjmp	.+8      	; 0x2810 <__pack_f+0x84>
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	aa 1f       	adc	r26, r26
    280e:	bb 1f       	adc	r27, r27
    2810:	0a 94       	dec	r0
    2812:	d2 f7       	brpl	.-12     	; 0x2808 <__pack_f+0x7c>
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	a1 09       	sbc	r26, r1
    2818:	b1 09       	sbc	r27, r1
    281a:	82 23       	and	r24, r18
    281c:	93 23       	and	r25, r19
    281e:	a4 23       	and	r26, r20
    2820:	b5 23       	and	r27, r21
    2822:	21 e0       	ldi	r18, 0x01	; 1
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	a1 05       	cpc	r26, r1
    282e:	b1 05       	cpc	r27, r1
    2830:	19 f4       	brne	.+6      	; 0x2838 <__pack_f+0xac>
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	a9 01       	movw	r20, r18
    2838:	2e 29       	or	r18, r14
    283a:	3f 29       	or	r19, r15
    283c:	40 2b       	or	r20, r16
    283e:	51 2b       	or	r21, r17
    2840:	03 c0       	rjmp	.+6      	; 0x2848 <__pack_f+0xbc>
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	a9 01       	movw	r20, r18
    2848:	da 01       	movw	r26, r20
    284a:	c9 01       	movw	r24, r18
    284c:	8f 77       	andi	r24, 0x7F	; 127
    284e:	90 70       	andi	r25, 0x00	; 0
    2850:	a0 70       	andi	r26, 0x00	; 0
    2852:	b0 70       	andi	r27, 0x00	; 0
    2854:	80 34       	cpi	r24, 0x40	; 64
    2856:	91 05       	cpc	r25, r1
    2858:	a1 05       	cpc	r26, r1
    285a:	b1 05       	cpc	r27, r1
    285c:	39 f4       	brne	.+14     	; 0x286c <__pack_f+0xe0>
    285e:	27 ff       	sbrs	r18, 7
    2860:	09 c0       	rjmp	.+18     	; 0x2874 <__pack_f+0xe8>
    2862:	20 5c       	subi	r18, 0xC0	; 192
    2864:	3f 4f       	sbci	r19, 0xFF	; 255
    2866:	4f 4f       	sbci	r20, 0xFF	; 255
    2868:	5f 4f       	sbci	r21, 0xFF	; 255
    286a:	04 c0       	rjmp	.+8      	; 0x2874 <__pack_f+0xe8>
    286c:	21 5c       	subi	r18, 0xC1	; 193
    286e:	3f 4f       	sbci	r19, 0xFF	; 255
    2870:	4f 4f       	sbci	r20, 0xFF	; 255
    2872:	5f 4f       	sbci	r21, 0xFF	; 255
    2874:	e1 e0       	ldi	r30, 0x01	; 1
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	20 30       	cpi	r18, 0x00	; 0
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	38 07       	cpc	r19, r24
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	48 07       	cpc	r20, r24
    2882:	80 e4       	ldi	r24, 0x40	; 64
    2884:	58 07       	cpc	r21, r24
    2886:	28 f5       	brcc	.+74     	; 0x28d2 <__pack_f+0x146>
    2888:	e0 e0       	ldi	r30, 0x00	; 0
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	22 c0       	rjmp	.+68     	; 0x28d2 <__pack_f+0x146>
    288e:	e0 38       	cpi	r30, 0x80	; 128
    2890:	f1 05       	cpc	r31, r1
    2892:	6c f5       	brge	.+90     	; 0x28ee <__pack_f+0x162>
    2894:	e1 58       	subi	r30, 0x81	; 129
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	da 01       	movw	r26, r20
    289a:	c9 01       	movw	r24, r18
    289c:	8f 77       	andi	r24, 0x7F	; 127
    289e:	90 70       	andi	r25, 0x00	; 0
    28a0:	a0 70       	andi	r26, 0x00	; 0
    28a2:	b0 70       	andi	r27, 0x00	; 0
    28a4:	80 34       	cpi	r24, 0x40	; 64
    28a6:	91 05       	cpc	r25, r1
    28a8:	a1 05       	cpc	r26, r1
    28aa:	b1 05       	cpc	r27, r1
    28ac:	39 f4       	brne	.+14     	; 0x28bc <__pack_f+0x130>
    28ae:	27 ff       	sbrs	r18, 7
    28b0:	09 c0       	rjmp	.+18     	; 0x28c4 <__pack_f+0x138>
    28b2:	20 5c       	subi	r18, 0xC0	; 192
    28b4:	3f 4f       	sbci	r19, 0xFF	; 255
    28b6:	4f 4f       	sbci	r20, 0xFF	; 255
    28b8:	5f 4f       	sbci	r21, 0xFF	; 255
    28ba:	04 c0       	rjmp	.+8      	; 0x28c4 <__pack_f+0x138>
    28bc:	21 5c       	subi	r18, 0xC1	; 193
    28be:	3f 4f       	sbci	r19, 0xFF	; 255
    28c0:	4f 4f       	sbci	r20, 0xFF	; 255
    28c2:	5f 4f       	sbci	r21, 0xFF	; 255
    28c4:	57 ff       	sbrs	r21, 7
    28c6:	05 c0       	rjmp	.+10     	; 0x28d2 <__pack_f+0x146>
    28c8:	56 95       	lsr	r21
    28ca:	47 95       	ror	r20
    28cc:	37 95       	ror	r19
    28ce:	27 95       	ror	r18
    28d0:	31 96       	adiw	r30, 0x01	; 1
    28d2:	87 e0       	ldi	r24, 0x07	; 7
    28d4:	56 95       	lsr	r21
    28d6:	47 95       	ror	r20
    28d8:	37 95       	ror	r19
    28da:	27 95       	ror	r18
    28dc:	8a 95       	dec	r24
    28de:	d1 f7       	brne	.-12     	; 0x28d4 <__pack_f+0x148>
    28e0:	0b c0       	rjmp	.+22     	; 0x28f8 <__pack_f+0x16c>
    28e2:	e0 e0       	ldi	r30, 0x00	; 0
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	05 c0       	rjmp	.+10     	; 0x28f2 <__pack_f+0x166>
    28e8:	e0 e0       	ldi	r30, 0x00	; 0
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	05 c0       	rjmp	.+10     	; 0x28f8 <__pack_f+0x16c>
    28ee:	ef ef       	ldi	r30, 0xFF	; 255
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	a9 01       	movw	r20, r18
    28f8:	8e 2f       	mov	r24, r30
    28fa:	87 95       	ror	r24
    28fc:	88 27       	eor	r24, r24
    28fe:	87 95       	ror	r24
    2900:	94 2f       	mov	r25, r20
    2902:	9f 77       	andi	r25, 0x7F	; 127
    2904:	67 95       	ror	r22
    2906:	66 27       	eor	r22, r22
    2908:	67 95       	ror	r22
    290a:	e6 95       	lsr	r30
    290c:	e2 2e       	mov	r14, r18
    290e:	a9 2f       	mov	r26, r25
    2910:	a8 2b       	or	r26, r24
    2912:	fe 2f       	mov	r31, r30
    2914:	f6 2b       	or	r31, r22
    2916:	62 2f       	mov	r22, r18
    2918:	73 2f       	mov	r23, r19
    291a:	8a 2f       	mov	r24, r26
    291c:	9f 2f       	mov	r25, r31
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
    2922:	e6 e0       	ldi	r30, 0x06	; 6
    2924:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__epilogue_restores__+0x18>

00002928 <__unpack_f>:
    2928:	dc 01       	movw	r26, r24
    292a:	fb 01       	movw	r30, r22
    292c:	2c 91       	ld	r18, X
    292e:	11 96       	adiw	r26, 0x01	; 1
    2930:	3c 91       	ld	r19, X
    2932:	11 97       	sbiw	r26, 0x01	; 1
    2934:	12 96       	adiw	r26, 0x02	; 2
    2936:	8c 91       	ld	r24, X
    2938:	12 97       	sbiw	r26, 0x02	; 2
    293a:	48 2f       	mov	r20, r24
    293c:	4f 77       	andi	r20, 0x7F	; 127
    293e:	50 e0       	ldi	r21, 0x00	; 0
    2940:	98 2f       	mov	r25, r24
    2942:	99 1f       	adc	r25, r25
    2944:	99 27       	eor	r25, r25
    2946:	99 1f       	adc	r25, r25
    2948:	13 96       	adiw	r26, 0x03	; 3
    294a:	6c 91       	ld	r22, X
    294c:	13 97       	sbiw	r26, 0x03	; 3
    294e:	86 2f       	mov	r24, r22
    2950:	88 0f       	add	r24, r24
    2952:	89 2b       	or	r24, r25
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	66 1f       	adc	r22, r22
    2958:	66 27       	eor	r22, r22
    295a:	66 1f       	adc	r22, r22
    295c:	61 83       	std	Z+1, r22	; 0x01
    295e:	00 97       	sbiw	r24, 0x00	; 0
    2960:	39 f5       	brne	.+78     	; 0x29b0 <__unpack_f+0x88>
    2962:	21 15       	cp	r18, r1
    2964:	31 05       	cpc	r19, r1
    2966:	41 05       	cpc	r20, r1
    2968:	51 05       	cpc	r21, r1
    296a:	11 f4       	brne	.+4      	; 0x2970 <__unpack_f+0x48>
    296c:	82 e0       	ldi	r24, 0x02	; 2
    296e:	29 c0       	rjmp	.+82     	; 0x29c2 <__unpack_f+0x9a>
    2970:	82 e8       	ldi	r24, 0x82	; 130
    2972:	9f ef       	ldi	r25, 0xFF	; 255
    2974:	93 83       	std	Z+3, r25	; 0x03
    2976:	82 83       	std	Z+2, r24	; 0x02
    2978:	67 e0       	ldi	r22, 0x07	; 7
    297a:	22 0f       	add	r18, r18
    297c:	33 1f       	adc	r19, r19
    297e:	44 1f       	adc	r20, r20
    2980:	55 1f       	adc	r21, r21
    2982:	6a 95       	dec	r22
    2984:	d1 f7       	brne	.-12     	; 0x297a <__unpack_f+0x52>
    2986:	83 e0       	ldi	r24, 0x03	; 3
    2988:	80 83       	st	Z, r24
    298a:	09 c0       	rjmp	.+18     	; 0x299e <__unpack_f+0x76>
    298c:	22 0f       	add	r18, r18
    298e:	33 1f       	adc	r19, r19
    2990:	44 1f       	adc	r20, r20
    2992:	55 1f       	adc	r21, r21
    2994:	82 81       	ldd	r24, Z+2	; 0x02
    2996:	93 81       	ldd	r25, Z+3	; 0x03
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	93 83       	std	Z+3, r25	; 0x03
    299c:	82 83       	std	Z+2, r24	; 0x02
    299e:	20 30       	cpi	r18, 0x00	; 0
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	38 07       	cpc	r19, r24
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	48 07       	cpc	r20, r24
    29a8:	80 e4       	ldi	r24, 0x40	; 64
    29aa:	58 07       	cpc	r21, r24
    29ac:	78 f3       	brcs	.-34     	; 0x298c <__unpack_f+0x64>
    29ae:	20 c0       	rjmp	.+64     	; 0x29f0 <__unpack_f+0xc8>
    29b0:	8f 3f       	cpi	r24, 0xFF	; 255
    29b2:	91 05       	cpc	r25, r1
    29b4:	79 f4       	brne	.+30     	; 0x29d4 <__unpack_f+0xac>
    29b6:	21 15       	cp	r18, r1
    29b8:	31 05       	cpc	r19, r1
    29ba:	41 05       	cpc	r20, r1
    29bc:	51 05       	cpc	r21, r1
    29be:	19 f4       	brne	.+6      	; 0x29c6 <__unpack_f+0x9e>
    29c0:	84 e0       	ldi	r24, 0x04	; 4
    29c2:	80 83       	st	Z, r24
    29c4:	08 95       	ret
    29c6:	44 ff       	sbrs	r20, 4
    29c8:	03 c0       	rjmp	.+6      	; 0x29d0 <__unpack_f+0xa8>
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	80 83       	st	Z, r24
    29ce:	10 c0       	rjmp	.+32     	; 0x29f0 <__unpack_f+0xc8>
    29d0:	10 82       	st	Z, r1
    29d2:	0e c0       	rjmp	.+28     	; 0x29f0 <__unpack_f+0xc8>
    29d4:	8f 57       	subi	r24, 0x7F	; 127
    29d6:	90 40       	sbci	r25, 0x00	; 0
    29d8:	93 83       	std	Z+3, r25	; 0x03
    29da:	82 83       	std	Z+2, r24	; 0x02
    29dc:	83 e0       	ldi	r24, 0x03	; 3
    29de:	80 83       	st	Z, r24
    29e0:	87 e0       	ldi	r24, 0x07	; 7
    29e2:	22 0f       	add	r18, r18
    29e4:	33 1f       	adc	r19, r19
    29e6:	44 1f       	adc	r20, r20
    29e8:	55 1f       	adc	r21, r21
    29ea:	8a 95       	dec	r24
    29ec:	d1 f7       	brne	.-12     	; 0x29e2 <__unpack_f+0xba>
    29ee:	50 64       	ori	r21, 0x40	; 64
    29f0:	24 83       	std	Z+4, r18	; 0x04
    29f2:	35 83       	std	Z+5, r19	; 0x05
    29f4:	46 83       	std	Z+6, r20	; 0x06
    29f6:	57 83       	std	Z+7, r21	; 0x07
    29f8:	08 95       	ret

000029fa <__fpcmp_parts_f>:
    29fa:	fc 01       	movw	r30, r24
    29fc:	db 01       	movw	r26, r22
    29fe:	90 81       	ld	r25, Z
    2a00:	92 30       	cpi	r25, 0x02	; 2
    2a02:	08 f4       	brcc	.+2      	; 0x2a06 <__fpcmp_parts_f+0xc>
    2a04:	49 c0       	rjmp	.+146    	; 0x2a98 <__fpcmp_parts_f+0x9e>
    2a06:	8c 91       	ld	r24, X
    2a08:	82 30       	cpi	r24, 0x02	; 2
    2a0a:	08 f4       	brcc	.+2      	; 0x2a0e <__fpcmp_parts_f+0x14>
    2a0c:	45 c0       	rjmp	.+138    	; 0x2a98 <__fpcmp_parts_f+0x9e>
    2a0e:	94 30       	cpi	r25, 0x04	; 4
    2a10:	51 f4       	brne	.+20     	; 0x2a26 <__fpcmp_parts_f+0x2c>
    2a12:	61 81       	ldd	r22, Z+1	; 0x01
    2a14:	84 30       	cpi	r24, 0x04	; 4
    2a16:	b1 f5       	brne	.+108    	; 0x2a84 <__fpcmp_parts_f+0x8a>
    2a18:	11 96       	adiw	r26, 0x01	; 1
    2a1a:	2c 91       	ld	r18, X
    2a1c:	11 97       	sbiw	r26, 0x01	; 1
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	26 1b       	sub	r18, r22
    2a22:	31 09       	sbc	r19, r1
    2a24:	41 c0       	rjmp	.+130    	; 0x2aa8 <__fpcmp_parts_f+0xae>
    2a26:	84 30       	cpi	r24, 0x04	; 4
    2a28:	21 f0       	breq	.+8      	; 0x2a32 <__fpcmp_parts_f+0x38>
    2a2a:	92 30       	cpi	r25, 0x02	; 2
    2a2c:	41 f4       	brne	.+16     	; 0x2a3e <__fpcmp_parts_f+0x44>
    2a2e:	82 30       	cpi	r24, 0x02	; 2
    2a30:	b1 f1       	breq	.+108    	; 0x2a9e <__fpcmp_parts_f+0xa4>
    2a32:	11 96       	adiw	r26, 0x01	; 1
    2a34:	8c 91       	ld	r24, X
    2a36:	11 97       	sbiw	r26, 0x01	; 1
    2a38:	88 23       	and	r24, r24
    2a3a:	a1 f1       	breq	.+104    	; 0x2aa4 <__fpcmp_parts_f+0xaa>
    2a3c:	2d c0       	rjmp	.+90     	; 0x2a98 <__fpcmp_parts_f+0x9e>
    2a3e:	61 81       	ldd	r22, Z+1	; 0x01
    2a40:	82 30       	cpi	r24, 0x02	; 2
    2a42:	01 f1       	breq	.+64     	; 0x2a84 <__fpcmp_parts_f+0x8a>
    2a44:	11 96       	adiw	r26, 0x01	; 1
    2a46:	8c 91       	ld	r24, X
    2a48:	11 97       	sbiw	r26, 0x01	; 1
    2a4a:	68 17       	cp	r22, r24
    2a4c:	d9 f4       	brne	.+54     	; 0x2a84 <__fpcmp_parts_f+0x8a>
    2a4e:	22 81       	ldd	r18, Z+2	; 0x02
    2a50:	33 81       	ldd	r19, Z+3	; 0x03
    2a52:	12 96       	adiw	r26, 0x02	; 2
    2a54:	8d 91       	ld	r24, X+
    2a56:	9c 91       	ld	r25, X
    2a58:	13 97       	sbiw	r26, 0x03	; 3
    2a5a:	82 17       	cp	r24, r18
    2a5c:	93 07       	cpc	r25, r19
    2a5e:	94 f0       	brlt	.+36     	; 0x2a84 <__fpcmp_parts_f+0x8a>
    2a60:	28 17       	cp	r18, r24
    2a62:	39 07       	cpc	r19, r25
    2a64:	bc f0       	brlt	.+46     	; 0x2a94 <__fpcmp_parts_f+0x9a>
    2a66:	24 81       	ldd	r18, Z+4	; 0x04
    2a68:	35 81       	ldd	r19, Z+5	; 0x05
    2a6a:	46 81       	ldd	r20, Z+6	; 0x06
    2a6c:	57 81       	ldd	r21, Z+7	; 0x07
    2a6e:	14 96       	adiw	r26, 0x04	; 4
    2a70:	8d 91       	ld	r24, X+
    2a72:	9d 91       	ld	r25, X+
    2a74:	0d 90       	ld	r0, X+
    2a76:	bc 91       	ld	r27, X
    2a78:	a0 2d       	mov	r26, r0
    2a7a:	82 17       	cp	r24, r18
    2a7c:	93 07       	cpc	r25, r19
    2a7e:	a4 07       	cpc	r26, r20
    2a80:	b5 07       	cpc	r27, r21
    2a82:	18 f4       	brcc	.+6      	; 0x2a8a <__fpcmp_parts_f+0x90>
    2a84:	66 23       	and	r22, r22
    2a86:	41 f0       	breq	.+16     	; 0x2a98 <__fpcmp_parts_f+0x9e>
    2a88:	0d c0       	rjmp	.+26     	; 0x2aa4 <__fpcmp_parts_f+0xaa>
    2a8a:	28 17       	cp	r18, r24
    2a8c:	39 07       	cpc	r19, r25
    2a8e:	4a 07       	cpc	r20, r26
    2a90:	5b 07       	cpc	r21, r27
    2a92:	28 f4       	brcc	.+10     	; 0x2a9e <__fpcmp_parts_f+0xa4>
    2a94:	66 23       	and	r22, r22
    2a96:	31 f0       	breq	.+12     	; 0x2aa4 <__fpcmp_parts_f+0xaa>
    2a98:	21 e0       	ldi	r18, 0x01	; 1
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	05 c0       	rjmp	.+10     	; 0x2aa8 <__fpcmp_parts_f+0xae>
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <__fpcmp_parts_f+0xae>
    2aa4:	2f ef       	ldi	r18, 0xFF	; 255
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	c9 01       	movw	r24, r18
    2aaa:	08 95       	ret

00002aac <__prologue_saves__>:
    2aac:	2f 92       	push	r2
    2aae:	3f 92       	push	r3
    2ab0:	4f 92       	push	r4
    2ab2:	5f 92       	push	r5
    2ab4:	6f 92       	push	r6
    2ab6:	7f 92       	push	r7
    2ab8:	8f 92       	push	r8
    2aba:	9f 92       	push	r9
    2abc:	af 92       	push	r10
    2abe:	bf 92       	push	r11
    2ac0:	cf 92       	push	r12
    2ac2:	df 92       	push	r13
    2ac4:	ef 92       	push	r14
    2ac6:	ff 92       	push	r15
    2ac8:	0f 93       	push	r16
    2aca:	1f 93       	push	r17
    2acc:	cf 93       	push	r28
    2ace:	df 93       	push	r29
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	ca 1b       	sub	r28, r26
    2ad6:	db 0b       	sbc	r29, r27
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	09 94       	ijmp

00002ae4 <__epilogue_restores__>:
    2ae4:	2a 88       	ldd	r2, Y+18	; 0x12
    2ae6:	39 88       	ldd	r3, Y+17	; 0x11
    2ae8:	48 88       	ldd	r4, Y+16	; 0x10
    2aea:	5f 84       	ldd	r5, Y+15	; 0x0f
    2aec:	6e 84       	ldd	r6, Y+14	; 0x0e
    2aee:	7d 84       	ldd	r7, Y+13	; 0x0d
    2af0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2af2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2af4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2af6:	b9 84       	ldd	r11, Y+9	; 0x09
    2af8:	c8 84       	ldd	r12, Y+8	; 0x08
    2afa:	df 80       	ldd	r13, Y+7	; 0x07
    2afc:	ee 80       	ldd	r14, Y+6	; 0x06
    2afe:	fd 80       	ldd	r15, Y+5	; 0x05
    2b00:	0c 81       	ldd	r16, Y+4	; 0x04
    2b02:	1b 81       	ldd	r17, Y+3	; 0x03
    2b04:	aa 81       	ldd	r26, Y+2	; 0x02
    2b06:	b9 81       	ldd	r27, Y+1	; 0x01
    2b08:	ce 0f       	add	r28, r30
    2b0a:	d1 1d       	adc	r29, r1
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	ed 01       	movw	r28, r26
    2b18:	08 95       	ret

00002b1a <_exit>:
    2b1a:	f8 94       	cli

00002b1c <__stop_program>:
    2b1c:	ff cf       	rjmp	.-2      	; 0x2b1c <__stop_program>
