
Can Car Project_Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  00001a5e  00001af2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800208  00800208  00001bfa  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  0000234d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003f2  00000000  00000000  0000258d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b2d  00000000  00000000  0000297f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015f3  00000000  00000000  000054ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f15  00000000  00000000  00006a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000340  00000000  00000000  000089b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005dd  00000000  00000000  00008cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d8b  00000000  00000000  000092d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000073a  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000080  00000000  00000000  0000a796  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a8 e0       	ldi	r26, 0x08	; 8
      78:	b2 e0       	ldi	r27, 0x02	; 2
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	ac 31       	cpi	r26, 0x1C	; 28
      80:	b1 07       	cpc	r27, r17
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
      84:	12 e0       	ldi	r17, 0x02	; 2
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	ee e5       	ldi	r30, 0x5E	; 94
      8c:	fa e1       	ldi	r31, 0x1A	; 26
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	a8 30       	cpi	r26, 0x08	; 8
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
      9a:	0e 94 9a 03 	call	0x734	; 0x734 <main>
      9e:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <INIT_ADC>:
 * Created: 07/04/2019 09:39:41 AM
 *  Author: Ahmed
 */ 
#include <avr/io.h>
void INIT_ADC()
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	ADMUX|=(1<<REFS0); 
      ae:	8c e7       	ldi	r24, 0x7C	; 124
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	2c e7       	ldi	r18, 0x7C	; 124
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	f9 01       	movw	r30, r18
      b8:	20 81       	ld	r18, Z
      ba:	20 64       	ori	r18, 0x40	; 64
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
	ADCSRA|=(1<<ADEN); //enable ADC
      c0:	8a e7       	ldi	r24, 0x7A	; 122
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	2a e7       	ldi	r18, 0x7A	; 122
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	20 68       	ori	r18, 0x80	; 128
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
	ADCSRA|=(7<<ADPS0);//clock Division Factor
      d2:	8a e7       	ldi	r24, 0x7A	; 122
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	2a e7       	ldi	r18, 0x7A	; 122
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	20 81       	ld	r18, Z
      de:	27 60       	ori	r18, 0x07	; 7
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
}
      e4:	cf 91       	pop	r28
      e6:	df 91       	pop	r29
      e8:	08 95       	ret

000000ea <Analog_Read>:
	
int Analog_Read(uint8_t pin_num)
{
      ea:	df 93       	push	r29
      ec:	cf 93       	push	r28
      ee:	0f 92       	push	r0
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX|= pin_num;
      f6:	8c e7       	ldi	r24, 0x7C	; 124
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	2c e7       	ldi	r18, 0x7C	; 124
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	f9 01       	movw	r30, r18
     100:	30 81       	ld	r19, Z
     102:	29 81       	ldd	r18, Y+1	; 0x01
     104:	23 2b       	or	r18, r19
     106:	fc 01       	movw	r30, r24
     108:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC);
     10a:	8a e7       	ldi	r24, 0x7A	; 122
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	2a e7       	ldi	r18, 0x7A	; 122
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	f9 01       	movw	r30, r18
     114:	20 81       	ld	r18, Z
     116:	20 64       	ori	r18, 0x40	; 64
     118:	fc 01       	movw	r30, r24
     11a:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));
     11c:	00 00       	nop
     11e:	8a e7       	ldi	r24, 0x7A	; 122
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	fc 01       	movw	r30, r24
     124:	80 81       	ld	r24, Z
     126:	88 2f       	mov	r24, r24
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	80 74       	andi	r24, 0x40	; 64
     12c:	90 70       	andi	r25, 0x00	; 0
     12e:	00 97       	sbiw	r24, 0x00	; 0
     130:	b1 f7       	brne	.-20     	; 0x11e <Analog_Read+0x34>
	return ADC;	
     132:	88 e7       	ldi	r24, 0x78	; 120
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	80 81       	ld	r24, Z
     13a:	91 81       	ldd	r25, Z+1	; 0x01
     13c:	0f 90       	pop	r0
     13e:	cf 91       	pop	r28
     140:	df 91       	pop	r29
     142:	08 95       	ret

00000144 <readRegister>:
 * \see MCP2515 datasheet, chapter 11 - register description
 * \see MCP2515 datasheet, chapter 12 - read instruction
 * \param address Register address
 */
unsigned char readRegister(unsigned char address)
{
     144:	df 93       	push	r29
     146:	cf 93       	push	r28
     148:	00 d0       	rcall	.+0      	; 0x14a <readRegister+0x6>
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
     14e:	8a 83       	std	Y+2, r24	; 0x02
	 /* Send read instruction, address, and receive result */
	 spiMasterChipSelect(1);
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	0e 94 16 03 	call	0x62c	; 0x62c <spiMasterChipSelect>
	 spiMasterTRANSMIT(READ_INSTRUCTION);
     156:	83 e0       	ldi	r24, 0x03	; 3
     158:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(address);
     15c:	8a 81       	ldd	r24, Y+2	; 0x02
     15e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	unsigned char buffer = spiMasterTRANSMIT(0);
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
     168:	89 83       	std	Y+1, r24	; 0x01
	 spiMasterChipSelect(0);
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	0e 94 16 03 	call	0x62c	; 0x62c <spiMasterChipSelect>
	 return buffer;
     170:	89 81       	ldd	r24, Y+1	; 0x01
}
     172:	0f 90       	pop	r0
     174:	0f 90       	pop	r0
     176:	cf 91       	pop	r28
     178:	df 91       	pop	r29
     17a:	08 95       	ret

0000017c <writeRegister>:
 * \see MCP2515 datasheet, chapter 12 - write instruction
 * \param address Register address
 * \param value New value of the register
 */
void writeRegister(unsigned char address, unsigned char value)
{
     17c:	df 93       	push	r29
     17e:	cf 93       	push	r28
     180:	00 d0       	rcall	.+0      	; 0x182 <writeRegister+0x6>
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	89 83       	std	Y+1, r24	; 0x01
     188:	6a 83       	std	Y+2, r22	; 0x02
	/* Send write instruction, address, and data */
	 spiMasterChipSelect(1);
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 16 03 	call	0x62c	; 0x62c <spiMasterChipSelect>
	 spiMasterTRANSMIT(WRITE_INSTRUCTION);
     190:	82 e0       	ldi	r24, 0x02	; 2
     192:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(address);
     196:	89 81       	ldd	r24, Y+1	; 0x01
     198:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(value);
     19c:	8a 81       	ldd	r24, Y+2	; 0x02
     19e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterChipSelect(0);
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	0e 94 16 03 	call	0x62c	; 0x62c <spiMasterChipSelect>
}
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	cf 91       	pop	r28
     1ae:	df 91       	pop	r29
     1b0:	08 95       	ret

000001b2 <resetMCP2515>:
/**
 * Send reset instruction to the MCP2515. Device should
 * reinitialize yourself and go to the configuration mode
 */
void resetMCP2515()
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
	 /* Send reset instruction */
	 spiMasterChipSelect(1);
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	0e 94 16 03 	call	0x62c	; 0x62c <spiMasterChipSelect>
	 spiMasterTRANSMIT(RESET_INSTRUCTION);
     1c0:	80 ec       	ldi	r24, 0xC0	; 192
     1c2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterChipSelect(0);
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	0e 94 16 03 	call	0x62c	; 0x62c <spiMasterChipSelect>
}
     1cc:	cf 91       	pop	r28
     1ce:	df 91       	pop	r29
     1d0:	08 95       	ret

000001d2 <setBitTiming>:

unsigned char setBitTiming(unsigned char rCNF1, unsigned char rCNF2, unsigned char rCNF3)
{
     1d2:	df 93       	push	r29
     1d4:	cf 93       	push	r28
     1d6:	00 d0       	rcall	.+0      	; 0x1d8 <setBitTiming+0x6>
     1d8:	0f 92       	push	r0
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
     1de:	89 83       	std	Y+1, r24	; 0x01
     1e0:	6a 83       	std	Y+2, r22	; 0x02
     1e2:	4b 83       	std	Y+3, r20	; 0x03
	 if(getMode == CONFIGURATION_MODE) { 
     1e4:	8e e0       	ldi	r24, 0x0E	; 14
     1e6:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     1ea:	82 95       	swap	r24
     1ec:	86 95       	lsr	r24
     1ee:	87 70       	andi	r24, 0x07	; 7
     1f0:	84 30       	cpi	r24, 0x04	; 4
     1f2:	b1 f4       	brne	.+44     	; 0x220 <setBitTiming+0x4e>
		 writeRegister(CNF1, rCNF1);
     1f4:	8a e2       	ldi	r24, 0x2A	; 42
     1f6:	69 81       	ldd	r22, Y+1	; 0x01
     1f8:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
		 writeRegister(CNF2, rCNF2);
     1fc:	89 e2       	ldi	r24, 0x29	; 41
     1fe:	6a 81       	ldd	r22, Y+2	; 0x02
     200:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
		 changeBits(CNF3, 0x07, rCNF3);
     204:	88 e2       	ldi	r24, 0x28	; 40
     206:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     20a:	98 2f       	mov	r25, r24
     20c:	98 7f       	andi	r25, 0xF8	; 248
     20e:	8b 81       	ldd	r24, Y+3	; 0x03
     210:	89 2b       	or	r24, r25
     212:	98 2f       	mov	r25, r24
     214:	88 e2       	ldi	r24, 0x28	; 40
     216:	69 2f       	mov	r22, r25
     218:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
		 return 1;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	01 c0       	rjmp	.+2      	; 0x222 <setBitTiming+0x50>
	 }
	 return 0;
     220:	80 e0       	ldi	r24, 0x00	; 0
}
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <setAcceptanceCriteria>:
 * \param address starting address of 4 registers to setup. It can be mask
 * or filter, doesn't matter
 * \param criterion message identifier criterion to be set
 * \param is_ext 1 if message is extended, otherwise 0 */
void setAcceptanceCriteria (unsigned char address,unsigned long criterion,unsigned char is_ext)
{
     22e:	df 93       	push	r29
     230:	cf 93       	push	r28
     232:	00 d0       	rcall	.+0      	; 0x234 <setAcceptanceCriteria+0x6>
     234:	00 d0       	rcall	.+0      	; 0x236 <setAcceptanceCriteria+0x8>
     236:	00 d0       	rcall	.+0      	; 0x238 <setAcceptanceCriteria+0xa>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	89 83       	std	Y+1, r24	; 0x01
     23e:	4a 83       	std	Y+2, r20	; 0x02
     240:	5b 83       	std	Y+3, r21	; 0x03
     242:	6c 83       	std	Y+4, r22	; 0x04
     244:	7d 83       	std	Y+5, r23	; 0x05
     246:	2e 83       	std	Y+6, r18	; 0x06
	 /* Initialize reading of the receive buffer */
	 spiMasterChipSelect(1);
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	0e 94 16 03 	call	0x62c	; 0x62c <spiMasterChipSelect>
	 /* Send header and address */
	 spiMasterTRANSMIT(WRITE_INSTRUCTION);
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(address);
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 /* Setup standard or extended identifier */
	 if(is_ext) {
     25a:	8e 81       	ldd	r24, Y+6	; 0x06
     25c:	88 23       	and	r24, r24
     25e:	09 f4       	brne	.+2      	; 0x262 <setAcceptanceCriteria+0x34>
     260:	43 c0       	rjmp	.+134    	; 0x2e8 <setAcceptanceCriteria+0xba>
	 spiMasterTRANSMIT((unsigned char)(criterion>>3));
     262:	8a 81       	ldd	r24, Y+2	; 0x02
     264:	9b 81       	ldd	r25, Y+3	; 0x03
     266:	ac 81       	ldd	r26, Y+4	; 0x04
     268:	bd 81       	ldd	r27, Y+5	; 0x05
     26a:	68 94       	set
     26c:	12 f8       	bld	r1, 2
     26e:	b6 95       	lsr	r27
     270:	a7 95       	ror	r26
     272:	97 95       	ror	r25
     274:	87 95       	ror	r24
     276:	16 94       	lsr	r1
     278:	d1 f7       	brne	.-12     	; 0x26e <setAcceptanceCriteria+0x40>
     27a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion<<5)|(1<<EXIDE)|((unsigned char)(criterion>>27)));
     27e:	8a 81       	ldd	r24, Y+2	; 0x02
     280:	28 2f       	mov	r18, r24
     282:	22 95       	swap	r18
     284:	22 0f       	add	r18, r18
     286:	20 7e       	andi	r18, 0xE0	; 224
     288:	8a 81       	ldd	r24, Y+2	; 0x02
     28a:	9b 81       	ldd	r25, Y+3	; 0x03
     28c:	ac 81       	ldd	r26, Y+4	; 0x04
     28e:	bd 81       	ldd	r27, Y+5	; 0x05
     290:	07 2e       	mov	r0, r23
     292:	7b e1       	ldi	r23, 0x1B	; 27
     294:	b6 95       	lsr	r27
     296:	a7 95       	ror	r26
     298:	97 95       	ror	r25
     29a:	87 95       	ror	r24
     29c:	7a 95       	dec	r23
     29e:	d1 f7       	brne	.-12     	; 0x294 <setAcceptanceCriteria+0x66>
     2a0:	70 2d       	mov	r23, r0
     2a2:	82 2b       	or	r24, r18
     2a4:	88 60       	ori	r24, 0x08	; 8
     2a6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion>>19));
     2aa:	8a 81       	ldd	r24, Y+2	; 0x02
     2ac:	9b 81       	ldd	r25, Y+3	; 0x03
     2ae:	ac 81       	ldd	r26, Y+4	; 0x04
     2b0:	bd 81       	ldd	r27, Y+5	; 0x05
     2b2:	07 2e       	mov	r0, r23
     2b4:	73 e1       	ldi	r23, 0x13	; 19
     2b6:	b6 95       	lsr	r27
     2b8:	a7 95       	ror	r26
     2ba:	97 95       	ror	r25
     2bc:	87 95       	ror	r24
     2be:	7a 95       	dec	r23
     2c0:	d1 f7       	brne	.-12     	; 0x2b6 <setAcceptanceCriteria+0x88>
     2c2:	70 2d       	mov	r23, r0
     2c4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion>>11));
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	9b 81       	ldd	r25, Y+3	; 0x03
     2cc:	ac 81       	ldd	r26, Y+4	; 0x04
     2ce:	bd 81       	ldd	r27, Y+5	; 0x05
     2d0:	07 2e       	mov	r0, r23
     2d2:	7b e0       	ldi	r23, 0x0B	; 11
     2d4:	b6 95       	lsr	r27
     2d6:	a7 95       	ror	r26
     2d8:	97 95       	ror	r25
     2da:	87 95       	ror	r24
     2dc:	7a 95       	dec	r23
     2de:	d1 f7       	brne	.-12     	; 0x2d4 <setAcceptanceCriteria+0xa6>
     2e0:	70 2d       	mov	r23, r0
     2e2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
     2e6:	14 c0       	rjmp	.+40     	; 0x310 <setAcceptanceCriteria+0xe2>
	 } else {
	 spiMasterTRANSMIT((unsigned char)(criterion >> 3));
     2e8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ea:	9b 81       	ldd	r25, Y+3	; 0x03
     2ec:	ac 81       	ldd	r26, Y+4	; 0x04
     2ee:	bd 81       	ldd	r27, Y+5	; 0x05
     2f0:	68 94       	set
     2f2:	12 f8       	bld	r1, 2
     2f4:	b6 95       	lsr	r27
     2f6:	a7 95       	ror	r26
     2f8:	97 95       	ror	r25
     2fa:	87 95       	ror	r24
     2fc:	16 94       	lsr	r1
     2fe:	d1 f7       	brne	.-12     	; 0x2f4 <setAcceptanceCriteria+0xc6>
     300:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion << 5));
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	82 95       	swap	r24
     308:	88 0f       	add	r24, r24
     30a:	80 7e       	andi	r24, 0xE0	; 224
     30c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 }
	 /* Release the bus */
	 spiMasterChipSelect(0);
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	0e 94 16 03 	call	0x62c	; 0x62c <spiMasterChipSelect>
}
     316:	26 96       	adiw	r28, 0x06	; 6
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
     322:	cf 91       	pop	r28
     324:	df 91       	pop	r29
     326:	08 95       	ret

00000328 <initMCP2515>:

/* Configuration routine */
void initMCP2515(void)
{
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
	/* Initialize SPI as a master device, on frequency < 10Mhz */
	 spiMasterINIT();
     330:	0e 94 dd 02 	call	0x5ba	; 0x5ba <spiMasterINIT>
	/* Initialize external interrupt service on this device */
	 extInterruptINIT(interruptMCP2515);
     334:	80 eb       	ldi	r24, 0xB0	; 176
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	0e 94 48 03 	call	0x690	; 0x690 <extInterruptINIT>
	/* Send reset instruction */
	 resetMCP2515();
     33c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <resetMCP2515>
	/* Set configuration mode */
	 setMode(CONFIGURATION_MODE);
     340:	8f e0       	ldi	r24, 0x0F	; 15
     342:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     346:	8f 71       	andi	r24, 0x1F	; 31
     348:	80 68       	ori	r24, 0x80	; 128
     34a:	98 2f       	mov	r25, r24
     34c:	8f e0       	ldi	r24, 0x0F	; 15
     34e:	69 2f       	mov	r22, r25
     350:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
     354:	8e e0       	ldi	r24, 0x0E	; 14
     356:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     35a:	82 95       	swap	r24
     35c:	86 95       	lsr	r24
     35e:	87 70       	andi	r24, 0x07	; 7
     360:	84 30       	cpi	r24, 0x04	; 4
     362:	c1 f7       	brne	.-16     	; 0x354 <initMCP2515+0x2c>
	/* Set bit timing , masks and rollover mode*/
	 setBitTiming(0x04, 0xD2, 0x42);
     364:	84 e0       	ldi	r24, 0x04	; 4
     366:	62 ed       	ldi	r22, 0xD2	; 210
     368:	42 e4       	ldi	r20, 0x42	; 66
     36a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <setBitTiming>
	 setMask(RXM0, 0x00000000, 1);
     36e:	84 e3       	ldi	r24, 0x34	; 52
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	ba 01       	movw	r22, r20
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	0e 94 17 01 	call	0x22e	; 0x22e <setAcceptanceCriteria>
	 setMask(RXM1, 0x00000000, 1);
     37c:	88 e3       	ldi	r24, 0x38	; 56
     37e:	40 e0       	ldi	r20, 0x00	; 0
     380:	50 e0       	ldi	r21, 0x00	; 0
     382:	ba 01       	movw	r22, r20
     384:	21 e0       	ldi	r18, 0x01	; 1
     386:	0e 94 17 01 	call	0x22e	; 0x22e <setAcceptanceCriteria>
	 setRollover(1);
     38a:	80 e6       	ldi	r24, 0x60	; 96
     38c:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     390:	88 7f       	andi	r24, 0xF8	; 248
     392:	84 60       	ori	r24, 0x04	; 4
     394:	98 2f       	mov	r25, r24
     396:	80 e6       	ldi	r24, 0x60	; 96
     398:	69 2f       	mov	r22, r25
     39a:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
	/* Get into normal mode and setup communication */
	 setMode(NORMAL_MODE)
     39e:	8f e0       	ldi	r24, 0x0F	; 15
     3a0:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     3a4:	98 2f       	mov	r25, r24
     3a6:	9f 71       	andi	r25, 0x1F	; 31
     3a8:	8f e0       	ldi	r24, 0x0F	; 15
     3aa:	69 2f       	mov	r22, r25
     3ac:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
     3b0:	8e e0       	ldi	r24, 0x0E	; 14
     3b2:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     3b6:	82 95       	swap	r24
     3b8:	86 95       	lsr	r24
     3ba:	87 70       	andi	r24, 0x07	; 7
     3bc:	88 23       	and	r24, r24
     3be:	c1 f7       	brne	.-16     	; 0x3b0 <initMCP2515+0x88>
}
     3c0:	cf 91       	pop	r28
     3c2:	df 91       	pop	r29
     3c4:	08 95       	ret

000003c6 <sendCANmsg>:
 * - bits 7:6 - message priority (higher the better)
 * - bit 5 - if set, message is remote request (RTR)
 * - bit 4 - if set, message is considered to have ext. id.
 * - bits 3:0 - message length (0 to 8 bytes) */
void sendCANmsg(unsigned char bi,unsigned long id,unsigned char * data,unsigned char prop)
{
     3c6:	0f 93       	push	r16
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	29 97       	sbiw	r28, 0x09	; 9
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	8a 83       	std	Y+2, r24	; 0x02
     3de:	4b 83       	std	Y+3, r20	; 0x03
     3e0:	5c 83       	std	Y+4, r21	; 0x04
     3e2:	6d 83       	std	Y+5, r22	; 0x05
     3e4:	7e 83       	std	Y+6, r23	; 0x06
     3e6:	38 87       	std	Y+8, r19	; 0x08
     3e8:	2f 83       	std	Y+7, r18	; 0x07
     3ea:	09 87       	std	Y+9, r16	; 0x09
	/* Initialize reading of the receive buffer */
	 spiMasterChipSelect(1);
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 16 03 	call	0x62c	; 0x62c <spiMasterChipSelect>
	/* Send header and address */
	 spiMasterTRANSMIT(WRITE_INSTRUCTION);
     3f2:	82 e0       	ldi	r24, 0x02	; 2
     3f4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(TXBnCTRL(bi));
     3f8:	8a 81       	ldd	r24, Y+2	; 0x02
     3fa:	88 2f       	mov	r24, r24
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	03 96       	adiw	r24, 0x03	; 3
     400:	82 95       	swap	r24
     402:	80 7f       	andi	r24, 0xF0	; 240
     404:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 /* Setup message priority */
	 spiMasterTRANSMIT(prop >> 6);
     408:	89 85       	ldd	r24, Y+9	; 0x09
     40a:	82 95       	swap	r24
     40c:	86 95       	lsr	r24
     40e:	86 95       	lsr	r24
     410:	83 70       	andi	r24, 0x03	; 3
     412:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	/* Setup standard or extended identifier */
	 if(prop & 0x10) {
     416:	89 85       	ldd	r24, Y+9	; 0x09
     418:	88 2f       	mov	r24, r24
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	80 71       	andi	r24, 0x10	; 16
     41e:	90 70       	andi	r25, 0x00	; 0
     420:	00 97       	sbiw	r24, 0x00	; 0
     422:	09 f4       	brne	.+2      	; 0x426 <sendCANmsg+0x60>
     424:	43 c0       	rjmp	.+134    	; 0x4ac <sendCANmsg+0xe6>
	 spiMasterTRANSMIT((unsigned char)(id>>3));
     426:	8b 81       	ldd	r24, Y+3	; 0x03
     428:	9c 81       	ldd	r25, Y+4	; 0x04
     42a:	ad 81       	ldd	r26, Y+5	; 0x05
     42c:	be 81       	ldd	r27, Y+6	; 0x06
     42e:	68 94       	set
     430:	12 f8       	bld	r1, 2
     432:	b6 95       	lsr	r27
     434:	a7 95       	ror	r26
     436:	97 95       	ror	r25
     438:	87 95       	ror	r24
     43a:	16 94       	lsr	r1
     43c:	d1 f7       	brne	.-12     	; 0x432 <sendCANmsg+0x6c>
     43e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id<<5)|(1<<EXIDE)|((unsigned char)(id>>27)));
     442:	8b 81       	ldd	r24, Y+3	; 0x03
     444:	28 2f       	mov	r18, r24
     446:	22 95       	swap	r18
     448:	22 0f       	add	r18, r18
     44a:	20 7e       	andi	r18, 0xE0	; 224
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	9c 81       	ldd	r25, Y+4	; 0x04
     450:	ad 81       	ldd	r26, Y+5	; 0x05
     452:	be 81       	ldd	r27, Y+6	; 0x06
     454:	07 2e       	mov	r0, r23
     456:	7b e1       	ldi	r23, 0x1B	; 27
     458:	b6 95       	lsr	r27
     45a:	a7 95       	ror	r26
     45c:	97 95       	ror	r25
     45e:	87 95       	ror	r24
     460:	7a 95       	dec	r23
     462:	d1 f7       	brne	.-12     	; 0x458 <sendCANmsg+0x92>
     464:	70 2d       	mov	r23, r0
     466:	82 2b       	or	r24, r18
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id>>19));
     46e:	8b 81       	ldd	r24, Y+3	; 0x03
     470:	9c 81       	ldd	r25, Y+4	; 0x04
     472:	ad 81       	ldd	r26, Y+5	; 0x05
     474:	be 81       	ldd	r27, Y+6	; 0x06
     476:	07 2e       	mov	r0, r23
     478:	73 e1       	ldi	r23, 0x13	; 19
     47a:	b6 95       	lsr	r27
     47c:	a7 95       	ror	r26
     47e:	97 95       	ror	r25
     480:	87 95       	ror	r24
     482:	7a 95       	dec	r23
     484:	d1 f7       	brne	.-12     	; 0x47a <sendCANmsg+0xb4>
     486:	70 2d       	mov	r23, r0
     488:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id>>11));
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	9c 81       	ldd	r25, Y+4	; 0x04
     490:	ad 81       	ldd	r26, Y+5	; 0x05
     492:	be 81       	ldd	r27, Y+6	; 0x06
     494:	07 2e       	mov	r0, r23
     496:	7b e0       	ldi	r23, 0x0B	; 11
     498:	b6 95       	lsr	r27
     49a:	a7 95       	ror	r26
     49c:	97 95       	ror	r25
     49e:	87 95       	ror	r24
     4a0:	7a 95       	dec	r23
     4a2:	d1 f7       	brne	.-12     	; 0x498 <sendCANmsg+0xd2>
     4a4:	70 2d       	mov	r23, r0
     4a6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
     4aa:	14 c0       	rjmp	.+40     	; 0x4d4 <sendCANmsg+0x10e>
	 } else {
	 spiMasterTRANSMIT((unsigned char)(id>>3));
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	9c 81       	ldd	r25, Y+4	; 0x04
     4b0:	ad 81       	ldd	r26, Y+5	; 0x05
     4b2:	be 81       	ldd	r27, Y+6	; 0x06
     4b4:	68 94       	set
     4b6:	12 f8       	bld	r1, 2
     4b8:	b6 95       	lsr	r27
     4ba:	a7 95       	ror	r26
     4bc:	97 95       	ror	r25
     4be:	87 95       	ror	r24
     4c0:	16 94       	lsr	r1
     4c2:	d1 f7       	brne	.-12     	; 0x4b8 <sendCANmsg+0xf2>
     4c4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id<<5));
     4c8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ca:	82 95       	swap	r24
     4cc:	88 0f       	add	r24, r24
     4ce:	80 7e       	andi	r24, 0xE0	; 224
     4d0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 }
	 /* Setup message length and RTR bit */
	 spiMasterTRANSMIT((prop & 0x0F) | ((prop & 0x20) ? (1 << RTR) : 0));
     4d4:	89 85       	ldd	r24, Y+9	; 0x09
     4d6:	28 2f       	mov	r18, r24
     4d8:	2f 70       	andi	r18, 0x0F	; 15
     4da:	89 85       	ldd	r24, Y+9	; 0x09
     4dc:	88 2f       	mov	r24, r24
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	80 72       	andi	r24, 0x20	; 32
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	00 97       	sbiw	r24, 0x00	; 0
     4e6:	11 f0       	breq	.+4      	; 0x4ec <sendCANmsg+0x126>
     4e8:	80 e4       	ldi	r24, 0x40	; 64
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <sendCANmsg+0x128>
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	82 2b       	or	r24, r18
     4f0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	/* Store the message into the buffer */
	 for(unsigned char i = 0; i < (prop & 0x0F); i++)
     4f4:	19 82       	std	Y+1, r1	; 0x01
     4f6:	0e c0       	rjmp	.+28     	; 0x514 <sendCANmsg+0x14e>
	 spiMasterTRANSMIT(data[i]);
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	88 2f       	mov	r24, r24
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	2f 81       	ldd	r18, Y+7	; 0x07
     500:	38 85       	ldd	r19, Y+8	; 0x08
     502:	82 0f       	add	r24, r18
     504:	93 1f       	adc	r25, r19
     506:	fc 01       	movw	r30, r24
     508:	80 81       	ld	r24, Z
     50a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id<<5));
	 }
	 /* Setup message length and RTR bit */
	 spiMasterTRANSMIT((prop & 0x0F) | ((prop & 0x20) ? (1 << RTR) : 0));
	/* Store the message into the buffer */
	 for(unsigned char i = 0; i < (prop & 0x0F); i++)
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	8f 5f       	subi	r24, 0xFF	; 255
     512:	89 83       	std	Y+1, r24	; 0x01
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	28 2f       	mov	r18, r24
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	89 85       	ldd	r24, Y+9	; 0x09
     51c:	88 2f       	mov	r24, r24
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	8f 70       	andi	r24, 0x0F	; 15
     522:	90 70       	andi	r25, 0x00	; 0
     524:	28 17       	cp	r18, r24
     526:	39 07       	cpc	r19, r25
     528:	3c f3       	brlt	.-50     	; 0x4f8 <sendCANmsg+0x132>
	 spiMasterTRANSMIT(data[i]);
	/* Release the bus */
	 spiMasterChipSelect(0);
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	0e 94 16 03 	call	0x62c	; 0x62c <spiMasterChipSelect>
	/* Send request to send */
	 sendRTS(bi);
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
     536:	80 e8       	ldi	r24, 0x80	; 128
     538:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
     53c:	8a 81       	ldd	r24, Y+2	; 0x02
     53e:	88 2f       	mov	r24, r24
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	03 96       	adiw	r24, 0x03	; 3
     544:	82 95       	swap	r24
     546:	80 7f       	andi	r24, 0xF0	; 240
     548:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
}
     54c:	29 96       	adiw	r28, 0x09	; 9
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	0f 91       	pop	r16
     55e:	08 95       	ret

00000560 <interruptMCP2515>:

void interruptMCP2515(void)
{
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	df 93       	push	r29
     566:	cf 93       	push	r28
     568:	0f 92       	push	r0
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
	 
	 /* Copy the message from the device and release buffer */
	 spiMasterTRANSMIT(READ_INSTRUCTION);
     56e:	83 e0       	ldi	r24, 0x03	; 3
     570:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(RXBnCTRL(0));
     574:	80 e6       	ldi	r24, 0x60	; 96
     576:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
	 /* Make the local copy */
	 for(unsigned char i=0; i < 14; i++)
     57a:	19 82       	std	Y+1, r1	; 0x01
     57c:	0f c0       	rjmp	.+30     	; 0x59c <interruptMCP2515+0x3c>
	 rbuffer[i] = spiMasterTRANSMIT(0);
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	08 2f       	mov	r16, r24
     582:	10 e0       	ldi	r17, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <spiMasterTRANSMIT>
     58a:	28 2f       	mov	r18, r24
     58c:	c8 01       	movw	r24, r16
     58e:	84 5f       	subi	r24, 0xF4	; 244
     590:	9d 4f       	sbci	r25, 0xFD	; 253
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
	 
	 /* Copy the message from the device and release buffer */
	 spiMasterTRANSMIT(READ_INSTRUCTION);
	 spiMasterTRANSMIT(RXBnCTRL(0));
	 /* Make the local copy */
	 for(unsigned char i=0; i < 14; i++)
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	89 83       	std	Y+1, r24	; 0x01
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	8e 30       	cpi	r24, 0x0E	; 14
     5a0:	70 f3       	brcs	.-36     	; 0x57e <interruptMCP2515+0x1e>
	 rbuffer[i] = spiMasterTRANSMIT(0);
	 
	msgReceived  = rbuffer;
     5a2:	8c e0       	ldi	r24, 0x0C	; 12
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	90 93 09 02 	sts	0x0209, r25
     5aa:	80 93 08 02 	sts	0x0208, r24
     5ae:	0f 90       	pop	r0
     5b0:	cf 91       	pop	r28
     5b2:	df 91       	pop	r29
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	08 95       	ret

000005ba <spiMasterINIT>:
 *
 * \warning This is platform-dependent method!
 *
 */
void spiMasterINIT()
{
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	 DDR_SPI = (1<<PIN_MOSI)|(1<<PIN_SCK)|(1<<PIN_SS);
     5c2:	84 e2       	ldi	r24, 0x24	; 36
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	2c e2       	ldi	r18, 0x2C	; 44
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18
	 PORT_SPI |= (1 << PIN_SS);
     5cc:	85 e2       	ldi	r24, 0x25	; 37
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	25 e2       	ldi	r18, 0x25	; 37
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	24 60       	ori	r18, 0x04	; 4
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
	/* Enable SPI, Master, set clock rate fck/4, mode 0,0 */
	 SPCR = (1<<SPE) | (1<<MSTR);
     5de:	8c e4       	ldi	r24, 0x4C	; 76
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	20 e5       	ldi	r18, 0x50	; 80
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18
	 SPSR = (1<<SPI2X);
     5e8:	8d e4       	ldi	r24, 0x4D	; 77
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	21 e0       	ldi	r18, 0x01	; 1
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
}
     5f2:	cf 91       	pop	r28
     5f4:	df 91       	pop	r29
     5f6:	08 95       	ret

000005f8 <spiMasterTRANSMIT>:
 * \param data[] Source data array
 * \param length Array length
 *
 */
unsigned char spiMasterTRANSMIT(unsigned char data)
{
     5f8:	df 93       	push	r29
     5fa:	cf 93       	push	r28
     5fc:	0f 92       	push	r0
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	 SPDR = data;
     604:	8e e4       	ldi	r24, 0x4E	; 78
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	29 81       	ldd	r18, Y+1	; 0x01
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
	/* Wait for transmission complete */
	 while(!(SPSR & (1<<SPIF)));
     60e:	00 00       	nop
     610:	8d e4       	ldi	r24, 0x4D	; 77
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	fc 01       	movw	r30, r24
     616:	80 81       	ld	r24, Z
     618:	88 23       	and	r24, r24
     61a:	d4 f7       	brge	.-12     	; 0x610 <spiMasterTRANSMIT+0x18>
	/* SPDR must be stored as quickly
	 as possible (ref. ATMegaX ds) */
	 return SPDR;
     61c:	8e e4       	ldi	r24, 0x4E	; 78
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	fc 01       	movw	r30, r24
     622:	80 81       	ld	r24, Z
}
     624:	0f 90       	pop	r0
     626:	cf 91       	pop	r28
     628:	df 91       	pop	r29
     62a:	08 95       	ret

0000062c <spiMasterChipSelect>:
 *
 * \warning This is platform-dependent method!
 * \param state Wished state
 */
void spiMasterChipSelect(unsigned char state)
{
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	0f 92       	push	r0
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	89 83       	std	Y+1, r24	; 0x01
	/* What the user wants? (remember that the CS signal is inverted) */
	 if(!state) {
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	88 23       	and	r24, r24
     63c:	99 f4       	brne	.+38     	; 0x664 <spiMasterChipSelect+0x38>
	 /* Upper the CS pin */
	 PORT_SPI |= (1<<PIN_SS);
     63e:	85 e2       	ldi	r24, 0x25	; 37
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	25 e2       	ldi	r18, 0x25	; 37
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	f9 01       	movw	r30, r18
     648:	20 81       	ld	r18, Z
     64a:	24 60       	ori	r18, 0x04	; 4
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18
	 DDR_SPI |= (1<<PIN_SS);
     650:	84 e2       	ldi	r24, 0x24	; 36
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	24 e2       	ldi	r18, 0x24	; 36
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	f9 01       	movw	r30, r18
     65a:	20 81       	ld	r18, Z
     65c:	24 60       	ori	r18, 0x04	; 4
     65e:	fc 01       	movw	r30, r24
     660:	20 83       	st	Z, r18
     662:	12 c0       	rjmp	.+36     	; 0x688 <spiMasterChipSelect+0x5c>
	 } else {
	 /* Lower the CS pin */
	 PORT_SPI &= ~(1<<PIN_SS);
     664:	85 e2       	ldi	r24, 0x25	; 37
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	25 e2       	ldi	r18, 0x25	; 37
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	f9 01       	movw	r30, r18
     66e:	20 81       	ld	r18, Z
     670:	2b 7f       	andi	r18, 0xFB	; 251
     672:	fc 01       	movw	r30, r24
     674:	20 83       	st	Z, r18
	 DDR_SPI |= (1<<PIN_SS);
     676:	84 e2       	ldi	r24, 0x24	; 36
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	24 e2       	ldi	r18, 0x24	; 36
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	f9 01       	movw	r30, r18
     680:	20 81       	ld	r18, Z
     682:	24 60       	ori	r18, 0x04	; 4
     684:	fc 01       	movw	r30, r24
     686:	20 83       	st	Z, r18
	 }
}
     688:	0f 90       	pop	r0
     68a:	cf 91       	pop	r28
     68c:	df 91       	pop	r29
     68e:	08 95       	ret

00000690 <extInterruptINIT>:
/** Initialization of hardware ext. interrupts
 * \param *handler pointer to a function which handle occured interrupt.
 * \return nothing
 */
void extInterruptINIT(void (*handler)(void))
{
     690:	df 93       	push	r29
     692:	cf 93       	push	r28
     694:	00 d0       	rcall	.+0      	; 0x696 <extInterruptINIT+0x6>
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	9a 83       	std	Y+2, r25	; 0x02
     69c:	89 83       	std	Y+1, r24	; 0x01
	/* Set function pointer */
	 int_handler = handler;
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	90 93 1b 02 	sts	0x021B, r25
     6a6:	80 93 1a 02 	sts	0x021A, r24
	/* Initialize external interrupt on pin INT0 on failing edge */
	 EICRA |= (1 << ISC01);
     6aa:	89 e6       	ldi	r24, 0x69	; 105
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	29 e6       	ldi	r18, 0x69	; 105
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	f9 01       	movw	r30, r18
     6b4:	20 81       	ld	r18, Z
     6b6:	22 60       	ori	r18, 0x02	; 2
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18
	 EIMSK |= (1 << INT0);
     6bc:	8d e3       	ldi	r24, 0x3D	; 61
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	2d e3       	ldi	r18, 0x3D	; 61
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	f9 01       	movw	r30, r18
     6c6:	20 81       	ld	r18, Z
     6c8:	21 60       	ori	r18, 0x01	; 1
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18
}
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	cf 91       	pop	r28
     6d4:	df 91       	pop	r29
     6d6:	08 95       	ret

000006d8 <__vector_1>:
/* System interrupt handler */
ISR(INT0_vect)
{
     6d8:	1f 92       	push	r1
     6da:	0f 92       	push	r0
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	0f 92       	push	r0
     6e0:	11 24       	eor	r1, r1
     6e2:	2f 93       	push	r18
     6e4:	3f 93       	push	r19
     6e6:	4f 93       	push	r20
     6e8:	5f 93       	push	r21
     6ea:	6f 93       	push	r22
     6ec:	7f 93       	push	r23
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
     6f6:	ef 93       	push	r30
     6f8:	ff 93       	push	r31
     6fa:	df 93       	push	r29
     6fc:	cf 93       	push	r28
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
	int_handler();
     702:	80 91 1a 02 	lds	r24, 0x021A
     706:	90 91 1b 02 	lds	r25, 0x021B
     70a:	fc 01       	movw	r30, r24
     70c:	09 95       	icall
     70e:	cf 91       	pop	r28
     710:	df 91       	pop	r29
     712:	ff 91       	pop	r31
     714:	ef 91       	pop	r30
     716:	bf 91       	pop	r27
     718:	af 91       	pop	r26
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	7f 91       	pop	r23
     720:	6f 91       	pop	r22
     722:	5f 91       	pop	r21
     724:	4f 91       	pop	r20
     726:	3f 91       	pop	r19
     728:	2f 91       	pop	r18
     72a:	0f 90       	pop	r0
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	0f 90       	pop	r0
     730:	1f 90       	pop	r1
     732:	18 95       	reti

00000734 <main>:

#include <avr/io.h>
#include "AVR_CAN.h"

int main(void)
{
     734:	df 93       	push	r29
     736:	cf 93       	push	r28
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        
		
    }
     73c:	ff cf       	rjmp	.-2      	; 0x73c <main+0x8>

0000073e <ISR>:
#define trig 1

int TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
     73e:	df 93       	push	r29
     740:	cf 93       	push	r28
     742:	00 d0       	rcall	.+0      	; 0x744 <ISR+0x6>
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	9a 83       	std	Y+2, r25	; 0x02
     74a:	89 83       	std	Y+1, r24	; 0x01
	TimerOverflow++;	/* Increment Timer Overflow count */
     74c:	80 91 0a 02 	lds	r24, 0x020A
     750:	90 91 0b 02 	lds	r25, 0x020B
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	90 93 0b 02 	sts	0x020B, r25
     75a:	80 93 0a 02 	sts	0x020A, r24
}
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	cf 91       	pop	r28
     764:	df 91       	pop	r29
     766:	08 95       	ret

00000768 <INIT_Ultrasonic>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void INIT_Ultrasonic()
{
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
	DDRB|=(1<<trig);
     770:	84 e2       	ldi	r24, 0x24	; 36
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	24 e2       	ldi	r18, 0x24	; 36
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	f9 01       	movw	r30, r18
     77a:	20 81       	ld	r18, Z
     77c:	22 60       	ori	r18, 0x02	; 2
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
	cli();
     782:	f8 94       	cli
	TIMSK1 = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
     784:	8f e6       	ldi	r24, 0x6F	; 111
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	fc 01       	movw	r30, r24
     78c:	20 83       	st	Z, r18
	TCCR1A = 0;		/* Set all bit to zero Normal operation */
     78e:	80 e8       	ldi	r24, 0x80	; 128
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	fc 01       	movw	r30, r24
     794:	10 82       	st	Z, r1
	sei();			/* Enable global interrupt */
     796:	78 94       	sei
	
}
     798:	cf 91       	pop	r28
     79a:	df 91       	pop	r29
     79c:	08 95       	ret

0000079e <Get_distance>:
double Get_distance()
{
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	df 93       	push	r29
     7a8:	cf 93       	push	r28
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	e8 97       	sbiw	r28, 0x38	; 56
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
	long count;
	double distance;
	PORTD &= (~(1 << PD3));
     7ba:	8b e2       	ldi	r24, 0x2B	; 43
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	2b e2       	ldi	r18, 0x2B	; 43
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	f9 01       	movw	r30, r18
     7c4:	20 81       	ld	r18, Z
     7c6:	27 7f       	andi	r18, 0xF7	; 247
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	a0 e0       	ldi	r26, 0x00	; 0
     7d2:	b0 e4       	ldi	r27, 0x40	; 64
     7d4:	89 87       	std	Y+9, r24	; 0x09
     7d6:	9a 87       	std	Y+10, r25	; 0x0a
     7d8:	ab 87       	std	Y+11, r26	; 0x0b
     7da:	bc 87       	std	Y+12, r27	; 0x0c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     7dc:	69 85       	ldd	r22, Y+9	; 0x09
     7de:	7a 85       	ldd	r23, Y+10	; 0x0a
     7e0:	8b 85       	ldd	r24, Y+11	; 0x0b
     7e2:	9c 85       	ldd	r25, Y+12	; 0x0c
     7e4:	2b ea       	ldi	r18, 0xAB	; 171
     7e6:	3a ea       	ldi	r19, 0xAA	; 170
     7e8:	4a ea       	ldi	r20, 0xAA	; 170
     7ea:	50 e4       	ldi	r21, 0x40	; 64
     7ec:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3>
     7f0:	dc 01       	movw	r26, r24
     7f2:	cb 01       	movw	r24, r22
     7f4:	8d 87       	std	Y+13, r24	; 0x0d
     7f6:	9e 87       	std	Y+14, r25	; 0x0e
     7f8:	af 87       	std	Y+15, r26	; 0x0f
     7fa:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     7fc:	11 e0       	ldi	r17, 0x01	; 1
     7fe:	6d 85       	ldd	r22, Y+13	; 0x0d
     800:	7e 85       	ldd	r23, Y+14	; 0x0e
     802:	8f 85       	ldd	r24, Y+15	; 0x0f
     804:	98 89       	ldd	r25, Y+16	; 0x10
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	40 e8       	ldi	r20, 0x80	; 128
     80c:	5f e3       	ldi	r21, 0x3F	; 63
     80e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__ltsf2>
     812:	88 23       	and	r24, r24
     814:	0c f0       	brlt	.+2      	; 0x818 <Get_distance+0x7a>
     816:	10 e0       	ldi	r17, 0x00	; 0
     818:	11 23       	and	r17, r17
     81a:	19 f0       	breq	.+6      	; 0x822 <Get_distance+0x84>
		__ticks = 1;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	89 8b       	std	Y+17, r24	; 0x11
     820:	a3 c0       	rjmp	.+326    	; 0x968 <__stack+0x69>
	else if (__tmp > 255)
     822:	11 e0       	ldi	r17, 0x01	; 1
     824:	6d 85       	ldd	r22, Y+13	; 0x0d
     826:	7e 85       	ldd	r23, Y+14	; 0x0e
     828:	8f 85       	ldd	r24, Y+15	; 0x0f
     82a:	98 89       	ldd	r25, Y+16	; 0x10
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	4f e7       	ldi	r20, 0x7F	; 127
     832:	53 e4       	ldi	r21, 0x43	; 67
     834:	0e 94 ab 09 	call	0x1356	; 0x1356 <__gtsf2>
     838:	18 16       	cp	r1, r24
     83a:	0c f0       	brlt	.+2      	; 0x83e <Get_distance+0xa0>
     83c:	10 e0       	ldi	r17, 0x00	; 0
     83e:	11 23       	and	r17, r17
     840:	09 f4       	brne	.+2      	; 0x844 <Get_distance+0xa6>
     842:	89 c0       	rjmp	.+274    	; 0x956 <__stack+0x57>
	{
		_delay_ms(__us / 1000.0);
     844:	69 85       	ldd	r22, Y+9	; 0x09
     846:	7a 85       	ldd	r23, Y+10	; 0x0a
     848:	8b 85       	ldd	r24, Y+11	; 0x0b
     84a:	9c 85       	ldd	r25, Y+12	; 0x0c
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	4a e7       	ldi	r20, 0x7A	; 122
     852:	54 e4       	ldi	r21, 0x44	; 68
     854:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__divsf3>
     858:	dc 01       	movw	r26, r24
     85a:	cb 01       	movw	r24, r22
     85c:	8a 8b       	std	Y+18, r24	; 0x12
     85e:	9b 8b       	std	Y+19, r25	; 0x13
     860:	ac 8b       	std	Y+20, r26	; 0x14
     862:	bd 8b       	std	Y+21, r27	; 0x15
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     864:	6a 89       	ldd	r22, Y+18	; 0x12
     866:	7b 89       	ldd	r23, Y+19	; 0x13
     868:	8c 89       	ldd	r24, Y+20	; 0x14
     86a:	9d 89       	ldd	r25, Y+21	; 0x15
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	4a e7       	ldi	r20, 0x7A	; 122
     872:	55 e4       	ldi	r21, 0x45	; 69
     874:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3>
     878:	dc 01       	movw	r26, r24
     87a:	cb 01       	movw	r24, r22
     87c:	8e 8b       	std	Y+22, r24	; 0x16
     87e:	9f 8b       	std	Y+23, r25	; 0x17
     880:	a8 8f       	std	Y+24, r26	; 0x18
     882:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     884:	11 e0       	ldi	r17, 0x01	; 1
     886:	6e 89       	ldd	r22, Y+22	; 0x16
     888:	7f 89       	ldd	r23, Y+23	; 0x17
     88a:	88 8d       	ldd	r24, Y+24	; 0x18
     88c:	99 8d       	ldd	r25, Y+25	; 0x19
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e8       	ldi	r20, 0x80	; 128
     894:	5f e3       	ldi	r21, 0x3F	; 63
     896:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__ltsf2>
     89a:	88 23       	and	r24, r24
     89c:	0c f0       	brlt	.+2      	; 0x8a0 <Get_distance+0x102>
     89e:	10 e0       	ldi	r17, 0x00	; 0
     8a0:	11 23       	and	r17, r17
     8a2:	29 f0       	breq	.+10     	; 0x8ae <Get_distance+0x110>
		__ticks = 1;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	9b 8f       	std	Y+27, r25	; 0x1b
     8aa:	8a 8f       	std	Y+26, r24	; 0x1a
     8ac:	46 c0       	rjmp	.+140    	; 0x93a <__stack+0x3b>
	else if (__tmp > 65535)
     8ae:	11 e0       	ldi	r17, 0x01	; 1
     8b0:	6e 89       	ldd	r22, Y+22	; 0x16
     8b2:	7f 89       	ldd	r23, Y+23	; 0x17
     8b4:	88 8d       	ldd	r24, Y+24	; 0x18
     8b6:	99 8d       	ldd	r25, Y+25	; 0x19
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	3f ef       	ldi	r19, 0xFF	; 255
     8bc:	4f e7       	ldi	r20, 0x7F	; 127
     8be:	57 e4       	ldi	r21, 0x47	; 71
     8c0:	0e 94 ab 09 	call	0x1356	; 0x1356 <__gtsf2>
     8c4:	18 16       	cp	r1, r24
     8c6:	0c f0       	brlt	.+2      	; 0x8ca <Get_distance+0x12c>
     8c8:	10 e0       	ldi	r17, 0x00	; 0
     8ca:	11 23       	and	r17, r17
     8cc:	61 f1       	breq	.+88     	; 0x926 <__stack+0x27>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8ce:	6a 89       	ldd	r22, Y+18	; 0x12
     8d0:	7b 89       	ldd	r23, Y+19	; 0x13
     8d2:	8c 89       	ldd	r24, Y+20	; 0x14
     8d4:	9d 89       	ldd	r25, Y+21	; 0x15
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e2       	ldi	r20, 0x20	; 32
     8dc:	51 e4       	ldi	r21, 0x41	; 65
     8de:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3>
     8e2:	dc 01       	movw	r26, r24
     8e4:	cb 01       	movw	r24, r22
     8e6:	bc 01       	movw	r22, r24
     8e8:	cd 01       	movw	r24, r26
     8ea:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fixunssfsi>
     8ee:	dc 01       	movw	r26, r24
     8f0:	cb 01       	movw	r24, r22
     8f2:	9b 8f       	std	Y+27, r25	; 0x1b
     8f4:	8a 8f       	std	Y+26, r24	; 0x1a
     8f6:	12 c0       	rjmp	.+36     	; 0x91c <__stack+0x1d>
     8f8:	80 e9       	ldi	r24, 0x90	; 144
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	9d 8f       	std	Y+29, r25	; 0x1d
     8fe:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     900:	8c 8d       	ldd	r24, Y+28	; 0x1c
     902:	9d 8d       	ldd	r25, Y+29	; 0x1d
     904:	8c 01       	movw	r16, r24
     906:	c8 01       	movw	r24, r16
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	f1 f7       	brne	.-4      	; 0x908 <__stack+0x9>
     90c:	8c 01       	movw	r16, r24
     90e:	1d 8f       	std	Y+29, r17	; 0x1d
     910:	0c 8f       	std	Y+28, r16	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     912:	8a 8d       	ldd	r24, Y+26	; 0x1a
     914:	9b 8d       	ldd	r25, Y+27	; 0x1b
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	9b 8f       	std	Y+27, r25	; 0x1b
     91a:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     91e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	51 f7       	brne	.-44     	; 0x8f8 <Get_distance+0x15a>
     924:	28 c0       	rjmp	.+80     	; 0x976 <__stack+0x77>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     926:	6e 89       	ldd	r22, Y+22	; 0x16
     928:	7f 89       	ldd	r23, Y+23	; 0x17
     92a:	88 8d       	ldd	r24, Y+24	; 0x18
     92c:	99 8d       	ldd	r25, Y+25	; 0x19
     92e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fixunssfsi>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	9b 8f       	std	Y+27, r25	; 0x1b
     938:	8a 8f       	std	Y+26, r24	; 0x1a
     93a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     93c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     93e:	9f 8f       	std	Y+31, r25	; 0x1f
     940:	8e 8f       	std	Y+30, r24	; 0x1e
     942:	8e 8d       	ldd	r24, Y+30	; 0x1e
     944:	9f 8d       	ldd	r25, Y+31	; 0x1f
     946:	8c 01       	movw	r16, r24
     948:	f8 01       	movw	r30, r16
     94a:	31 97       	sbiw	r30, 0x01	; 1
     94c:	f1 f7       	brne	.-4      	; 0x94a <__stack+0x4b>
     94e:	8f 01       	movw	r16, r30
     950:	1f 8f       	std	Y+31, r17	; 0x1f
     952:	0e 8f       	std	Y+30, r16	; 0x1e
     954:	10 c0       	rjmp	.+32     	; 0x976 <__stack+0x77>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     956:	6d 85       	ldd	r22, Y+13	; 0x0d
     958:	7e 85       	ldd	r23, Y+14	; 0x0e
     95a:	8f 85       	ldd	r24, Y+15	; 0x0f
     95c:	98 89       	ldd	r25, Y+16	; 0x10
     95e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fixunssfsi>
     962:	dc 01       	movw	r26, r24
     964:	cb 01       	movw	r24, r22
     966:	89 8b       	std	Y+17, r24	; 0x11
     968:	89 89       	ldd	r24, Y+17	; 0x11
     96a:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     96c:	88 a1       	ldd	r24, Y+32	; 0x20
     96e:	18 2f       	mov	r17, r24
     970:	1a 95       	dec	r17
     972:	f1 f7       	brne	.-4      	; 0x970 <__stack+0x71>
     974:	18 a3       	std	Y+32, r17	; 0x20
	_delay_us(2);
	PORTD |= (1 << PD3);
     976:	8b e2       	ldi	r24, 0x2B	; 43
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	2b e2       	ldi	r18, 0x2B	; 43
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	f9 01       	movw	r30, r18
     980:	20 81       	ld	r18, Z
     982:	28 60       	ori	r18, 0x08	; 8
     984:	fc 01       	movw	r30, r24
     986:	20 83       	st	Z, r18
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	a0 e2       	ldi	r26, 0x20	; 32
     98e:	b1 e4       	ldi	r27, 0x41	; 65
     990:	89 a3       	std	Y+33, r24	; 0x21
     992:	9a a3       	std	Y+34, r25	; 0x22
     994:	ab a3       	std	Y+35, r26	; 0x23
     996:	bc a3       	std	Y+36, r27	; 0x24
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     998:	69 a1       	ldd	r22, Y+33	; 0x21
     99a:	7a a1       	ldd	r23, Y+34	; 0x22
     99c:	8b a1       	ldd	r24, Y+35	; 0x23
     99e:	9c a1       	ldd	r25, Y+36	; 0x24
     9a0:	2b ea       	ldi	r18, 0xAB	; 171
     9a2:	3a ea       	ldi	r19, 0xAA	; 170
     9a4:	4a ea       	ldi	r20, 0xAA	; 170
     9a6:	50 e4       	ldi	r21, 0x40	; 64
     9a8:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3>
     9ac:	dc 01       	movw	r26, r24
     9ae:	cb 01       	movw	r24, r22
     9b0:	8d a3       	std	Y+37, r24	; 0x25
     9b2:	9e a3       	std	Y+38, r25	; 0x26
     9b4:	af a3       	std	Y+39, r26	; 0x27
     9b6:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     9b8:	11 e0       	ldi	r17, 0x01	; 1
     9ba:	6d a1       	ldd	r22, Y+37	; 0x25
     9bc:	7e a1       	ldd	r23, Y+38	; 0x26
     9be:	8f a1       	ldd	r24, Y+39	; 0x27
     9c0:	98 a5       	ldd	r25, Y+40	; 0x28
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e8       	ldi	r20, 0x80	; 128
     9c8:	5f e3       	ldi	r21, 0x3F	; 63
     9ca:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__ltsf2>
     9ce:	88 23       	and	r24, r24
     9d0:	0c f0       	brlt	.+2      	; 0x9d4 <__stack+0xd5>
     9d2:	10 e0       	ldi	r17, 0x00	; 0
     9d4:	11 23       	and	r17, r17
     9d6:	19 f0       	breq	.+6      	; 0x9de <__stack+0xdf>
		__ticks = 1;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	89 a7       	std	Y+41, r24	; 0x29
     9dc:	a3 c0       	rjmp	.+326    	; 0xb24 <__stack+0x225>
	else if (__tmp > 255)
     9de:	11 e0       	ldi	r17, 0x01	; 1
     9e0:	6d a1       	ldd	r22, Y+37	; 0x25
     9e2:	7e a1       	ldd	r23, Y+38	; 0x26
     9e4:	8f a1       	ldd	r24, Y+39	; 0x27
     9e6:	98 a5       	ldd	r25, Y+40	; 0x28
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	4f e7       	ldi	r20, 0x7F	; 127
     9ee:	53 e4       	ldi	r21, 0x43	; 67
     9f0:	0e 94 ab 09 	call	0x1356	; 0x1356 <__gtsf2>
     9f4:	18 16       	cp	r1, r24
     9f6:	0c f0       	brlt	.+2      	; 0x9fa <__stack+0xfb>
     9f8:	10 e0       	ldi	r17, 0x00	; 0
     9fa:	11 23       	and	r17, r17
     9fc:	09 f4       	brne	.+2      	; 0xa00 <__stack+0x101>
     9fe:	89 c0       	rjmp	.+274    	; 0xb12 <__stack+0x213>
	{
		_delay_ms(__us / 1000.0);
     a00:	69 a1       	ldd	r22, Y+33	; 0x21
     a02:	7a a1       	ldd	r23, Y+34	; 0x22
     a04:	8b a1       	ldd	r24, Y+35	; 0x23
     a06:	9c a1       	ldd	r25, Y+36	; 0x24
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	4a e7       	ldi	r20, 0x7A	; 122
     a0e:	54 e4       	ldi	r21, 0x44	; 68
     a10:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__divsf3>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	8a a7       	std	Y+42, r24	; 0x2a
     a1a:	9b a7       	std	Y+43, r25	; 0x2b
     a1c:	ac a7       	std	Y+44, r26	; 0x2c
     a1e:	bd a7       	std	Y+45, r27	; 0x2d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     a20:	6a a5       	ldd	r22, Y+42	; 0x2a
     a22:	7b a5       	ldd	r23, Y+43	; 0x2b
     a24:	8c a5       	ldd	r24, Y+44	; 0x2c
     a26:	9d a5       	ldd	r25, Y+45	; 0x2d
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	4a e7       	ldi	r20, 0x7A	; 122
     a2e:	55 e4       	ldi	r21, 0x45	; 69
     a30:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	8e a7       	std	Y+46, r24	; 0x2e
     a3a:	9f a7       	std	Y+47, r25	; 0x2f
     a3c:	a8 ab       	std	Y+48, r26	; 0x30
     a3e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     a40:	11 e0       	ldi	r17, 0x01	; 1
     a42:	6e a5       	ldd	r22, Y+46	; 0x2e
     a44:	7f a5       	ldd	r23, Y+47	; 0x2f
     a46:	88 a9       	ldd	r24, Y+48	; 0x30
     a48:	99 a9       	ldd	r25, Y+49	; 0x31
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e8       	ldi	r20, 0x80	; 128
     a50:	5f e3       	ldi	r21, 0x3F	; 63
     a52:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__ltsf2>
     a56:	88 23       	and	r24, r24
     a58:	0c f0       	brlt	.+2      	; 0xa5c <__stack+0x15d>
     a5a:	10 e0       	ldi	r17, 0x00	; 0
     a5c:	11 23       	and	r17, r17
     a5e:	29 f0       	breq	.+10     	; 0xa6a <__stack+0x16b>
		__ticks = 1;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	9b ab       	std	Y+51, r25	; 0x33
     a66:	8a ab       	std	Y+50, r24	; 0x32
     a68:	46 c0       	rjmp	.+140    	; 0xaf6 <__stack+0x1f7>
	else if (__tmp > 65535)
     a6a:	11 e0       	ldi	r17, 0x01	; 1
     a6c:	6e a5       	ldd	r22, Y+46	; 0x2e
     a6e:	7f a5       	ldd	r23, Y+47	; 0x2f
     a70:	88 a9       	ldd	r24, Y+48	; 0x30
     a72:	99 a9       	ldd	r25, Y+49	; 0x31
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	3f ef       	ldi	r19, 0xFF	; 255
     a78:	4f e7       	ldi	r20, 0x7F	; 127
     a7a:	57 e4       	ldi	r21, 0x47	; 71
     a7c:	0e 94 ab 09 	call	0x1356	; 0x1356 <__gtsf2>
     a80:	18 16       	cp	r1, r24
     a82:	0c f0       	brlt	.+2      	; 0xa86 <__stack+0x187>
     a84:	10 e0       	ldi	r17, 0x00	; 0
     a86:	11 23       	and	r17, r17
     a88:	61 f1       	breq	.+88     	; 0xae2 <__stack+0x1e3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a8a:	6a a5       	ldd	r22, Y+42	; 0x2a
     a8c:	7b a5       	ldd	r23, Y+43	; 0x2b
     a8e:	8c a5       	ldd	r24, Y+44	; 0x2c
     a90:	9d a5       	ldd	r25, Y+45	; 0x2d
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	40 e2       	ldi	r20, 0x20	; 32
     a98:	51 e4       	ldi	r21, 0x41	; 65
     a9a:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3>
     a9e:	dc 01       	movw	r26, r24
     aa0:	cb 01       	movw	r24, r22
     aa2:	bc 01       	movw	r22, r24
     aa4:	cd 01       	movw	r24, r26
     aa6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fixunssfsi>
     aaa:	dc 01       	movw	r26, r24
     aac:	cb 01       	movw	r24, r22
     aae:	9b ab       	std	Y+51, r25	; 0x33
     ab0:	8a ab       	std	Y+50, r24	; 0x32
     ab2:	12 c0       	rjmp	.+36     	; 0xad8 <__stack+0x1d9>
     ab4:	80 e9       	ldi	r24, 0x90	; 144
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	9d ab       	std	Y+53, r25	; 0x35
     aba:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     abc:	8c a9       	ldd	r24, Y+52	; 0x34
     abe:	9d a9       	ldd	r25, Y+53	; 0x35
     ac0:	8c 01       	movw	r16, r24
     ac2:	c8 01       	movw	r24, r16
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <__stack+0x1c5>
     ac8:	8c 01       	movw	r16, r24
     aca:	1d ab       	std	Y+53, r17	; 0x35
     acc:	0c ab       	std	Y+52, r16	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ace:	8a a9       	ldd	r24, Y+50	; 0x32
     ad0:	9b a9       	ldd	r25, Y+51	; 0x33
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	9b ab       	std	Y+51, r25	; 0x33
     ad6:	8a ab       	std	Y+50, r24	; 0x32
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad8:	8a a9       	ldd	r24, Y+50	; 0x32
     ada:	9b a9       	ldd	r25, Y+51	; 0x33
     adc:	00 97       	sbiw	r24, 0x00	; 0
     ade:	51 f7       	brne	.-44     	; 0xab4 <__stack+0x1b5>
     ae0:	28 c0       	rjmp	.+80     	; 0xb32 <__stack+0x233>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ae2:	6e a5       	ldd	r22, Y+46	; 0x2e
     ae4:	7f a5       	ldd	r23, Y+47	; 0x2f
     ae6:	88 a9       	ldd	r24, Y+48	; 0x30
     ae8:	99 a9       	ldd	r25, Y+49	; 0x31
     aea:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fixunssfsi>
     aee:	dc 01       	movw	r26, r24
     af0:	cb 01       	movw	r24, r22
     af2:	9b ab       	std	Y+51, r25	; 0x33
     af4:	8a ab       	std	Y+50, r24	; 0x32
     af6:	8a a9       	ldd	r24, Y+50	; 0x32
     af8:	9b a9       	ldd	r25, Y+51	; 0x33
     afa:	9f ab       	std	Y+55, r25	; 0x37
     afc:	8e ab       	std	Y+54, r24	; 0x36
     afe:	8e a9       	ldd	r24, Y+54	; 0x36
     b00:	9f a9       	ldd	r25, Y+55	; 0x37
     b02:	8c 01       	movw	r16, r24
     b04:	f8 01       	movw	r30, r16
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	f1 f7       	brne	.-4      	; 0xb06 <__stack+0x207>
     b0a:	8f 01       	movw	r16, r30
     b0c:	1f ab       	std	Y+55, r17	; 0x37
     b0e:	0e ab       	std	Y+54, r16	; 0x36
     b10:	10 c0       	rjmp	.+32     	; 0xb32 <__stack+0x233>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b12:	6d a1       	ldd	r22, Y+37	; 0x25
     b14:	7e a1       	ldd	r23, Y+38	; 0x26
     b16:	8f a1       	ldd	r24, Y+39	; 0x27
     b18:	98 a5       	ldd	r25, Y+40	; 0x28
     b1a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fixunssfsi>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	89 a7       	std	Y+41, r24	; 0x29
     b24:	89 a5       	ldd	r24, Y+41	; 0x29
     b26:	88 af       	std	Y+56, r24	; 0x38
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b28:	88 ad       	ldd	r24, Y+56	; 0x38
     b2a:	18 2f       	mov	r17, r24
     b2c:	1a 95       	dec	r17
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <__stack+0x22d>
     b30:	18 af       	std	Y+56, r17	; 0x38
	_delay_us(10);
	PORTD &= (~(1 << PD3));
     b32:	8b e2       	ldi	r24, 0x2B	; 43
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	2b e2       	ldi	r18, 0x2B	; 43
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	f9 01       	movw	r30, r18
     b3c:	20 81       	ld	r18, Z
     b3e:	27 7f       	andi	r18, 0xF7	; 247
     b40:	fc 01       	movw	r30, r24
     b42:	20 83       	st	Z, r18
	TCNT1 = 0;   	// Clear Timer counter 
     b44:	84 e8       	ldi	r24, 0x84	; 132
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	fc 01       	movw	r30, r24
     b4a:	11 82       	std	Z+1, r1	; 0x01
     b4c:	10 82       	st	Z, r1
	TCCR1B = 0x41;	// Capture on rising edge, No prescaler
     b4e:	81 e8       	ldi	r24, 0x81	; 129
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	21 e4       	ldi	r18, 0x41	; 65
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18
	TIFR1 = 1<<ICF1;	// Clear ICP flag (Input Capture flag) 
     b58:	86 e3       	ldi	r24, 0x36	; 54
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	20 e2       	ldi	r18, 0x20	; 32
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
	TIFR1 = 1<<TOV1;	// Clear Timer Overflow flag 
     b62:	86 e3       	ldi	r24, 0x36	; 54
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	21 e0       	ldi	r18, 0x01	; 1
     b68:	fc 01       	movw	r30, r24
     b6a:	20 83       	st	Z, r18

	/*Calculate width of Echo by Input Capture (ICP) */
		
	while ((TIFR1 & (1 << ICF1)) == 0);/* Wait for rising edge */
     b6c:	00 00       	nop
     b6e:	86 e3       	ldi	r24, 0x36	; 54
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	fc 01       	movw	r30, r24
     b74:	80 81       	ld	r24, Z
     b76:	88 2f       	mov	r24, r24
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	80 72       	andi	r24, 0x20	; 32
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	b1 f3       	breq	.-20     	; 0xb6e <__stack+0x26f>
	TCNT1 = 0;	    /* Clear Timer counter */
     b82:	84 e8       	ldi	r24, 0x84	; 132
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	fc 01       	movw	r30, r24
     b88:	11 82       	std	Z+1, r1	; 0x01
     b8a:	10 82       	st	Z, r1
	TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
     b8c:	81 e8       	ldi	r24, 0x81	; 129
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	21 e0       	ldi	r18, 0x01	; 1
     b92:	fc 01       	movw	r30, r24
     b94:	20 83       	st	Z, r18
	TIFR1 = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
     b96:	86 e3       	ldi	r24, 0x36	; 54
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	20 e2       	ldi	r18, 0x20	; 32
     b9c:	fc 01       	movw	r30, r24
     b9e:	20 83       	st	Z, r18
	TIFR1 = 1<<TOV1;	/* Clear Timer Overflow flag */
     ba0:	86 e3       	ldi	r24, 0x36	; 54
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	21 e0       	ldi	r18, 0x01	; 1
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18
	TimerOverflow = 0;/* Clear Timer overflow count */
     baa:	10 92 0b 02 	sts	0x020B, r1
     bae:	10 92 0a 02 	sts	0x020A, r1

	while ((TIFR1 & (1 << ICF1)) == 0);/* Wait for falling edge */
     bb2:	00 00       	nop
     bb4:	86 e3       	ldi	r24, 0x36	; 54
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	fc 01       	movw	r30, r24
     bba:	80 81       	ld	r24, Z
     bbc:	88 2f       	mov	r24, r24
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	80 72       	andi	r24, 0x20	; 32
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	00 97       	sbiw	r24, 0x00	; 0
     bc6:	b1 f3       	breq	.-20     	; 0xbb4 <__stack+0x2b5>
	count = ICR1 + (65535 * TimerOverflow);	/* Take count */
     bc8:	86 e8       	ldi	r24, 0x86	; 134
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	fc 01       	movw	r30, r24
     bce:	80 81       	ld	r24, Z
     bd0:	91 81       	ldd	r25, Z+1	; 0x01
     bd2:	7c 01       	movw	r14, r24
     bd4:	00 e0       	ldi	r16, 0x00	; 0
     bd6:	10 e0       	ldi	r17, 0x00	; 0
     bd8:	80 91 0a 02 	lds	r24, 0x020A
     bdc:	90 91 0b 02 	lds	r25, 0x020B
     be0:	aa 27       	eor	r26, r26
     be2:	97 fd       	sbrc	r25, 7
     be4:	a0 95       	com	r26
     be6:	ba 2f       	mov	r27, r26
     be8:	2f ef       	ldi	r18, 0xFF	; 255
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__mulsi3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	8e 0d       	add	r24, r14
     bfe:	9f 1d       	adc	r25, r15
     c00:	a0 1f       	adc	r26, r16
     c02:	b1 1f       	adc	r27, r17
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	ab 83       	std	Y+3, r26	; 0x03
     c0a:	bc 83       	std	Y+4, r27	; 0x04
	/* 16MHz Timer freq, sound speed =343 m/s */
	distance = (double)count / 932.94;
     c0c:	69 81       	ldd	r22, Y+1	; 0x01
     c0e:	7a 81       	ldd	r23, Y+2	; 0x02
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__floatsisf>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	bc 01       	movw	r22, r24
     c1e:	cd 01       	movw	r24, r26
     c20:	29 e2       	ldi	r18, 0x29	; 41
     c22:	3c e3       	ldi	r19, 0x3C	; 60
     c24:	49 e6       	ldi	r20, 0x69	; 105
     c26:	54 e4       	ldi	r21, 0x44	; 68
     c28:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__divsf3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	8d 83       	std	Y+5, r24	; 0x05
     c32:	9e 83       	std	Y+6, r25	; 0x06
     c34:	af 83       	std	Y+7, r26	; 0x07
     c36:	b8 87       	std	Y+8, r27	; 0x08
	return distance;	
     c38:	8d 81       	ldd	r24, Y+5	; 0x05
     c3a:	9e 81       	ldd	r25, Y+6	; 0x06
     c3c:	af 81       	ldd	r26, Y+7	; 0x07
     c3e:	b8 85       	ldd	r27, Y+8	; 0x08
}
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	e8 96       	adiw	r28, 0x38	; 56
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	08 95       	ret

00000c5e <__fixunssfsi>:
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	7b 01       	movw	r14, r22
     c68:	8c 01       	movw	r16, r24
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	5f e4       	ldi	r21, 0x4F	; 79
     c72:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__gesf2>
     c76:	87 fd       	sbrc	r24, 7
     c78:	11 c0       	rjmp	.+34     	; 0xc9c <__fixunssfsi+0x3e>
     c7a:	c8 01       	movw	r24, r16
     c7c:	b7 01       	movw	r22, r14
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	40 e0       	ldi	r20, 0x00	; 0
     c84:	5f e4       	ldi	r21, 0x4F	; 79
     c86:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__subsf3>
     c8a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fixsfsi>
     c8e:	9b 01       	movw	r18, r22
     c90:	ac 01       	movw	r20, r24
     c92:	20 50       	subi	r18, 0x00	; 0
     c94:	30 40       	sbci	r19, 0x00	; 0
     c96:	40 40       	sbci	r20, 0x00	; 0
     c98:	50 48       	sbci	r21, 0x80	; 128
     c9a:	06 c0       	rjmp	.+12     	; 0xca8 <__fixunssfsi+0x4a>
     c9c:	c8 01       	movw	r24, r16
     c9e:	b7 01       	movw	r22, r14
     ca0:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fixsfsi>
     ca4:	9b 01       	movw	r18, r22
     ca6:	ac 01       	movw	r20, r24
     ca8:	b9 01       	movw	r22, r18
     caa:	ca 01       	movw	r24, r20
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	08 95       	ret

00000cb6 <_fpadd_parts>:
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e1 e6       	ldi	r30, 0x61	; 97
     cbc:	f6 e0       	ldi	r31, 0x06	; 6
     cbe:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__prologue_saves__+0x8>
     cc2:	fc 01       	movw	r30, r24
     cc4:	ea 01       	movw	r28, r20
     cc6:	80 81       	ld	r24, Z
     cc8:	82 30       	cpi	r24, 0x02	; 2
     cca:	08 f4       	brcc	.+2      	; 0xcce <_fpadd_parts+0x18>
     ccc:	38 c1       	rjmp	.+624    	; 0xf3e <_fpadd_parts+0x288>
     cce:	db 01       	movw	r26, r22
     cd0:	9c 91       	ld	r25, X
     cd2:	92 30       	cpi	r25, 0x02	; 2
     cd4:	08 f4       	brcc	.+2      	; 0xcd8 <_fpadd_parts+0x22>
     cd6:	30 c1       	rjmp	.+608    	; 0xf38 <_fpadd_parts+0x282>
     cd8:	84 30       	cpi	r24, 0x04	; 4
     cda:	59 f4       	brne	.+22     	; 0xcf2 <_fpadd_parts+0x3c>
     cdc:	94 30       	cpi	r25, 0x04	; 4
     cde:	09 f0       	breq	.+2      	; 0xce2 <_fpadd_parts+0x2c>
     ce0:	2e c1       	rjmp	.+604    	; 0xf3e <_fpadd_parts+0x288>
     ce2:	91 81       	ldd	r25, Z+1	; 0x01
     ce4:	11 96       	adiw	r26, 0x01	; 1
     ce6:	8c 91       	ld	r24, X
     ce8:	11 97       	sbiw	r26, 0x01	; 1
     cea:	98 17       	cp	r25, r24
     cec:	09 f0       	breq	.+2      	; 0xcf0 <_fpadd_parts+0x3a>
     cee:	21 c1       	rjmp	.+578    	; 0xf32 <_fpadd_parts+0x27c>
     cf0:	26 c1       	rjmp	.+588    	; 0xf3e <_fpadd_parts+0x288>
     cf2:	94 30       	cpi	r25, 0x04	; 4
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <_fpadd_parts+0x42>
     cf6:	20 c1       	rjmp	.+576    	; 0xf38 <_fpadd_parts+0x282>
     cf8:	92 30       	cpi	r25, 0x02	; 2
     cfa:	b1 f4       	brne	.+44     	; 0xd28 <_fpadd_parts+0x72>
     cfc:	82 30       	cpi	r24, 0x02	; 2
     cfe:	09 f0       	breq	.+2      	; 0xd02 <_fpadd_parts+0x4c>
     d00:	1e c1       	rjmp	.+572    	; 0xf3e <_fpadd_parts+0x288>
     d02:	ca 01       	movw	r24, r20
     d04:	af 01       	movw	r20, r30
     d06:	28 e0       	ldi	r18, 0x08	; 8
     d08:	da 01       	movw	r26, r20
     d0a:	0d 90       	ld	r0, X+
     d0c:	ad 01       	movw	r20, r26
     d0e:	dc 01       	movw	r26, r24
     d10:	0d 92       	st	X+, r0
     d12:	cd 01       	movw	r24, r26
     d14:	21 50       	subi	r18, 0x01	; 1
     d16:	c1 f7       	brne	.-16     	; 0xd08 <_fpadd_parts+0x52>
     d18:	db 01       	movw	r26, r22
     d1a:	11 96       	adiw	r26, 0x01	; 1
     d1c:	8c 91       	ld	r24, X
     d1e:	11 97       	sbiw	r26, 0x01	; 1
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	89 23       	and	r24, r25
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	0a c1       	rjmp	.+532    	; 0xf3c <_fpadd_parts+0x286>
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	09 f4       	brne	.+2      	; 0xd2e <_fpadd_parts+0x78>
     d2c:	05 c1       	rjmp	.+522    	; 0xf38 <_fpadd_parts+0x282>
     d2e:	c2 80       	ldd	r12, Z+2	; 0x02
     d30:	d3 80       	ldd	r13, Z+3	; 0x03
     d32:	db 01       	movw	r26, r22
     d34:	12 96       	adiw	r26, 0x02	; 2
     d36:	6d 90       	ld	r6, X+
     d38:	7c 90       	ld	r7, X
     d3a:	13 97       	sbiw	r26, 0x03	; 3
     d3c:	24 81       	ldd	r18, Z+4	; 0x04
     d3e:	35 81       	ldd	r19, Z+5	; 0x05
     d40:	46 81       	ldd	r20, Z+6	; 0x06
     d42:	57 81       	ldd	r21, Z+7	; 0x07
     d44:	14 96       	adiw	r26, 0x04	; 4
     d46:	ed 90       	ld	r14, X+
     d48:	fd 90       	ld	r15, X+
     d4a:	0d 91       	ld	r16, X+
     d4c:	1c 91       	ld	r17, X
     d4e:	17 97       	sbiw	r26, 0x07	; 7
     d50:	c6 01       	movw	r24, r12
     d52:	86 19       	sub	r24, r6
     d54:	97 09       	sbc	r25, r7
     d56:	5c 01       	movw	r10, r24
     d58:	97 ff       	sbrs	r25, 7
     d5a:	04 c0       	rjmp	.+8      	; 0xd64 <_fpadd_parts+0xae>
     d5c:	aa 24       	eor	r10, r10
     d5e:	bb 24       	eor	r11, r11
     d60:	a8 1a       	sub	r10, r24
     d62:	b9 0a       	sbc	r11, r25
     d64:	b0 e2       	ldi	r27, 0x20	; 32
     d66:	ab 16       	cp	r10, r27
     d68:	b1 04       	cpc	r11, r1
     d6a:	0c f0       	brlt	.+2      	; 0xd6e <_fpadd_parts+0xb8>
     d6c:	61 c0       	rjmp	.+194    	; 0xe30 <_fpadd_parts+0x17a>
     d6e:	18 16       	cp	r1, r24
     d70:	19 06       	cpc	r1, r25
     d72:	6c f5       	brge	.+90     	; 0xdce <_fpadd_parts+0x118>
     d74:	37 01       	movw	r6, r14
     d76:	48 01       	movw	r8, r16
     d78:	0a 2c       	mov	r0, r10
     d7a:	04 c0       	rjmp	.+8      	; 0xd84 <_fpadd_parts+0xce>
     d7c:	96 94       	lsr	r9
     d7e:	87 94       	ror	r8
     d80:	77 94       	ror	r7
     d82:	67 94       	ror	r6
     d84:	0a 94       	dec	r0
     d86:	d2 f7       	brpl	.-12     	; 0xd7c <_fpadd_parts+0xc6>
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	a0 e0       	ldi	r26, 0x00	; 0
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	0a 2c       	mov	r0, r10
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <_fpadd_parts+0xe6>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	aa 1f       	adc	r26, r26
     d9a:	bb 1f       	adc	r27, r27
     d9c:	0a 94       	dec	r0
     d9e:	d2 f7       	brpl	.-12     	; 0xd94 <_fpadd_parts+0xde>
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	a1 09       	sbc	r26, r1
     da4:	b1 09       	sbc	r27, r1
     da6:	8e 21       	and	r24, r14
     da8:	9f 21       	and	r25, r15
     daa:	a0 23       	and	r26, r16
     dac:	b1 23       	and	r27, r17
     dae:	ee 24       	eor	r14, r14
     db0:	ff 24       	eor	r15, r15
     db2:	87 01       	movw	r16, r14
     db4:	e3 94       	inc	r14
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	a1 05       	cpc	r26, r1
     dba:	b1 05       	cpc	r27, r1
     dbc:	19 f4       	brne	.+6      	; 0xdc4 <_fpadd_parts+0x10e>
     dbe:	ee 24       	eor	r14, r14
     dc0:	ff 24       	eor	r15, r15
     dc2:	87 01       	movw	r16, r14
     dc4:	e6 28       	or	r14, r6
     dc6:	f7 28       	or	r15, r7
     dc8:	08 29       	or	r16, r8
     dca:	19 29       	or	r17, r9
     dcc:	3c c0       	rjmp	.+120    	; 0xe46 <_fpadd_parts+0x190>
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	d1 f1       	breq	.+116    	; 0xe46 <_fpadd_parts+0x190>
     dd2:	ca 0c       	add	r12, r10
     dd4:	db 1c       	adc	r13, r11
     dd6:	39 01       	movw	r6, r18
     dd8:	4a 01       	movw	r8, r20
     dda:	0a 2c       	mov	r0, r10
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <_fpadd_parts+0x130>
     dde:	96 94       	lsr	r9
     de0:	87 94       	ror	r8
     de2:	77 94       	ror	r7
     de4:	67 94       	ror	r6
     de6:	0a 94       	dec	r0
     de8:	d2 f7       	brpl	.-12     	; 0xdde <_fpadd_parts+0x128>
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	a0 e0       	ldi	r26, 0x00	; 0
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	0a 2c       	mov	r0, r10
     df4:	04 c0       	rjmp	.+8      	; 0xdfe <_fpadd_parts+0x148>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	aa 1f       	adc	r26, r26
     dfc:	bb 1f       	adc	r27, r27
     dfe:	0a 94       	dec	r0
     e00:	d2 f7       	brpl	.-12     	; 0xdf6 <_fpadd_parts+0x140>
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	a1 09       	sbc	r26, r1
     e06:	b1 09       	sbc	r27, r1
     e08:	82 23       	and	r24, r18
     e0a:	93 23       	and	r25, r19
     e0c:	a4 23       	and	r26, r20
     e0e:	b5 23       	and	r27, r21
     e10:	21 e0       	ldi	r18, 0x01	; 1
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	a1 05       	cpc	r26, r1
     e1c:	b1 05       	cpc	r27, r1
     e1e:	19 f4       	brne	.+6      	; 0xe26 <_fpadd_parts+0x170>
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	a9 01       	movw	r20, r18
     e26:	26 29       	or	r18, r6
     e28:	37 29       	or	r19, r7
     e2a:	48 29       	or	r20, r8
     e2c:	59 29       	or	r21, r9
     e2e:	0b c0       	rjmp	.+22     	; 0xe46 <_fpadd_parts+0x190>
     e30:	6c 14       	cp	r6, r12
     e32:	7d 04       	cpc	r7, r13
     e34:	24 f4       	brge	.+8      	; 0xe3e <_fpadd_parts+0x188>
     e36:	ee 24       	eor	r14, r14
     e38:	ff 24       	eor	r15, r15
     e3a:	87 01       	movw	r16, r14
     e3c:	04 c0       	rjmp	.+8      	; 0xe46 <_fpadd_parts+0x190>
     e3e:	63 01       	movw	r12, r6
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	a9 01       	movw	r20, r18
     e46:	81 81       	ldd	r24, Z+1	; 0x01
     e48:	fb 01       	movw	r30, r22
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	89 17       	cp	r24, r25
     e4e:	09 f4       	brne	.+2      	; 0xe52 <_fpadd_parts+0x19c>
     e50:	45 c0       	rjmp	.+138    	; 0xedc <_fpadd_parts+0x226>
     e52:	88 23       	and	r24, r24
     e54:	49 f0       	breq	.+18     	; 0xe68 <_fpadd_parts+0x1b2>
     e56:	d8 01       	movw	r26, r16
     e58:	c7 01       	movw	r24, r14
     e5a:	82 1b       	sub	r24, r18
     e5c:	93 0b       	sbc	r25, r19
     e5e:	a4 0b       	sbc	r26, r20
     e60:	b5 0b       	sbc	r27, r21
     e62:	9c 01       	movw	r18, r24
     e64:	ad 01       	movw	r20, r26
     e66:	04 c0       	rjmp	.+8      	; 0xe70 <_fpadd_parts+0x1ba>
     e68:	2e 19       	sub	r18, r14
     e6a:	3f 09       	sbc	r19, r15
     e6c:	40 0b       	sbc	r20, r16
     e6e:	51 0b       	sbc	r21, r17
     e70:	57 fd       	sbrc	r21, 7
     e72:	04 c0       	rjmp	.+8      	; 0xe7c <_fpadd_parts+0x1c6>
     e74:	19 82       	std	Y+1, r1	; 0x01
     e76:	db 82       	std	Y+3, r13	; 0x03
     e78:	ca 82       	std	Y+2, r12	; 0x02
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <_fpadd_parts+0x1dc>
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	89 83       	std	Y+1, r24	; 0x01
     e80:	db 82       	std	Y+3, r13	; 0x03
     e82:	ca 82       	std	Y+2, r12	; 0x02
     e84:	50 95       	com	r21
     e86:	40 95       	com	r20
     e88:	30 95       	com	r19
     e8a:	21 95       	neg	r18
     e8c:	3f 4f       	sbci	r19, 0xFF	; 255
     e8e:	4f 4f       	sbci	r20, 0xFF	; 255
     e90:	5f 4f       	sbci	r21, 0xFF	; 255
     e92:	2c 83       	std	Y+4, r18	; 0x04
     e94:	3d 83       	std	Y+5, r19	; 0x05
     e96:	4e 83       	std	Y+6, r20	; 0x06
     e98:	5f 83       	std	Y+7, r21	; 0x07
     e9a:	0d c0       	rjmp	.+26     	; 0xeb6 <_fpadd_parts+0x200>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	aa 1f       	adc	r26, r26
     ea2:	bb 1f       	adc	r27, r27
     ea4:	8c 83       	std	Y+4, r24	; 0x04
     ea6:	9d 83       	std	Y+5, r25	; 0x05
     ea8:	ae 83       	std	Y+6, r26	; 0x06
     eaa:	bf 83       	std	Y+7, r27	; 0x07
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	9b 81       	ldd	r25, Y+3	; 0x03
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	9b 83       	std	Y+3, r25	; 0x03
     eb4:	8a 83       	std	Y+2, r24	; 0x02
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	ae 81       	ldd	r26, Y+6	; 0x06
     ebc:	bf 81       	ldd	r27, Y+7	; 0x07
     ebe:	9c 01       	movw	r18, r24
     ec0:	ad 01       	movw	r20, r26
     ec2:	21 50       	subi	r18, 0x01	; 1
     ec4:	30 40       	sbci	r19, 0x00	; 0
     ec6:	40 40       	sbci	r20, 0x00	; 0
     ec8:	50 40       	sbci	r21, 0x00	; 0
     eca:	2f 3f       	cpi	r18, 0xFF	; 255
     ecc:	ef ef       	ldi	r30, 0xFF	; 255
     ece:	3e 07       	cpc	r19, r30
     ed0:	ef ef       	ldi	r30, 0xFF	; 255
     ed2:	4e 07       	cpc	r20, r30
     ed4:	ef e3       	ldi	r30, 0x3F	; 63
     ed6:	5e 07       	cpc	r21, r30
     ed8:	08 f3       	brcs	.-62     	; 0xe9c <_fpadd_parts+0x1e6>
     eda:	0b c0       	rjmp	.+22     	; 0xef2 <_fpadd_parts+0x23c>
     edc:	89 83       	std	Y+1, r24	; 0x01
     ede:	db 82       	std	Y+3, r13	; 0x03
     ee0:	ca 82       	std	Y+2, r12	; 0x02
     ee2:	2e 0d       	add	r18, r14
     ee4:	3f 1d       	adc	r19, r15
     ee6:	40 1f       	adc	r20, r16
     ee8:	51 1f       	adc	r21, r17
     eea:	2c 83       	std	Y+4, r18	; 0x04
     eec:	3d 83       	std	Y+5, r19	; 0x05
     eee:	4e 83       	std	Y+6, r20	; 0x06
     ef0:	5f 83       	std	Y+7, r21	; 0x07
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	88 83       	st	Y, r24
     ef6:	2c 81       	ldd	r18, Y+4	; 0x04
     ef8:	3d 81       	ldd	r19, Y+5	; 0x05
     efa:	4e 81       	ldd	r20, Y+6	; 0x06
     efc:	5f 81       	ldd	r21, Y+7	; 0x07
     efe:	57 ff       	sbrs	r21, 7
     f00:	1d c0       	rjmp	.+58     	; 0xf3c <_fpadd_parts+0x286>
     f02:	da 01       	movw	r26, r20
     f04:	c9 01       	movw	r24, r18
     f06:	81 70       	andi	r24, 0x01	; 1
     f08:	90 70       	andi	r25, 0x00	; 0
     f0a:	a0 70       	andi	r26, 0x00	; 0
     f0c:	b0 70       	andi	r27, 0x00	; 0
     f0e:	56 95       	lsr	r21
     f10:	47 95       	ror	r20
     f12:	37 95       	ror	r19
     f14:	27 95       	ror	r18
     f16:	82 2b       	or	r24, r18
     f18:	93 2b       	or	r25, r19
     f1a:	a4 2b       	or	r26, r20
     f1c:	b5 2b       	or	r27, r21
     f1e:	8c 83       	std	Y+4, r24	; 0x04
     f20:	9d 83       	std	Y+5, r25	; 0x05
     f22:	ae 83       	std	Y+6, r26	; 0x06
     f24:	bf 83       	std	Y+7, r27	; 0x07
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	9b 81       	ldd	r25, Y+3	; 0x03
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	9b 83       	std	Y+3, r25	; 0x03
     f2e:	8a 83       	std	Y+2, r24	; 0x02
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <_fpadd_parts+0x286>
     f32:	e0 e0       	ldi	r30, 0x00	; 0
     f34:	f1 e0       	ldi	r31, 0x01	; 1
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <_fpadd_parts+0x288>
     f38:	fb 01       	movw	r30, r22
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <_fpadd_parts+0x288>
     f3c:	fe 01       	movw	r30, r28
     f3e:	cf 01       	movw	r24, r30
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	ee e0       	ldi	r30, 0x0E	; 14
     f46:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <__epilogue_restores__+0x8>

00000f4a <__addsf3>:
     f4a:	a0 e2       	ldi	r26, 0x20	; 32
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	eb ea       	ldi	r30, 0xAB	; 171
     f50:	f7 e0       	ldi	r31, 0x07	; 7
     f52:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__prologue_saves__+0x18>
     f56:	69 83       	std	Y+1, r22	; 0x01
     f58:	7a 83       	std	Y+2, r23	; 0x02
     f5a:	8b 83       	std	Y+3, r24	; 0x03
     f5c:	9c 83       	std	Y+4, r25	; 0x04
     f5e:	2d 83       	std	Y+5, r18	; 0x05
     f60:	3e 83       	std	Y+6, r19	; 0x06
     f62:	4f 83       	std	Y+7, r20	; 0x07
     f64:	58 87       	std	Y+8, r21	; 0x08
     f66:	89 e0       	ldi	r24, 0x09	; 9
     f68:	e8 2e       	mov	r14, r24
     f6a:	f1 2c       	mov	r15, r1
     f6c:	ec 0e       	add	r14, r28
     f6e:	fd 1e       	adc	r15, r29
     f70:	ce 01       	movw	r24, r28
     f72:	01 96       	adiw	r24, 0x01	; 1
     f74:	b7 01       	movw	r22, r14
     f76:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
     f7a:	8e 01       	movw	r16, r28
     f7c:	0f 5e       	subi	r16, 0xEF	; 239
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	ce 01       	movw	r24, r28
     f82:	05 96       	adiw	r24, 0x05	; 5
     f84:	b8 01       	movw	r22, r16
     f86:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
     f8a:	c7 01       	movw	r24, r14
     f8c:	b8 01       	movw	r22, r16
     f8e:	ae 01       	movw	r20, r28
     f90:	47 5e       	subi	r20, 0xE7	; 231
     f92:	5f 4f       	sbci	r21, 0xFF	; 255
     f94:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_fpadd_parts>
     f98:	0e 94 47 0b 	call	0x168e	; 0x168e <__pack_f>
     f9c:	a0 96       	adiw	r28, 0x20	; 32
     f9e:	e6 e0       	ldi	r30, 0x06	; 6
     fa0:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__epilogue_restores__+0x18>

00000fa4 <__subsf3>:
     fa4:	a0 e2       	ldi	r26, 0x20	; 32
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e8 ed       	ldi	r30, 0xD8	; 216
     faa:	f7 e0       	ldi	r31, 0x07	; 7
     fac:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__prologue_saves__+0x18>
     fb0:	69 83       	std	Y+1, r22	; 0x01
     fb2:	7a 83       	std	Y+2, r23	; 0x02
     fb4:	8b 83       	std	Y+3, r24	; 0x03
     fb6:	9c 83       	std	Y+4, r25	; 0x04
     fb8:	2d 83       	std	Y+5, r18	; 0x05
     fba:	3e 83       	std	Y+6, r19	; 0x06
     fbc:	4f 83       	std	Y+7, r20	; 0x07
     fbe:	58 87       	std	Y+8, r21	; 0x08
     fc0:	8e 01       	movw	r16, r28
     fc2:	07 5f       	subi	r16, 0xF7	; 247
     fc4:	1f 4f       	sbci	r17, 0xFF	; 255
     fc6:	ce 01       	movw	r24, r28
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	b8 01       	movw	r22, r16
     fcc:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
     fd0:	91 e1       	ldi	r25, 0x11	; 17
     fd2:	e9 2e       	mov	r14, r25
     fd4:	f1 2c       	mov	r15, r1
     fd6:	ec 0e       	add	r14, r28
     fd8:	fd 1e       	adc	r15, r29
     fda:	ce 01       	movw	r24, r28
     fdc:	05 96       	adiw	r24, 0x05	; 5
     fde:	b7 01       	movw	r22, r14
     fe0:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
     fe4:	8a 89       	ldd	r24, Y+18	; 0x12
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	89 27       	eor	r24, r25
     fea:	8a 8b       	std	Y+18, r24	; 0x12
     fec:	c8 01       	movw	r24, r16
     fee:	b7 01       	movw	r22, r14
     ff0:	ae 01       	movw	r20, r28
     ff2:	47 5e       	subi	r20, 0xE7	; 231
     ff4:	5f 4f       	sbci	r21, 0xFF	; 255
     ff6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_fpadd_parts>
     ffa:	0e 94 47 0b 	call	0x168e	; 0x168e <__pack_f>
     ffe:	a0 96       	adiw	r28, 0x20	; 32
    1000:	e6 e0       	ldi	r30, 0x06	; 6
    1002:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__epilogue_restores__+0x18>

00001006 <__mulsf3>:
    1006:	a0 e2       	ldi	r26, 0x20	; 32
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e9 e0       	ldi	r30, 0x09	; 9
    100c:	f8 e0       	ldi	r31, 0x08	; 8
    100e:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__prologue_saves__>
    1012:	69 83       	std	Y+1, r22	; 0x01
    1014:	7a 83       	std	Y+2, r23	; 0x02
    1016:	8b 83       	std	Y+3, r24	; 0x03
    1018:	9c 83       	std	Y+4, r25	; 0x04
    101a:	2d 83       	std	Y+5, r18	; 0x05
    101c:	3e 83       	std	Y+6, r19	; 0x06
    101e:	4f 83       	std	Y+7, r20	; 0x07
    1020:	58 87       	std	Y+8, r21	; 0x08
    1022:	ce 01       	movw	r24, r28
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	be 01       	movw	r22, r28
    1028:	67 5f       	subi	r22, 0xF7	; 247
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
    1030:	ce 01       	movw	r24, r28
    1032:	05 96       	adiw	r24, 0x05	; 5
    1034:	be 01       	movw	r22, r28
    1036:	6f 5e       	subi	r22, 0xEF	; 239
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
    103e:	99 85       	ldd	r25, Y+9	; 0x09
    1040:	92 30       	cpi	r25, 0x02	; 2
    1042:	78 f0       	brcs	.+30     	; 0x1062 <__mulsf3+0x5c>
    1044:	89 89       	ldd	r24, Y+17	; 0x11
    1046:	82 30       	cpi	r24, 0x02	; 2
    1048:	c0 f0       	brcs	.+48     	; 0x107a <__mulsf3+0x74>
    104a:	94 30       	cpi	r25, 0x04	; 4
    104c:	19 f4       	brne	.+6      	; 0x1054 <__mulsf3+0x4e>
    104e:	82 30       	cpi	r24, 0x02	; 2
    1050:	41 f4       	brne	.+16     	; 0x1062 <__mulsf3+0x5c>
    1052:	cb c0       	rjmp	.+406    	; 0x11ea <__mulsf3+0x1e4>
    1054:	84 30       	cpi	r24, 0x04	; 4
    1056:	19 f4       	brne	.+6      	; 0x105e <__mulsf3+0x58>
    1058:	92 30       	cpi	r25, 0x02	; 2
    105a:	79 f4       	brne	.+30     	; 0x107a <__mulsf3+0x74>
    105c:	c6 c0       	rjmp	.+396    	; 0x11ea <__mulsf3+0x1e4>
    105e:	92 30       	cpi	r25, 0x02	; 2
    1060:	51 f4       	brne	.+20     	; 0x1076 <__mulsf3+0x70>
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	2a 85       	ldd	r18, Y+10	; 0x0a
    1066:	9a 89       	ldd	r25, Y+18	; 0x12
    1068:	29 17       	cp	r18, r25
    106a:	09 f4       	brne	.+2      	; 0x106e <__mulsf3+0x68>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	8a 87       	std	Y+10, r24	; 0x0a
    1070:	ce 01       	movw	r24, r28
    1072:	09 96       	adiw	r24, 0x09	; 9
    1074:	bc c0       	rjmp	.+376    	; 0x11ee <__mulsf3+0x1e8>
    1076:	82 30       	cpi	r24, 0x02	; 2
    1078:	51 f4       	brne	.+20     	; 0x108e <__mulsf3+0x88>
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	2a 85       	ldd	r18, Y+10	; 0x0a
    107e:	9a 89       	ldd	r25, Y+18	; 0x12
    1080:	29 17       	cp	r18, r25
    1082:	09 f4       	brne	.+2      	; 0x1086 <__mulsf3+0x80>
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	8a 8b       	std	Y+18, r24	; 0x12
    1088:	ce 01       	movw	r24, r28
    108a:	41 96       	adiw	r24, 0x11	; 17
    108c:	b0 c0       	rjmp	.+352    	; 0x11ee <__mulsf3+0x1e8>
    108e:	6d 84       	ldd	r6, Y+13	; 0x0d
    1090:	7e 84       	ldd	r7, Y+14	; 0x0e
    1092:	8f 84       	ldd	r8, Y+15	; 0x0f
    1094:	98 88       	ldd	r9, Y+16	; 0x10
    1096:	ed 88       	ldd	r14, Y+21	; 0x15
    1098:	fe 88       	ldd	r15, Y+22	; 0x16
    109a:	0f 89       	ldd	r16, Y+23	; 0x17
    109c:	18 8d       	ldd	r17, Y+24	; 0x18
    109e:	e0 e2       	ldi	r30, 0x20	; 32
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	dc 01       	movw	r26, r24
    10a8:	aa 24       	eor	r10, r10
    10aa:	bb 24       	eor	r11, r11
    10ac:	65 01       	movw	r12, r10
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	a9 01       	movw	r20, r18
    10b4:	b3 01       	movw	r22, r6
    10b6:	61 70       	andi	r22, 0x01	; 1
    10b8:	70 70       	andi	r23, 0x00	; 0
    10ba:	61 15       	cp	r22, r1
    10bc:	71 05       	cpc	r23, r1
    10be:	d1 f0       	breq	.+52     	; 0x10f4 <__mulsf3+0xee>
    10c0:	2e 0d       	add	r18, r14
    10c2:	3f 1d       	adc	r19, r15
    10c4:	40 1f       	adc	r20, r16
    10c6:	51 1f       	adc	r21, r17
    10c8:	15 01       	movw	r2, r10
    10ca:	26 01       	movw	r4, r12
    10cc:	28 0e       	add	r2, r24
    10ce:	39 1e       	adc	r3, r25
    10d0:	4a 1e       	adc	r4, r26
    10d2:	5b 1e       	adc	r5, r27
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a0 e0       	ldi	r26, 0x00	; 0
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	2e 15       	cp	r18, r14
    10de:	3f 05       	cpc	r19, r15
    10e0:	40 07       	cpc	r20, r16
    10e2:	51 07       	cpc	r21, r17
    10e4:	18 f0       	brcs	.+6      	; 0x10ec <__mulsf3+0xe6>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	dc 01       	movw	r26, r24
    10ec:	82 0d       	add	r24, r2
    10ee:	93 1d       	adc	r25, r3
    10f0:	a4 1d       	adc	r26, r4
    10f2:	b5 1d       	adc	r27, r5
    10f4:	aa 0c       	add	r10, r10
    10f6:	bb 1c       	adc	r11, r11
    10f8:	cc 1c       	adc	r12, r12
    10fa:	dd 1c       	adc	r13, r13
    10fc:	17 ff       	sbrs	r17, 7
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <__mulsf3+0x10c>
    1100:	61 e0       	ldi	r22, 0x01	; 1
    1102:	26 2e       	mov	r2, r22
    1104:	31 2c       	mov	r3, r1
    1106:	41 2c       	mov	r4, r1
    1108:	51 2c       	mov	r5, r1
    110a:	a2 28       	or	r10, r2
    110c:	b3 28       	or	r11, r3
    110e:	c4 28       	or	r12, r4
    1110:	d5 28       	or	r13, r5
    1112:	31 97       	sbiw	r30, 0x01	; 1
    1114:	49 f0       	breq	.+18     	; 0x1128 <__mulsf3+0x122>
    1116:	ee 0c       	add	r14, r14
    1118:	ff 1c       	adc	r15, r15
    111a:	00 1f       	adc	r16, r16
    111c:	11 1f       	adc	r17, r17
    111e:	96 94       	lsr	r9
    1120:	87 94       	ror	r8
    1122:	77 94       	ror	r7
    1124:	67 94       	ror	r6
    1126:	c6 cf       	rjmp	.-116    	; 0x10b4 <__mulsf3+0xae>
    1128:	6b 89       	ldd	r22, Y+19	; 0x13
    112a:	7c 89       	ldd	r23, Y+20	; 0x14
    112c:	eb 85       	ldd	r30, Y+11	; 0x0b
    112e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1130:	6e 0f       	add	r22, r30
    1132:	7f 1f       	adc	r23, r31
    1134:	6e 5f       	subi	r22, 0xFE	; 254
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	7c 8f       	std	Y+28, r23	; 0x1c
    113a:	6b 8f       	std	Y+27, r22	; 0x1b
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1140:	7a 89       	ldd	r23, Y+18	; 0x12
    1142:	e7 17       	cp	r30, r23
    1144:	09 f4       	brne	.+2      	; 0x1148 <__mulsf3+0x142>
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	6a 8f       	std	Y+26, r22	; 0x1a
    114a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    114c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    114e:	10 c0       	rjmp	.+32     	; 0x1170 <__mulsf3+0x16a>
    1150:	fc 01       	movw	r30, r24
    1152:	e1 70       	andi	r30, 0x01	; 1
    1154:	f0 70       	andi	r31, 0x00	; 0
    1156:	30 97       	sbiw	r30, 0x00	; 0
    1158:	29 f0       	breq	.+10     	; 0x1164 <__mulsf3+0x15e>
    115a:	56 95       	lsr	r21
    115c:	47 95       	ror	r20
    115e:	37 95       	ror	r19
    1160:	27 95       	ror	r18
    1162:	50 68       	ori	r21, 0x80	; 128
    1164:	b6 95       	lsr	r27
    1166:	a7 95       	ror	r26
    1168:	97 95       	ror	r25
    116a:	87 95       	ror	r24
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	b7 fd       	sbrc	r27, 7
    1172:	ee cf       	rjmp	.-36     	; 0x1150 <__mulsf3+0x14a>
    1174:	0c c0       	rjmp	.+24     	; 0x118e <__mulsf3+0x188>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	aa 1f       	adc	r26, r26
    117c:	bb 1f       	adc	r27, r27
    117e:	57 fd       	sbrc	r21, 7
    1180:	81 60       	ori	r24, 0x01	; 1
    1182:	22 0f       	add	r18, r18
    1184:	33 1f       	adc	r19, r19
    1186:	44 1f       	adc	r20, r20
    1188:	55 1f       	adc	r21, r21
    118a:	61 50       	subi	r22, 0x01	; 1
    118c:	70 40       	sbci	r23, 0x00	; 0
    118e:	80 30       	cpi	r24, 0x00	; 0
    1190:	e0 e0       	ldi	r30, 0x00	; 0
    1192:	9e 07       	cpc	r25, r30
    1194:	e0 e0       	ldi	r30, 0x00	; 0
    1196:	ae 07       	cpc	r26, r30
    1198:	e0 e4       	ldi	r30, 0x40	; 64
    119a:	be 07       	cpc	r27, r30
    119c:	60 f3       	brcs	.-40     	; 0x1176 <__mulsf3+0x170>
    119e:	6b 8f       	std	Y+27, r22	; 0x1b
    11a0:	7c 8f       	std	Y+28, r23	; 0x1c
    11a2:	6f e7       	ldi	r22, 0x7F	; 127
    11a4:	e6 2e       	mov	r14, r22
    11a6:	f1 2c       	mov	r15, r1
    11a8:	01 2d       	mov	r16, r1
    11aa:	11 2d       	mov	r17, r1
    11ac:	e8 22       	and	r14, r24
    11ae:	f9 22       	and	r15, r25
    11b0:	0a 23       	and	r16, r26
    11b2:	1b 23       	and	r17, r27
    11b4:	60 e4       	ldi	r22, 0x40	; 64
    11b6:	e6 16       	cp	r14, r22
    11b8:	f1 04       	cpc	r15, r1
    11ba:	01 05       	cpc	r16, r1
    11bc:	11 05       	cpc	r17, r1
    11be:	61 f4       	brne	.+24     	; 0x11d8 <__mulsf3+0x1d2>
    11c0:	87 fd       	sbrc	r24, 7
    11c2:	0a c0       	rjmp	.+20     	; 0x11d8 <__mulsf3+0x1d2>
    11c4:	21 15       	cp	r18, r1
    11c6:	31 05       	cpc	r19, r1
    11c8:	41 05       	cpc	r20, r1
    11ca:	51 05       	cpc	r21, r1
    11cc:	29 f0       	breq	.+10     	; 0x11d8 <__mulsf3+0x1d2>
    11ce:	80 5c       	subi	r24, 0xC0	; 192
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	af 4f       	sbci	r26, 0xFF	; 255
    11d4:	bf 4f       	sbci	r27, 0xFF	; 255
    11d6:	80 78       	andi	r24, 0x80	; 128
    11d8:	8d 8f       	std	Y+29, r24	; 0x1d
    11da:	9e 8f       	std	Y+30, r25	; 0x1e
    11dc:	af 8f       	std	Y+31, r26	; 0x1f
    11de:	b8 a3       	std	Y+32, r27	; 0x20
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	89 8f       	std	Y+25, r24	; 0x19
    11e4:	ce 01       	movw	r24, r28
    11e6:	49 96       	adiw	r24, 0x19	; 25
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <__mulsf3+0x1e8>
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	0e 94 47 0b 	call	0x168e	; 0x168e <__pack_f>
    11f2:	a0 96       	adiw	r28, 0x20	; 32
    11f4:	e2 e1       	ldi	r30, 0x12	; 18
    11f6:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__epilogue_restores__>

000011fa <__divsf3>:
    11fa:	a8 e1       	ldi	r26, 0x18	; 24
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e3 e0       	ldi	r30, 0x03	; 3
    1200:	f9 e0       	ldi	r31, 0x09	; 9
    1202:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__prologue_saves__+0x10>
    1206:	69 83       	std	Y+1, r22	; 0x01
    1208:	7a 83       	std	Y+2, r23	; 0x02
    120a:	8b 83       	std	Y+3, r24	; 0x03
    120c:	9c 83       	std	Y+4, r25	; 0x04
    120e:	2d 83       	std	Y+5, r18	; 0x05
    1210:	3e 83       	std	Y+6, r19	; 0x06
    1212:	4f 83       	std	Y+7, r20	; 0x07
    1214:	58 87       	std	Y+8, r21	; 0x08
    1216:	8e 01       	movw	r16, r28
    1218:	07 5f       	subi	r16, 0xF7	; 247
    121a:	1f 4f       	sbci	r17, 0xFF	; 255
    121c:	ce 01       	movw	r24, r28
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	b8 01       	movw	r22, r16
    1222:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
    1226:	81 e1       	ldi	r24, 0x11	; 17
    1228:	e8 2e       	mov	r14, r24
    122a:	f1 2c       	mov	r15, r1
    122c:	ec 0e       	add	r14, r28
    122e:	fd 1e       	adc	r15, r29
    1230:	ce 01       	movw	r24, r28
    1232:	05 96       	adiw	r24, 0x05	; 5
    1234:	b7 01       	movw	r22, r14
    1236:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
    123a:	99 85       	ldd	r25, Y+9	; 0x09
    123c:	92 30       	cpi	r25, 0x02	; 2
    123e:	08 f4       	brcc	.+2      	; 0x1242 <__divsf3+0x48>
    1240:	83 c0       	rjmp	.+262    	; 0x1348 <__divsf3+0x14e>
    1242:	89 89       	ldd	r24, Y+17	; 0x11
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	08 f4       	brcc	.+2      	; 0x124a <__divsf3+0x50>
    1248:	7b c0       	rjmp	.+246    	; 0x1340 <__divsf3+0x146>
    124a:	2a 85       	ldd	r18, Y+10	; 0x0a
    124c:	3a 89       	ldd	r19, Y+18	; 0x12
    124e:	23 27       	eor	r18, r19
    1250:	2a 87       	std	Y+10, r18	; 0x0a
    1252:	94 30       	cpi	r25, 0x04	; 4
    1254:	11 f0       	breq	.+4      	; 0x125a <__divsf3+0x60>
    1256:	92 30       	cpi	r25, 0x02	; 2
    1258:	21 f4       	brne	.+8      	; 0x1262 <__divsf3+0x68>
    125a:	98 17       	cp	r25, r24
    125c:	09 f0       	breq	.+2      	; 0x1260 <__divsf3+0x66>
    125e:	6c c0       	rjmp	.+216    	; 0x1338 <__divsf3+0x13e>
    1260:	71 c0       	rjmp	.+226    	; 0x1344 <__divsf3+0x14a>
    1262:	84 30       	cpi	r24, 0x04	; 4
    1264:	39 f4       	brne	.+14     	; 0x1274 <__divsf3+0x7a>
    1266:	1d 86       	std	Y+13, r1	; 0x0d
    1268:	1e 86       	std	Y+14, r1	; 0x0e
    126a:	1f 86       	std	Y+15, r1	; 0x0f
    126c:	18 8a       	std	Y+16, r1	; 0x10
    126e:	1c 86       	std	Y+12, r1	; 0x0c
    1270:	1b 86       	std	Y+11, r1	; 0x0b
    1272:	6a c0       	rjmp	.+212    	; 0x1348 <__divsf3+0x14e>
    1274:	82 30       	cpi	r24, 0x02	; 2
    1276:	19 f4       	brne	.+6      	; 0x127e <__divsf3+0x84>
    1278:	84 e0       	ldi	r24, 0x04	; 4
    127a:	89 87       	std	Y+9, r24	; 0x09
    127c:	65 c0       	rjmp	.+202    	; 0x1348 <__divsf3+0x14e>
    127e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1280:	9c 85       	ldd	r25, Y+12	; 0x0c
    1282:	2b 89       	ldd	r18, Y+19	; 0x13
    1284:	3c 89       	ldd	r19, Y+20	; 0x14
    1286:	82 1b       	sub	r24, r18
    1288:	93 0b       	sbc	r25, r19
    128a:	9c 87       	std	Y+12, r25	; 0x0c
    128c:	8b 87       	std	Y+11, r24	; 0x0b
    128e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1290:	3e 85       	ldd	r19, Y+14	; 0x0e
    1292:	4f 85       	ldd	r20, Y+15	; 0x0f
    1294:	58 89       	ldd	r21, Y+16	; 0x10
    1296:	ed 88       	ldd	r14, Y+21	; 0x15
    1298:	fe 88       	ldd	r15, Y+22	; 0x16
    129a:	0f 89       	ldd	r16, Y+23	; 0x17
    129c:	18 8d       	ldd	r17, Y+24	; 0x18
    129e:	2e 15       	cp	r18, r14
    12a0:	3f 05       	cpc	r19, r15
    12a2:	40 07       	cpc	r20, r16
    12a4:	51 07       	cpc	r21, r17
    12a6:	38 f4       	brcc	.+14     	; 0x12b6 <__divsf3+0xbc>
    12a8:	22 0f       	add	r18, r18
    12aa:	33 1f       	adc	r19, r19
    12ac:	44 1f       	adc	r20, r20
    12ae:	55 1f       	adc	r21, r21
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	9c 87       	std	Y+12, r25	; 0x0c
    12b4:	8b 87       	std	Y+11, r24	; 0x0b
    12b6:	6f e1       	ldi	r22, 0x1F	; 31
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	a1 2c       	mov	r10, r1
    12bc:	b1 2c       	mov	r11, r1
    12be:	c1 2c       	mov	r12, r1
    12c0:	a0 e4       	ldi	r26, 0x40	; 64
    12c2:	da 2e       	mov	r13, r26
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	dc 01       	movw	r26, r24
    12ca:	2e 15       	cp	r18, r14
    12cc:	3f 05       	cpc	r19, r15
    12ce:	40 07       	cpc	r20, r16
    12d0:	51 07       	cpc	r21, r17
    12d2:	40 f0       	brcs	.+16     	; 0x12e4 <__divsf3+0xea>
    12d4:	8a 29       	or	r24, r10
    12d6:	9b 29       	or	r25, r11
    12d8:	ac 29       	or	r26, r12
    12da:	bd 29       	or	r27, r13
    12dc:	2e 19       	sub	r18, r14
    12de:	3f 09       	sbc	r19, r15
    12e0:	40 0b       	sbc	r20, r16
    12e2:	51 0b       	sbc	r21, r17
    12e4:	d6 94       	lsr	r13
    12e6:	c7 94       	ror	r12
    12e8:	b7 94       	ror	r11
    12ea:	a7 94       	ror	r10
    12ec:	22 0f       	add	r18, r18
    12ee:	33 1f       	adc	r19, r19
    12f0:	44 1f       	adc	r20, r20
    12f2:	55 1f       	adc	r21, r21
    12f4:	61 50       	subi	r22, 0x01	; 1
    12f6:	70 40       	sbci	r23, 0x00	; 0
    12f8:	41 f7       	brne	.-48     	; 0x12ca <__divsf3+0xd0>
    12fa:	6f e7       	ldi	r22, 0x7F	; 127
    12fc:	e6 2e       	mov	r14, r22
    12fe:	f1 2c       	mov	r15, r1
    1300:	01 2d       	mov	r16, r1
    1302:	11 2d       	mov	r17, r1
    1304:	e8 22       	and	r14, r24
    1306:	f9 22       	and	r15, r25
    1308:	0a 23       	and	r16, r26
    130a:	1b 23       	and	r17, r27
    130c:	60 e4       	ldi	r22, 0x40	; 64
    130e:	e6 16       	cp	r14, r22
    1310:	f1 04       	cpc	r15, r1
    1312:	01 05       	cpc	r16, r1
    1314:	11 05       	cpc	r17, r1
    1316:	61 f4       	brne	.+24     	; 0x1330 <__divsf3+0x136>
    1318:	87 fd       	sbrc	r24, 7
    131a:	0a c0       	rjmp	.+20     	; 0x1330 <__divsf3+0x136>
    131c:	21 15       	cp	r18, r1
    131e:	31 05       	cpc	r19, r1
    1320:	41 05       	cpc	r20, r1
    1322:	51 05       	cpc	r21, r1
    1324:	29 f0       	breq	.+10     	; 0x1330 <__divsf3+0x136>
    1326:	80 5c       	subi	r24, 0xC0	; 192
    1328:	9f 4f       	sbci	r25, 0xFF	; 255
    132a:	af 4f       	sbci	r26, 0xFF	; 255
    132c:	bf 4f       	sbci	r27, 0xFF	; 255
    132e:	80 78       	andi	r24, 0x80	; 128
    1330:	8d 87       	std	Y+13, r24	; 0x0d
    1332:	9e 87       	std	Y+14, r25	; 0x0e
    1334:	af 87       	std	Y+15, r26	; 0x0f
    1336:	b8 8b       	std	Y+16, r27	; 0x10
    1338:	8e 01       	movw	r16, r28
    133a:	07 5f       	subi	r16, 0xF7	; 247
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <__divsf3+0x14e>
    1340:	87 01       	movw	r16, r14
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <__divsf3+0x14e>
    1344:	00 e0       	ldi	r16, 0x00	; 0
    1346:	11 e0       	ldi	r17, 0x01	; 1
    1348:	c8 01       	movw	r24, r16
    134a:	0e 94 47 0b 	call	0x168e	; 0x168e <__pack_f>
    134e:	68 96       	adiw	r28, 0x18	; 24
    1350:	ea e0       	ldi	r30, 0x0A	; 10
    1352:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__epilogue_restores__+0x10>

00001356 <__gtsf2>:
    1356:	a8 e1       	ldi	r26, 0x18	; 24
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e1 eb       	ldi	r30, 0xB1	; 177
    135c:	f9 e0       	ldi	r31, 0x09	; 9
    135e:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__prologue_saves__+0x18>
    1362:	69 83       	std	Y+1, r22	; 0x01
    1364:	7a 83       	std	Y+2, r23	; 0x02
    1366:	8b 83       	std	Y+3, r24	; 0x03
    1368:	9c 83       	std	Y+4, r25	; 0x04
    136a:	2d 83       	std	Y+5, r18	; 0x05
    136c:	3e 83       	std	Y+6, r19	; 0x06
    136e:	4f 83       	std	Y+7, r20	; 0x07
    1370:	58 87       	std	Y+8, r21	; 0x08
    1372:	8e 01       	movw	r16, r28
    1374:	07 5f       	subi	r16, 0xF7	; 247
    1376:	1f 4f       	sbci	r17, 0xFF	; 255
    1378:	ce 01       	movw	r24, r28
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	b8 01       	movw	r22, r16
    137e:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
    1382:	81 e1       	ldi	r24, 0x11	; 17
    1384:	e8 2e       	mov	r14, r24
    1386:	f1 2c       	mov	r15, r1
    1388:	ec 0e       	add	r14, r28
    138a:	fd 1e       	adc	r15, r29
    138c:	ce 01       	movw	r24, r28
    138e:	05 96       	adiw	r24, 0x05	; 5
    1390:	b7 01       	movw	r22, r14
    1392:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
    1396:	89 85       	ldd	r24, Y+9	; 0x09
    1398:	82 30       	cpi	r24, 0x02	; 2
    139a:	40 f0       	brcs	.+16     	; 0x13ac <__gtsf2+0x56>
    139c:	89 89       	ldd	r24, Y+17	; 0x11
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	28 f0       	brcs	.+10     	; 0x13ac <__gtsf2+0x56>
    13a2:	c8 01       	movw	r24, r16
    13a4:	b7 01       	movw	r22, r14
    13a6:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fpcmp_parts_f>
    13aa:	01 c0       	rjmp	.+2      	; 0x13ae <__gtsf2+0x58>
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
    13ae:	68 96       	adiw	r28, 0x18	; 24
    13b0:	e6 e0       	ldi	r30, 0x06	; 6
    13b2:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__epilogue_restores__+0x18>

000013b6 <__gesf2>:
    13b6:	a8 e1       	ldi	r26, 0x18	; 24
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e1 ee       	ldi	r30, 0xE1	; 225
    13bc:	f9 e0       	ldi	r31, 0x09	; 9
    13be:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__prologue_saves__+0x18>
    13c2:	69 83       	std	Y+1, r22	; 0x01
    13c4:	7a 83       	std	Y+2, r23	; 0x02
    13c6:	8b 83       	std	Y+3, r24	; 0x03
    13c8:	9c 83       	std	Y+4, r25	; 0x04
    13ca:	2d 83       	std	Y+5, r18	; 0x05
    13cc:	3e 83       	std	Y+6, r19	; 0x06
    13ce:	4f 83       	std	Y+7, r20	; 0x07
    13d0:	58 87       	std	Y+8, r21	; 0x08
    13d2:	8e 01       	movw	r16, r28
    13d4:	07 5f       	subi	r16, 0xF7	; 247
    13d6:	1f 4f       	sbci	r17, 0xFF	; 255
    13d8:	ce 01       	movw	r24, r28
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	b8 01       	movw	r22, r16
    13de:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
    13e2:	81 e1       	ldi	r24, 0x11	; 17
    13e4:	e8 2e       	mov	r14, r24
    13e6:	f1 2c       	mov	r15, r1
    13e8:	ec 0e       	add	r14, r28
    13ea:	fd 1e       	adc	r15, r29
    13ec:	ce 01       	movw	r24, r28
    13ee:	05 96       	adiw	r24, 0x05	; 5
    13f0:	b7 01       	movw	r22, r14
    13f2:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
    13f6:	89 85       	ldd	r24, Y+9	; 0x09
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	40 f0       	brcs	.+16     	; 0x140c <__gesf2+0x56>
    13fc:	89 89       	ldd	r24, Y+17	; 0x11
    13fe:	82 30       	cpi	r24, 0x02	; 2
    1400:	28 f0       	brcs	.+10     	; 0x140c <__gesf2+0x56>
    1402:	c8 01       	movw	r24, r16
    1404:	b7 01       	movw	r22, r14
    1406:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fpcmp_parts_f>
    140a:	01 c0       	rjmp	.+2      	; 0x140e <__gesf2+0x58>
    140c:	8f ef       	ldi	r24, 0xFF	; 255
    140e:	68 96       	adiw	r28, 0x18	; 24
    1410:	e6 e0       	ldi	r30, 0x06	; 6
    1412:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__epilogue_restores__+0x18>

00001416 <__ltsf2>:
    1416:	a8 e1       	ldi	r26, 0x18	; 24
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e1 e1       	ldi	r30, 0x11	; 17
    141c:	fa e0       	ldi	r31, 0x0A	; 10
    141e:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__prologue_saves__+0x18>
    1422:	69 83       	std	Y+1, r22	; 0x01
    1424:	7a 83       	std	Y+2, r23	; 0x02
    1426:	8b 83       	std	Y+3, r24	; 0x03
    1428:	9c 83       	std	Y+4, r25	; 0x04
    142a:	2d 83       	std	Y+5, r18	; 0x05
    142c:	3e 83       	std	Y+6, r19	; 0x06
    142e:	4f 83       	std	Y+7, r20	; 0x07
    1430:	58 87       	std	Y+8, r21	; 0x08
    1432:	8e 01       	movw	r16, r28
    1434:	07 5f       	subi	r16, 0xF7	; 247
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	b8 01       	movw	r22, r16
    143e:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
    1442:	81 e1       	ldi	r24, 0x11	; 17
    1444:	e8 2e       	mov	r14, r24
    1446:	f1 2c       	mov	r15, r1
    1448:	ec 0e       	add	r14, r28
    144a:	fd 1e       	adc	r15, r29
    144c:	ce 01       	movw	r24, r28
    144e:	05 96       	adiw	r24, 0x05	; 5
    1450:	b7 01       	movw	r22, r14
    1452:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
    1456:	89 85       	ldd	r24, Y+9	; 0x09
    1458:	82 30       	cpi	r24, 0x02	; 2
    145a:	40 f0       	brcs	.+16     	; 0x146c <__ltsf2+0x56>
    145c:	89 89       	ldd	r24, Y+17	; 0x11
    145e:	82 30       	cpi	r24, 0x02	; 2
    1460:	28 f0       	brcs	.+10     	; 0x146c <__ltsf2+0x56>
    1462:	c8 01       	movw	r24, r16
    1464:	b7 01       	movw	r22, r14
    1466:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__fpcmp_parts_f>
    146a:	01 c0       	rjmp	.+2      	; 0x146e <__ltsf2+0x58>
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	68 96       	adiw	r28, 0x18	; 24
    1470:	e6 e0       	ldi	r30, 0x06	; 6
    1472:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__epilogue_restores__+0x18>

00001476 <__floatsisf>:
    1476:	a8 e0       	ldi	r26, 0x08	; 8
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e1 e4       	ldi	r30, 0x41	; 65
    147c:	fa e0       	ldi	r31, 0x0A	; 10
    147e:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__prologue_saves__+0x18>
    1482:	7b 01       	movw	r14, r22
    1484:	8c 01       	movw	r16, r24
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	d8 01       	movw	r26, r16
    148c:	c7 01       	movw	r24, r14
    148e:	88 27       	eor	r24, r24
    1490:	b7 fd       	sbrc	r27, 7
    1492:	83 95       	inc	r24
    1494:	99 27       	eor	r25, r25
    1496:	aa 27       	eor	r26, r26
    1498:	bb 27       	eor	r27, r27
    149a:	28 2f       	mov	r18, r24
    149c:	8a 83       	std	Y+2, r24	; 0x02
    149e:	e1 14       	cp	r14, r1
    14a0:	f1 04       	cpc	r15, r1
    14a2:	01 05       	cpc	r16, r1
    14a4:	11 05       	cpc	r17, r1
    14a6:	19 f4       	brne	.+6      	; 0x14ae <__floatsisf+0x38>
    14a8:	82 e0       	ldi	r24, 0x02	; 2
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	37 c0       	rjmp	.+110    	; 0x151c <__floatsisf+0xa6>
    14ae:	8e e1       	ldi	r24, 0x1E	; 30
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	9c 83       	std	Y+4, r25	; 0x04
    14b4:	8b 83       	std	Y+3, r24	; 0x03
    14b6:	22 23       	and	r18, r18
    14b8:	89 f0       	breq	.+34     	; 0x14dc <__floatsisf+0x66>
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	e8 16       	cp	r14, r24
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	f8 06       	cpc	r15, r24
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	08 07       	cpc	r16, r24
    14c6:	80 e8       	ldi	r24, 0x80	; 128
    14c8:	18 07       	cpc	r17, r24
    14ca:	69 f1       	breq	.+90     	; 0x1526 <__floatsisf+0xb0>
    14cc:	10 95       	com	r17
    14ce:	00 95       	com	r16
    14d0:	f0 94       	com	r15
    14d2:	e0 94       	com	r14
    14d4:	e1 1c       	adc	r14, r1
    14d6:	f1 1c       	adc	r15, r1
    14d8:	01 1d       	adc	r16, r1
    14da:	11 1d       	adc	r17, r1
    14dc:	ed 82       	std	Y+5, r14	; 0x05
    14de:	fe 82       	std	Y+6, r15	; 0x06
    14e0:	0f 83       	std	Y+7, r16	; 0x07
    14e2:	18 87       	std	Y+8, r17	; 0x08
    14e4:	c8 01       	movw	r24, r16
    14e6:	b7 01       	movw	r22, r14
    14e8:	0e 94 ed 0a 	call	0x15da	; 0x15da <__clzsi2>
    14ec:	9c 01       	movw	r18, r24
    14ee:	21 50       	subi	r18, 0x01	; 1
    14f0:	30 40       	sbci	r19, 0x00	; 0
    14f2:	12 16       	cp	r1, r18
    14f4:	13 06       	cpc	r1, r19
    14f6:	94 f4       	brge	.+36     	; 0x151c <__floatsisf+0xa6>
    14f8:	02 2e       	mov	r0, r18
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <__floatsisf+0x8e>
    14fc:	ee 0c       	add	r14, r14
    14fe:	ff 1c       	adc	r15, r15
    1500:	00 1f       	adc	r16, r16
    1502:	11 1f       	adc	r17, r17
    1504:	0a 94       	dec	r0
    1506:	d2 f7       	brpl	.-12     	; 0x14fc <__floatsisf+0x86>
    1508:	ed 82       	std	Y+5, r14	; 0x05
    150a:	fe 82       	std	Y+6, r15	; 0x06
    150c:	0f 83       	std	Y+7, r16	; 0x07
    150e:	18 87       	std	Y+8, r17	; 0x08
    1510:	8e e1       	ldi	r24, 0x1E	; 30
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	82 1b       	sub	r24, r18
    1516:	93 0b       	sbc	r25, r19
    1518:	9c 83       	std	Y+4, r25	; 0x04
    151a:	8b 83       	std	Y+3, r24	; 0x03
    151c:	ce 01       	movw	r24, r28
    151e:	01 96       	adiw	r24, 0x01	; 1
    1520:	0e 94 47 0b 	call	0x168e	; 0x168e <__pack_f>
    1524:	04 c0       	rjmp	.+8      	; 0x152e <__floatsisf+0xb8>
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	9f ec       	ldi	r25, 0xCF	; 207
    152e:	28 96       	adiw	r28, 0x08	; 8
    1530:	e6 e0       	ldi	r30, 0x06	; 6
    1532:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__epilogue_restores__+0x18>

00001536 <__fixsfsi>:
    1536:	ac e0       	ldi	r26, 0x0C	; 12
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e1 ea       	ldi	r30, 0xA1	; 161
    153c:	fa e0       	ldi	r31, 0x0A	; 10
    153e:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__prologue_saves__+0x20>
    1542:	69 83       	std	Y+1, r22	; 0x01
    1544:	7a 83       	std	Y+2, r23	; 0x02
    1546:	8b 83       	std	Y+3, r24	; 0x03
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	ce 01       	movw	r24, r28
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	be 01       	movw	r22, r28
    1550:	6b 5f       	subi	r22, 0xFB	; 251
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	0e 94 15 0c 	call	0x182a	; 0x182a <__unpack_f>
    1558:	8d 81       	ldd	r24, Y+5	; 0x05
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	81 f1       	breq	.+96     	; 0x15be <__fixsfsi+0x88>
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	70 f1       	brcs	.+92     	; 0x15be <__fixsfsi+0x88>
    1562:	84 30       	cpi	r24, 0x04	; 4
    1564:	21 f4       	brne	.+8      	; 0x156e <__fixsfsi+0x38>
    1566:	8e 81       	ldd	r24, Y+6	; 0x06
    1568:	88 23       	and	r24, r24
    156a:	69 f1       	breq	.+90     	; 0x15c6 <__fixsfsi+0x90>
    156c:	0a c0       	rjmp	.+20     	; 0x1582 <__fixsfsi+0x4c>
    156e:	2f 81       	ldd	r18, Y+7	; 0x07
    1570:	38 85       	ldd	r19, Y+8	; 0x08
    1572:	37 fd       	sbrc	r19, 7
    1574:	24 c0       	rjmp	.+72     	; 0x15be <__fixsfsi+0x88>
    1576:	6e 81       	ldd	r22, Y+6	; 0x06
    1578:	2f 31       	cpi	r18, 0x1F	; 31
    157a:	31 05       	cpc	r19, r1
    157c:	3c f0       	brlt	.+14     	; 0x158c <__fixsfsi+0x56>
    157e:	66 23       	and	r22, r22
    1580:	11 f1       	breq	.+68     	; 0x15c6 <__fixsfsi+0x90>
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	50 e8       	ldi	r21, 0x80	; 128
    158a:	21 c0       	rjmp	.+66     	; 0x15ce <__fixsfsi+0x98>
    158c:	8e e1       	ldi	r24, 0x1E	; 30
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	82 1b       	sub	r24, r18
    1592:	93 0b       	sbc	r25, r19
    1594:	29 85       	ldd	r18, Y+9	; 0x09
    1596:	3a 85       	ldd	r19, Y+10	; 0x0a
    1598:	4b 85       	ldd	r20, Y+11	; 0x0b
    159a:	5c 85       	ldd	r21, Y+12	; 0x0c
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <__fixsfsi+0x70>
    159e:	56 95       	lsr	r21
    15a0:	47 95       	ror	r20
    15a2:	37 95       	ror	r19
    15a4:	27 95       	ror	r18
    15a6:	8a 95       	dec	r24
    15a8:	d2 f7       	brpl	.-12     	; 0x159e <__fixsfsi+0x68>
    15aa:	66 23       	and	r22, r22
    15ac:	81 f0       	breq	.+32     	; 0x15ce <__fixsfsi+0x98>
    15ae:	50 95       	com	r21
    15b0:	40 95       	com	r20
    15b2:	30 95       	com	r19
    15b4:	21 95       	neg	r18
    15b6:	3f 4f       	sbci	r19, 0xFF	; 255
    15b8:	4f 4f       	sbci	r20, 0xFF	; 255
    15ba:	5f 4f       	sbci	r21, 0xFF	; 255
    15bc:	08 c0       	rjmp	.+16     	; 0x15ce <__fixsfsi+0x98>
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	a9 01       	movw	r20, r18
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <__fixsfsi+0x98>
    15c6:	2f ef       	ldi	r18, 0xFF	; 255
    15c8:	3f ef       	ldi	r19, 0xFF	; 255
    15ca:	4f ef       	ldi	r20, 0xFF	; 255
    15cc:	5f e7       	ldi	r21, 0x7F	; 127
    15ce:	b9 01       	movw	r22, r18
    15d0:	ca 01       	movw	r24, r20
    15d2:	2c 96       	adiw	r28, 0x0c	; 12
    15d4:	e2 e0       	ldi	r30, 0x02	; 2
    15d6:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__epilogue_restores__+0x20>

000015da <__clzsi2>:
    15da:	af 92       	push	r10
    15dc:	bf 92       	push	r11
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	7b 01       	movw	r14, r22
    15ec:	8c 01       	movw	r16, r24
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	e8 16       	cp	r14, r24
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	f8 06       	cpc	r15, r24
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	08 07       	cpc	r16, r24
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	18 07       	cpc	r17, r24
    15fe:	58 f4       	brcc	.+22     	; 0x1616 <__clzsi2+0x3c>
    1600:	ef ef       	ldi	r30, 0xFF	; 255
    1602:	ee 16       	cp	r14, r30
    1604:	f1 04       	cpc	r15, r1
    1606:	01 05       	cpc	r16, r1
    1608:	11 05       	cpc	r17, r1
    160a:	09 f0       	breq	.+2      	; 0x160e <__clzsi2+0x34>
    160c:	90 f4       	brcc	.+36     	; 0x1632 <__clzsi2+0x58>
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	dc 01       	movw	r26, r24
    1614:	17 c0       	rjmp	.+46     	; 0x1644 <__clzsi2+0x6a>
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	ef 16       	cp	r14, r31
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	ff 06       	cpc	r15, r31
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	0f 07       	cpc	r16, r31
    1622:	f1 e0       	ldi	r31, 0x01	; 1
    1624:	1f 07       	cpc	r17, r31
    1626:	50 f4       	brcc	.+20     	; 0x163c <__clzsi2+0x62>
    1628:	80 e1       	ldi	r24, 0x10	; 16
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a0 e0       	ldi	r26, 0x00	; 0
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	09 c0       	rjmp	.+18     	; 0x1644 <__clzsi2+0x6a>
    1632:	88 e0       	ldi	r24, 0x08	; 8
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e0       	ldi	r26, 0x00	; 0
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <__clzsi2+0x6a>
    163c:	88 e1       	ldi	r24, 0x18	; 24
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a0 e0       	ldi	r26, 0x00	; 0
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	20 e2       	ldi	r18, 0x20	; 32
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	28 1b       	sub	r18, r24
    164e:	39 0b       	sbc	r19, r25
    1650:	4a 0b       	sbc	r20, r26
    1652:	5b 0b       	sbc	r21, r27
    1654:	57 01       	movw	r10, r14
    1656:	68 01       	movw	r12, r16
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <__clzsi2+0x88>
    165a:	d6 94       	lsr	r13
    165c:	c7 94       	ror	r12
    165e:	b7 94       	ror	r11
    1660:	a7 94       	ror	r10
    1662:	8a 95       	dec	r24
    1664:	d2 f7       	brpl	.-12     	; 0x165a <__clzsi2+0x80>
    1666:	d6 01       	movw	r26, r12
    1668:	c5 01       	movw	r24, r10
    166a:	88 5f       	subi	r24, 0xF8	; 248
    166c:	9e 4f       	sbci	r25, 0xFE	; 254
    166e:	fc 01       	movw	r30, r24
    1670:	80 81       	ld	r24, Z
    1672:	28 1b       	sub	r18, r24
    1674:	31 09       	sbc	r19, r1
    1676:	41 09       	sbc	r20, r1
    1678:	51 09       	sbc	r21, r1
    167a:	c9 01       	movw	r24, r18
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	bf 90       	pop	r11
    168a:	af 90       	pop	r10
    168c:	08 95       	ret

0000168e <__pack_f>:
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	fc 01       	movw	r30, r24
    169c:	24 81       	ldd	r18, Z+4	; 0x04
    169e:	35 81       	ldd	r19, Z+5	; 0x05
    16a0:	46 81       	ldd	r20, Z+6	; 0x06
    16a2:	57 81       	ldd	r21, Z+7	; 0x07
    16a4:	61 81       	ldd	r22, Z+1	; 0x01
    16a6:	80 81       	ld	r24, Z
    16a8:	82 30       	cpi	r24, 0x02	; 2
    16aa:	20 f4       	brcc	.+8      	; 0x16b4 <__pack_f+0x26>
    16ac:	40 61       	ori	r20, 0x10	; 16
    16ae:	ef ef       	ldi	r30, 0xFF	; 255
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	a3 c0       	rjmp	.+326    	; 0x17fa <__pack_f+0x16c>
    16b4:	84 30       	cpi	r24, 0x04	; 4
    16b6:	09 f4       	brne	.+2      	; 0x16ba <__pack_f+0x2c>
    16b8:	9b c0       	rjmp	.+310    	; 0x17f0 <__pack_f+0x162>
    16ba:	82 30       	cpi	r24, 0x02	; 2
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <__pack_f+0x32>
    16be:	92 c0       	rjmp	.+292    	; 0x17e4 <__pack_f+0x156>
    16c0:	21 15       	cp	r18, r1
    16c2:	31 05       	cpc	r19, r1
    16c4:	41 05       	cpc	r20, r1
    16c6:	51 05       	cpc	r21, r1
    16c8:	09 f4       	brne	.+2      	; 0x16cc <__pack_f+0x3e>
    16ca:	8f c0       	rjmp	.+286    	; 0x17ea <__pack_f+0x15c>
    16cc:	02 80       	ldd	r0, Z+2	; 0x02
    16ce:	f3 81       	ldd	r31, Z+3	; 0x03
    16d0:	e0 2d       	mov	r30, r0
    16d2:	8f ef       	ldi	r24, 0xFF	; 255
    16d4:	e2 38       	cpi	r30, 0x82	; 130
    16d6:	f8 07       	cpc	r31, r24
    16d8:	0c f0       	brlt	.+2      	; 0x16dc <__pack_f+0x4e>
    16da:	5a c0       	rjmp	.+180    	; 0x1790 <__pack_f+0x102>
    16dc:	c2 e8       	ldi	r28, 0x82	; 130
    16de:	df ef       	ldi	r29, 0xFF	; 255
    16e0:	ce 1b       	sub	r28, r30
    16e2:	df 0b       	sbc	r29, r31
    16e4:	ca 31       	cpi	r28, 0x1A	; 26
    16e6:	d1 05       	cpc	r29, r1
    16e8:	6c f5       	brge	.+90     	; 0x1744 <__pack_f+0xb6>
    16ea:	79 01       	movw	r14, r18
    16ec:	8a 01       	movw	r16, r20
    16ee:	0c 2e       	mov	r0, r28
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <__pack_f+0x6c>
    16f2:	16 95       	lsr	r17
    16f4:	07 95       	ror	r16
    16f6:	f7 94       	ror	r15
    16f8:	e7 94       	ror	r14
    16fa:	0a 94       	dec	r0
    16fc:	d2 f7       	brpl	.-12     	; 0x16f2 <__pack_f+0x64>
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a0 e0       	ldi	r26, 0x00	; 0
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	0c 2e       	mov	r0, r28
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <__pack_f+0x84>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	aa 1f       	adc	r26, r26
    1710:	bb 1f       	adc	r27, r27
    1712:	0a 94       	dec	r0
    1714:	d2 f7       	brpl	.-12     	; 0x170a <__pack_f+0x7c>
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	a1 09       	sbc	r26, r1
    171a:	b1 09       	sbc	r27, r1
    171c:	82 23       	and	r24, r18
    171e:	93 23       	and	r25, r19
    1720:	a4 23       	and	r26, r20
    1722:	b5 23       	and	r27, r21
    1724:	21 e0       	ldi	r18, 0x01	; 1
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	a1 05       	cpc	r26, r1
    1730:	b1 05       	cpc	r27, r1
    1732:	19 f4       	brne	.+6      	; 0x173a <__pack_f+0xac>
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	a9 01       	movw	r20, r18
    173a:	2e 29       	or	r18, r14
    173c:	3f 29       	or	r19, r15
    173e:	40 2b       	or	r20, r16
    1740:	51 2b       	or	r21, r17
    1742:	03 c0       	rjmp	.+6      	; 0x174a <__pack_f+0xbc>
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	a9 01       	movw	r20, r18
    174a:	da 01       	movw	r26, r20
    174c:	c9 01       	movw	r24, r18
    174e:	8f 77       	andi	r24, 0x7F	; 127
    1750:	90 70       	andi	r25, 0x00	; 0
    1752:	a0 70       	andi	r26, 0x00	; 0
    1754:	b0 70       	andi	r27, 0x00	; 0
    1756:	80 34       	cpi	r24, 0x40	; 64
    1758:	91 05       	cpc	r25, r1
    175a:	a1 05       	cpc	r26, r1
    175c:	b1 05       	cpc	r27, r1
    175e:	39 f4       	brne	.+14     	; 0x176e <__pack_f+0xe0>
    1760:	27 ff       	sbrs	r18, 7
    1762:	09 c0       	rjmp	.+18     	; 0x1776 <__pack_f+0xe8>
    1764:	20 5c       	subi	r18, 0xC0	; 192
    1766:	3f 4f       	sbci	r19, 0xFF	; 255
    1768:	4f 4f       	sbci	r20, 0xFF	; 255
    176a:	5f 4f       	sbci	r21, 0xFF	; 255
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <__pack_f+0xe8>
    176e:	21 5c       	subi	r18, 0xC1	; 193
    1770:	3f 4f       	sbci	r19, 0xFF	; 255
    1772:	4f 4f       	sbci	r20, 0xFF	; 255
    1774:	5f 4f       	sbci	r21, 0xFF	; 255
    1776:	e1 e0       	ldi	r30, 0x01	; 1
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	20 30       	cpi	r18, 0x00	; 0
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	38 07       	cpc	r19, r24
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	48 07       	cpc	r20, r24
    1784:	80 e4       	ldi	r24, 0x40	; 64
    1786:	58 07       	cpc	r21, r24
    1788:	28 f5       	brcc	.+74     	; 0x17d4 <__pack_f+0x146>
    178a:	e0 e0       	ldi	r30, 0x00	; 0
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	22 c0       	rjmp	.+68     	; 0x17d4 <__pack_f+0x146>
    1790:	e0 38       	cpi	r30, 0x80	; 128
    1792:	f1 05       	cpc	r31, r1
    1794:	6c f5       	brge	.+90     	; 0x17f0 <__pack_f+0x162>
    1796:	e1 58       	subi	r30, 0x81	; 129
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	da 01       	movw	r26, r20
    179c:	c9 01       	movw	r24, r18
    179e:	8f 77       	andi	r24, 0x7F	; 127
    17a0:	90 70       	andi	r25, 0x00	; 0
    17a2:	a0 70       	andi	r26, 0x00	; 0
    17a4:	b0 70       	andi	r27, 0x00	; 0
    17a6:	80 34       	cpi	r24, 0x40	; 64
    17a8:	91 05       	cpc	r25, r1
    17aa:	a1 05       	cpc	r26, r1
    17ac:	b1 05       	cpc	r27, r1
    17ae:	39 f4       	brne	.+14     	; 0x17be <__pack_f+0x130>
    17b0:	27 ff       	sbrs	r18, 7
    17b2:	09 c0       	rjmp	.+18     	; 0x17c6 <__pack_f+0x138>
    17b4:	20 5c       	subi	r18, 0xC0	; 192
    17b6:	3f 4f       	sbci	r19, 0xFF	; 255
    17b8:	4f 4f       	sbci	r20, 0xFF	; 255
    17ba:	5f 4f       	sbci	r21, 0xFF	; 255
    17bc:	04 c0       	rjmp	.+8      	; 0x17c6 <__pack_f+0x138>
    17be:	21 5c       	subi	r18, 0xC1	; 193
    17c0:	3f 4f       	sbci	r19, 0xFF	; 255
    17c2:	4f 4f       	sbci	r20, 0xFF	; 255
    17c4:	5f 4f       	sbci	r21, 0xFF	; 255
    17c6:	57 ff       	sbrs	r21, 7
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <__pack_f+0x146>
    17ca:	56 95       	lsr	r21
    17cc:	47 95       	ror	r20
    17ce:	37 95       	ror	r19
    17d0:	27 95       	ror	r18
    17d2:	31 96       	adiw	r30, 0x01	; 1
    17d4:	87 e0       	ldi	r24, 0x07	; 7
    17d6:	56 95       	lsr	r21
    17d8:	47 95       	ror	r20
    17da:	37 95       	ror	r19
    17dc:	27 95       	ror	r18
    17de:	8a 95       	dec	r24
    17e0:	d1 f7       	brne	.-12     	; 0x17d6 <__pack_f+0x148>
    17e2:	0b c0       	rjmp	.+22     	; 0x17fa <__pack_f+0x16c>
    17e4:	e0 e0       	ldi	r30, 0x00	; 0
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	05 c0       	rjmp	.+10     	; 0x17f4 <__pack_f+0x166>
    17ea:	e0 e0       	ldi	r30, 0x00	; 0
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	05 c0       	rjmp	.+10     	; 0x17fa <__pack_f+0x16c>
    17f0:	ef ef       	ldi	r30, 0xFF	; 255
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	a9 01       	movw	r20, r18
    17fa:	8e 2f       	mov	r24, r30
    17fc:	87 95       	ror	r24
    17fe:	88 27       	eor	r24, r24
    1800:	87 95       	ror	r24
    1802:	94 2f       	mov	r25, r20
    1804:	9f 77       	andi	r25, 0x7F	; 127
    1806:	67 95       	ror	r22
    1808:	66 27       	eor	r22, r22
    180a:	67 95       	ror	r22
    180c:	e6 95       	lsr	r30
    180e:	e2 2e       	mov	r14, r18
    1810:	a9 2f       	mov	r26, r25
    1812:	a8 2b       	or	r26, r24
    1814:	fe 2f       	mov	r31, r30
    1816:	f6 2b       	or	r31, r22
    1818:	62 2f       	mov	r22, r18
    181a:	73 2f       	mov	r23, r19
    181c:	8a 2f       	mov	r24, r26
    181e:	9f 2f       	mov	r25, r31
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	e6 e0       	ldi	r30, 0x06	; 6
    1826:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__epilogue_restores__+0x18>

0000182a <__unpack_f>:
    182a:	dc 01       	movw	r26, r24
    182c:	fb 01       	movw	r30, r22
    182e:	2c 91       	ld	r18, X
    1830:	11 96       	adiw	r26, 0x01	; 1
    1832:	3c 91       	ld	r19, X
    1834:	11 97       	sbiw	r26, 0x01	; 1
    1836:	12 96       	adiw	r26, 0x02	; 2
    1838:	8c 91       	ld	r24, X
    183a:	12 97       	sbiw	r26, 0x02	; 2
    183c:	48 2f       	mov	r20, r24
    183e:	4f 77       	andi	r20, 0x7F	; 127
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	98 2f       	mov	r25, r24
    1844:	99 1f       	adc	r25, r25
    1846:	99 27       	eor	r25, r25
    1848:	99 1f       	adc	r25, r25
    184a:	13 96       	adiw	r26, 0x03	; 3
    184c:	6c 91       	ld	r22, X
    184e:	13 97       	sbiw	r26, 0x03	; 3
    1850:	86 2f       	mov	r24, r22
    1852:	88 0f       	add	r24, r24
    1854:	89 2b       	or	r24, r25
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	66 1f       	adc	r22, r22
    185a:	66 27       	eor	r22, r22
    185c:	66 1f       	adc	r22, r22
    185e:	61 83       	std	Z+1, r22	; 0x01
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	39 f5       	brne	.+78     	; 0x18b2 <__unpack_f+0x88>
    1864:	21 15       	cp	r18, r1
    1866:	31 05       	cpc	r19, r1
    1868:	41 05       	cpc	r20, r1
    186a:	51 05       	cpc	r21, r1
    186c:	11 f4       	brne	.+4      	; 0x1872 <__unpack_f+0x48>
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	29 c0       	rjmp	.+82     	; 0x18c4 <__unpack_f+0x9a>
    1872:	82 e8       	ldi	r24, 0x82	; 130
    1874:	9f ef       	ldi	r25, 0xFF	; 255
    1876:	93 83       	std	Z+3, r25	; 0x03
    1878:	82 83       	std	Z+2, r24	; 0x02
    187a:	67 e0       	ldi	r22, 0x07	; 7
    187c:	22 0f       	add	r18, r18
    187e:	33 1f       	adc	r19, r19
    1880:	44 1f       	adc	r20, r20
    1882:	55 1f       	adc	r21, r21
    1884:	6a 95       	dec	r22
    1886:	d1 f7       	brne	.-12     	; 0x187c <__unpack_f+0x52>
    1888:	83 e0       	ldi	r24, 0x03	; 3
    188a:	80 83       	st	Z, r24
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <__unpack_f+0x76>
    188e:	22 0f       	add	r18, r18
    1890:	33 1f       	adc	r19, r19
    1892:	44 1f       	adc	r20, r20
    1894:	55 1f       	adc	r21, r21
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	93 83       	std	Z+3, r25	; 0x03
    189e:	82 83       	std	Z+2, r24	; 0x02
    18a0:	20 30       	cpi	r18, 0x00	; 0
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	38 07       	cpc	r19, r24
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	48 07       	cpc	r20, r24
    18aa:	80 e4       	ldi	r24, 0x40	; 64
    18ac:	58 07       	cpc	r21, r24
    18ae:	78 f3       	brcs	.-34     	; 0x188e <__unpack_f+0x64>
    18b0:	20 c0       	rjmp	.+64     	; 0x18f2 <__unpack_f+0xc8>
    18b2:	8f 3f       	cpi	r24, 0xFF	; 255
    18b4:	91 05       	cpc	r25, r1
    18b6:	79 f4       	brne	.+30     	; 0x18d6 <__unpack_f+0xac>
    18b8:	21 15       	cp	r18, r1
    18ba:	31 05       	cpc	r19, r1
    18bc:	41 05       	cpc	r20, r1
    18be:	51 05       	cpc	r21, r1
    18c0:	19 f4       	brne	.+6      	; 0x18c8 <__unpack_f+0x9e>
    18c2:	84 e0       	ldi	r24, 0x04	; 4
    18c4:	80 83       	st	Z, r24
    18c6:	08 95       	ret
    18c8:	44 ff       	sbrs	r20, 4
    18ca:	03 c0       	rjmp	.+6      	; 0x18d2 <__unpack_f+0xa8>
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	80 83       	st	Z, r24
    18d0:	10 c0       	rjmp	.+32     	; 0x18f2 <__unpack_f+0xc8>
    18d2:	10 82       	st	Z, r1
    18d4:	0e c0       	rjmp	.+28     	; 0x18f2 <__unpack_f+0xc8>
    18d6:	8f 57       	subi	r24, 0x7F	; 127
    18d8:	90 40       	sbci	r25, 0x00	; 0
    18da:	93 83       	std	Z+3, r25	; 0x03
    18dc:	82 83       	std	Z+2, r24	; 0x02
    18de:	83 e0       	ldi	r24, 0x03	; 3
    18e0:	80 83       	st	Z, r24
    18e2:	87 e0       	ldi	r24, 0x07	; 7
    18e4:	22 0f       	add	r18, r18
    18e6:	33 1f       	adc	r19, r19
    18e8:	44 1f       	adc	r20, r20
    18ea:	55 1f       	adc	r21, r21
    18ec:	8a 95       	dec	r24
    18ee:	d1 f7       	brne	.-12     	; 0x18e4 <__unpack_f+0xba>
    18f0:	50 64       	ori	r21, 0x40	; 64
    18f2:	24 83       	std	Z+4, r18	; 0x04
    18f4:	35 83       	std	Z+5, r19	; 0x05
    18f6:	46 83       	std	Z+6, r20	; 0x06
    18f8:	57 83       	std	Z+7, r21	; 0x07
    18fa:	08 95       	ret

000018fc <__fpcmp_parts_f>:
    18fc:	fc 01       	movw	r30, r24
    18fe:	db 01       	movw	r26, r22
    1900:	90 81       	ld	r25, Z
    1902:	92 30       	cpi	r25, 0x02	; 2
    1904:	08 f4       	brcc	.+2      	; 0x1908 <__fpcmp_parts_f+0xc>
    1906:	49 c0       	rjmp	.+146    	; 0x199a <__fpcmp_parts_f+0x9e>
    1908:	8c 91       	ld	r24, X
    190a:	82 30       	cpi	r24, 0x02	; 2
    190c:	08 f4       	brcc	.+2      	; 0x1910 <__fpcmp_parts_f+0x14>
    190e:	45 c0       	rjmp	.+138    	; 0x199a <__fpcmp_parts_f+0x9e>
    1910:	94 30       	cpi	r25, 0x04	; 4
    1912:	51 f4       	brne	.+20     	; 0x1928 <__fpcmp_parts_f+0x2c>
    1914:	61 81       	ldd	r22, Z+1	; 0x01
    1916:	84 30       	cpi	r24, 0x04	; 4
    1918:	b1 f5       	brne	.+108    	; 0x1986 <__fpcmp_parts_f+0x8a>
    191a:	11 96       	adiw	r26, 0x01	; 1
    191c:	2c 91       	ld	r18, X
    191e:	11 97       	sbiw	r26, 0x01	; 1
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	26 1b       	sub	r18, r22
    1924:	31 09       	sbc	r19, r1
    1926:	41 c0       	rjmp	.+130    	; 0x19aa <__fpcmp_parts_f+0xae>
    1928:	84 30       	cpi	r24, 0x04	; 4
    192a:	21 f0       	breq	.+8      	; 0x1934 <__fpcmp_parts_f+0x38>
    192c:	92 30       	cpi	r25, 0x02	; 2
    192e:	41 f4       	brne	.+16     	; 0x1940 <__fpcmp_parts_f+0x44>
    1930:	82 30       	cpi	r24, 0x02	; 2
    1932:	b1 f1       	breq	.+108    	; 0x19a0 <__fpcmp_parts_f+0xa4>
    1934:	11 96       	adiw	r26, 0x01	; 1
    1936:	8c 91       	ld	r24, X
    1938:	11 97       	sbiw	r26, 0x01	; 1
    193a:	88 23       	and	r24, r24
    193c:	a1 f1       	breq	.+104    	; 0x19a6 <__fpcmp_parts_f+0xaa>
    193e:	2d c0       	rjmp	.+90     	; 0x199a <__fpcmp_parts_f+0x9e>
    1940:	61 81       	ldd	r22, Z+1	; 0x01
    1942:	82 30       	cpi	r24, 0x02	; 2
    1944:	01 f1       	breq	.+64     	; 0x1986 <__fpcmp_parts_f+0x8a>
    1946:	11 96       	adiw	r26, 0x01	; 1
    1948:	8c 91       	ld	r24, X
    194a:	11 97       	sbiw	r26, 0x01	; 1
    194c:	68 17       	cp	r22, r24
    194e:	d9 f4       	brne	.+54     	; 0x1986 <__fpcmp_parts_f+0x8a>
    1950:	22 81       	ldd	r18, Z+2	; 0x02
    1952:	33 81       	ldd	r19, Z+3	; 0x03
    1954:	12 96       	adiw	r26, 0x02	; 2
    1956:	8d 91       	ld	r24, X+
    1958:	9c 91       	ld	r25, X
    195a:	13 97       	sbiw	r26, 0x03	; 3
    195c:	82 17       	cp	r24, r18
    195e:	93 07       	cpc	r25, r19
    1960:	94 f0       	brlt	.+36     	; 0x1986 <__fpcmp_parts_f+0x8a>
    1962:	28 17       	cp	r18, r24
    1964:	39 07       	cpc	r19, r25
    1966:	bc f0       	brlt	.+46     	; 0x1996 <__fpcmp_parts_f+0x9a>
    1968:	24 81       	ldd	r18, Z+4	; 0x04
    196a:	35 81       	ldd	r19, Z+5	; 0x05
    196c:	46 81       	ldd	r20, Z+6	; 0x06
    196e:	57 81       	ldd	r21, Z+7	; 0x07
    1970:	14 96       	adiw	r26, 0x04	; 4
    1972:	8d 91       	ld	r24, X+
    1974:	9d 91       	ld	r25, X+
    1976:	0d 90       	ld	r0, X+
    1978:	bc 91       	ld	r27, X
    197a:	a0 2d       	mov	r26, r0
    197c:	82 17       	cp	r24, r18
    197e:	93 07       	cpc	r25, r19
    1980:	a4 07       	cpc	r26, r20
    1982:	b5 07       	cpc	r27, r21
    1984:	18 f4       	brcc	.+6      	; 0x198c <__fpcmp_parts_f+0x90>
    1986:	66 23       	and	r22, r22
    1988:	41 f0       	breq	.+16     	; 0x199a <__fpcmp_parts_f+0x9e>
    198a:	0d c0       	rjmp	.+26     	; 0x19a6 <__fpcmp_parts_f+0xaa>
    198c:	28 17       	cp	r18, r24
    198e:	39 07       	cpc	r19, r25
    1990:	4a 07       	cpc	r20, r26
    1992:	5b 07       	cpc	r21, r27
    1994:	28 f4       	brcc	.+10     	; 0x19a0 <__fpcmp_parts_f+0xa4>
    1996:	66 23       	and	r22, r22
    1998:	31 f0       	breq	.+12     	; 0x19a6 <__fpcmp_parts_f+0xaa>
    199a:	21 e0       	ldi	r18, 0x01	; 1
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <__fpcmp_parts_f+0xae>
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <__fpcmp_parts_f+0xae>
    19a6:	2f ef       	ldi	r18, 0xFF	; 255
    19a8:	3f ef       	ldi	r19, 0xFF	; 255
    19aa:	c9 01       	movw	r24, r18
    19ac:	08 95       	ret

000019ae <__mulsi3>:
    19ae:	62 9f       	mul	r22, r18
    19b0:	d0 01       	movw	r26, r0
    19b2:	73 9f       	mul	r23, r19
    19b4:	f0 01       	movw	r30, r0
    19b6:	82 9f       	mul	r24, r18
    19b8:	e0 0d       	add	r30, r0
    19ba:	f1 1d       	adc	r31, r1
    19bc:	64 9f       	mul	r22, r20
    19be:	e0 0d       	add	r30, r0
    19c0:	f1 1d       	adc	r31, r1
    19c2:	92 9f       	mul	r25, r18
    19c4:	f0 0d       	add	r31, r0
    19c6:	83 9f       	mul	r24, r19
    19c8:	f0 0d       	add	r31, r0
    19ca:	74 9f       	mul	r23, r20
    19cc:	f0 0d       	add	r31, r0
    19ce:	65 9f       	mul	r22, r21
    19d0:	f0 0d       	add	r31, r0
    19d2:	99 27       	eor	r25, r25
    19d4:	72 9f       	mul	r23, r18
    19d6:	b0 0d       	add	r27, r0
    19d8:	e1 1d       	adc	r30, r1
    19da:	f9 1f       	adc	r31, r25
    19dc:	63 9f       	mul	r22, r19
    19de:	b0 0d       	add	r27, r0
    19e0:	e1 1d       	adc	r30, r1
    19e2:	f9 1f       	adc	r31, r25
    19e4:	bd 01       	movw	r22, r26
    19e6:	cf 01       	movw	r24, r30
    19e8:	11 24       	eor	r1, r1
    19ea:	08 95       	ret

000019ec <__prologue_saves__>:
    19ec:	2f 92       	push	r2
    19ee:	3f 92       	push	r3
    19f0:	4f 92       	push	r4
    19f2:	5f 92       	push	r5
    19f4:	6f 92       	push	r6
    19f6:	7f 92       	push	r7
    19f8:	8f 92       	push	r8
    19fa:	9f 92       	push	r9
    19fc:	af 92       	push	r10
    19fe:	bf 92       	push	r11
    1a00:	cf 92       	push	r12
    1a02:	df 92       	push	r13
    1a04:	ef 92       	push	r14
    1a06:	ff 92       	push	r15
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	ca 1b       	sub	r28, r26
    1a16:	db 0b       	sbc	r29, r27
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	09 94       	ijmp

00001a24 <__epilogue_restores__>:
    1a24:	2a 88       	ldd	r2, Y+18	; 0x12
    1a26:	39 88       	ldd	r3, Y+17	; 0x11
    1a28:	48 88       	ldd	r4, Y+16	; 0x10
    1a2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a30:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a32:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a34:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a36:	b9 84       	ldd	r11, Y+9	; 0x09
    1a38:	c8 84       	ldd	r12, Y+8	; 0x08
    1a3a:	df 80       	ldd	r13, Y+7	; 0x07
    1a3c:	ee 80       	ldd	r14, Y+6	; 0x06
    1a3e:	fd 80       	ldd	r15, Y+5	; 0x05
    1a40:	0c 81       	ldd	r16, Y+4	; 0x04
    1a42:	1b 81       	ldd	r17, Y+3	; 0x03
    1a44:	aa 81       	ldd	r26, Y+2	; 0x02
    1a46:	b9 81       	ldd	r27, Y+1	; 0x01
    1a48:	ce 0f       	add	r28, r30
    1a4a:	d1 1d       	adc	r29, r1
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	ed 01       	movw	r28, r26
    1a58:	08 95       	ret

00001a5a <_exit>:
    1a5a:	f8 94       	cli

00001a5c <__stop_program>:
    1a5c:	ff cf       	rjmp	.-2      	; 0x1a5c <__stop_program>
