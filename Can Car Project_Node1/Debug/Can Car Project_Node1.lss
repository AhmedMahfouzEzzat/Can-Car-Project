
Can Car Project_Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  00001b72  00001c06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800208  00800208  00001d0e  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000260  00000000  00000000  000027b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000045c  00000000  00000000  00002a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002d70  00000000  00000000  00002e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000178b  00000000  00000000  00005bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002082  00000000  00000000  00007368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000370  00000000  00000000  000093ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000631  00000000  00000000  0000975c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e21  00000000  00000000  00009d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000007c6  00000000  00000000  0000abae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000080  00000000  00000000  0000b374  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__vector_10>
      2c:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a8 e0       	ldi	r26, 0x08	; 8
      78:	b2 e0       	ldi	r27, 0x02	; 2
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	a6 32       	cpi	r26, 0x26	; 38
      80:	b1 07       	cpc	r27, r17
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
      84:	12 e0       	ldi	r17, 0x02	; 2
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e2 e7       	ldi	r30, 0x72	; 114
      8c:	fb e1       	ldi	r31, 0x1B	; 27
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	a8 30       	cpi	r26, 0x08	; 8
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
      9a:	0e 94 99 03 	call	0x732	; 0x732 <main>
      9e:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <INIT_ADC>:
 * Created: 07/04/2019 09:39:41 AM
 *  Author: Ahmed
 */ 
#include <avr/io.h>
void INIT_ADC()
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	ADMUX|=(1<<REFS0); 
      ae:	8c e7       	ldi	r24, 0x7C	; 124
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	2c e7       	ldi	r18, 0x7C	; 124
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	f9 01       	movw	r30, r18
      b8:	20 81       	ld	r18, Z
      ba:	20 64       	ori	r18, 0x40	; 64
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
	ADCSRA|=(1<<ADEN); //enable ADC
      c0:	8a e7       	ldi	r24, 0x7A	; 122
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	2a e7       	ldi	r18, 0x7A	; 122
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	20 68       	ori	r18, 0x80	; 128
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
	ADCSRA|=(7<<ADPS0);//clock Division Factor
      d2:	8a e7       	ldi	r24, 0x7A	; 122
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	2a e7       	ldi	r18, 0x7A	; 122
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	20 81       	ld	r18, Z
      de:	27 60       	ori	r18, 0x07	; 7
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
}
      e4:	cf 91       	pop	r28
      e6:	df 91       	pop	r29
      e8:	08 95       	ret

000000ea <Analog_Read>:
	
int Analog_Read(uint8_t pin_num)
{
      ea:	df 93       	push	r29
      ec:	cf 93       	push	r28
      ee:	0f 92       	push	r0
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX|= pin_num;
      f6:	8c e7       	ldi	r24, 0x7C	; 124
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	2c e7       	ldi	r18, 0x7C	; 124
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	f9 01       	movw	r30, r18
     100:	30 81       	ld	r19, Z
     102:	29 81       	ldd	r18, Y+1	; 0x01
     104:	23 2b       	or	r18, r19
     106:	fc 01       	movw	r30, r24
     108:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC);
     10a:	8a e7       	ldi	r24, 0x7A	; 122
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	2a e7       	ldi	r18, 0x7A	; 122
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	f9 01       	movw	r30, r18
     114:	20 81       	ld	r18, Z
     116:	20 64       	ori	r18, 0x40	; 64
     118:	fc 01       	movw	r30, r24
     11a:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));
     11c:	00 00       	nop
     11e:	8a e7       	ldi	r24, 0x7A	; 122
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	fc 01       	movw	r30, r24
     124:	80 81       	ld	r24, Z
     126:	88 2f       	mov	r24, r24
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	80 74       	andi	r24, 0x40	; 64
     12c:	90 70       	andi	r25, 0x00	; 0
     12e:	00 97       	sbiw	r24, 0x00	; 0
     130:	b1 f7       	brne	.-20     	; 0x11e <Analog_Read+0x34>
	return ADC;	
     132:	88 e7       	ldi	r24, 0x78	; 120
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	80 81       	ld	r24, Z
     13a:	91 81       	ldd	r25, Z+1	; 0x01
     13c:	0f 90       	pop	r0
     13e:	cf 91       	pop	r28
     140:	df 91       	pop	r29
     142:	08 95       	ret

00000144 <readRegister>:
 * \see MCP2515 datasheet, chapter 11 - register description
 * \see MCP2515 datasheet, chapter 12 - read instruction
 * \param address Register address
 */
unsigned char readRegister(unsigned char address)
{
     144:	df 93       	push	r29
     146:	cf 93       	push	r28
     148:	00 d0       	rcall	.+0      	; 0x14a <readRegister+0x6>
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
     14e:	8a 83       	std	Y+2, r24	; 0x02
	 /* Send read instruction, address, and receive result */
	 spiMasterChipSelect(1);
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	 spiMasterTRANSMIT(READ_INSTRUCTION);
     156:	83 e0       	ldi	r24, 0x03	; 3
     158:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(address);
     15c:	8a 81       	ldd	r24, Y+2	; 0x02
     15e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	unsigned char buffer = spiMasterTRANSMIT(0);
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
     168:	89 83       	std	Y+1, r24	; 0x01
	 spiMasterChipSelect(0);
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	 return buffer;
     170:	89 81       	ldd	r24, Y+1	; 0x01
}
     172:	0f 90       	pop	r0
     174:	0f 90       	pop	r0
     176:	cf 91       	pop	r28
     178:	df 91       	pop	r29
     17a:	08 95       	ret

0000017c <writeRegister>:
 * \see MCP2515 datasheet, chapter 12 - write instruction
 * \param address Register address
 * \param value New value of the register
 */
void writeRegister(unsigned char address, unsigned char value)
{
     17c:	df 93       	push	r29
     17e:	cf 93       	push	r28
     180:	00 d0       	rcall	.+0      	; 0x182 <writeRegister+0x6>
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	89 83       	std	Y+1, r24	; 0x01
     188:	6a 83       	std	Y+2, r22	; 0x02
	/* Send write instruction, address, and data */
	 spiMasterChipSelect(1);
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	 spiMasterTRANSMIT(WRITE_INSTRUCTION);
     190:	82 e0       	ldi	r24, 0x02	; 2
     192:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(address);
     196:	89 81       	ldd	r24, Y+1	; 0x01
     198:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(value);
     19c:	8a 81       	ldd	r24, Y+2	; 0x02
     19e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterChipSelect(0);
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
}
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	cf 91       	pop	r28
     1ae:	df 91       	pop	r29
     1b0:	08 95       	ret

000001b2 <resetMCP2515>:
/**
 * Send reset instruction to the MCP2515. Device should
 * reinitialize yourself and go to the configuration mode
 */
void resetMCP2515()
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
	 /* Send reset instruction */
	 spiMasterChipSelect(1);
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	 spiMasterTRANSMIT(RESET_INSTRUCTION);
     1c0:	80 ec       	ldi	r24, 0xC0	; 192
     1c2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterChipSelect(0);
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
}
     1cc:	cf 91       	pop	r28
     1ce:	df 91       	pop	r29
     1d0:	08 95       	ret

000001d2 <setBitTiming>:

unsigned char setBitTiming(unsigned char rCNF1, unsigned char rCNF2, unsigned char rCNF3)
{
     1d2:	df 93       	push	r29
     1d4:	cf 93       	push	r28
     1d6:	00 d0       	rcall	.+0      	; 0x1d8 <setBitTiming+0x6>
     1d8:	0f 92       	push	r0
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
     1de:	89 83       	std	Y+1, r24	; 0x01
     1e0:	6a 83       	std	Y+2, r22	; 0x02
     1e2:	4b 83       	std	Y+3, r20	; 0x03
	 if(getMode == CONFIGURATION_MODE) { 
     1e4:	8e e0       	ldi	r24, 0x0E	; 14
     1e6:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     1ea:	82 95       	swap	r24
     1ec:	86 95       	lsr	r24
     1ee:	87 70       	andi	r24, 0x07	; 7
     1f0:	84 30       	cpi	r24, 0x04	; 4
     1f2:	b1 f4       	brne	.+44     	; 0x220 <setBitTiming+0x4e>
		 writeRegister(CNF1, rCNF1);
     1f4:	8a e2       	ldi	r24, 0x2A	; 42
     1f6:	69 81       	ldd	r22, Y+1	; 0x01
     1f8:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
		 writeRegister(CNF2, rCNF2);
     1fc:	89 e2       	ldi	r24, 0x29	; 41
     1fe:	6a 81       	ldd	r22, Y+2	; 0x02
     200:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
		 changeBits(CNF3, 0x07, rCNF3);
     204:	88 e2       	ldi	r24, 0x28	; 40
     206:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     20a:	98 2f       	mov	r25, r24
     20c:	98 7f       	andi	r25, 0xF8	; 248
     20e:	8b 81       	ldd	r24, Y+3	; 0x03
     210:	89 2b       	or	r24, r25
     212:	98 2f       	mov	r25, r24
     214:	88 e2       	ldi	r24, 0x28	; 40
     216:	69 2f       	mov	r22, r25
     218:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
		 return 1;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	01 c0       	rjmp	.+2      	; 0x222 <setBitTiming+0x50>
	 }
	 return 0;
     220:	80 e0       	ldi	r24, 0x00	; 0
}
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <setAcceptanceCriteria>:
 * \param address starting address of 4 registers to setup. It can be mask
 * or filter, doesn't matter
 * \param criterion message identifier criterion to be set
 * \param is_ext 1 if message is extended, otherwise 0 */
void setAcceptanceCriteria (unsigned char address,unsigned long criterion,unsigned char is_ext)
{
     22e:	df 93       	push	r29
     230:	cf 93       	push	r28
     232:	00 d0       	rcall	.+0      	; 0x234 <setAcceptanceCriteria+0x6>
     234:	00 d0       	rcall	.+0      	; 0x236 <setAcceptanceCriteria+0x8>
     236:	00 d0       	rcall	.+0      	; 0x238 <setAcceptanceCriteria+0xa>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	89 83       	std	Y+1, r24	; 0x01
     23e:	4a 83       	std	Y+2, r20	; 0x02
     240:	5b 83       	std	Y+3, r21	; 0x03
     242:	6c 83       	std	Y+4, r22	; 0x04
     244:	7d 83       	std	Y+5, r23	; 0x05
     246:	2e 83       	std	Y+6, r18	; 0x06
	 /* Initialize reading of the receive buffer */
	 spiMasterChipSelect(1);
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	 /* Send header and address */
	 spiMasterTRANSMIT(WRITE_INSTRUCTION);
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(address);
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 /* Setup standard or extended identifier */
	 if(is_ext) {
     25a:	8e 81       	ldd	r24, Y+6	; 0x06
     25c:	88 23       	and	r24, r24
     25e:	09 f4       	brne	.+2      	; 0x262 <setAcceptanceCriteria+0x34>
     260:	43 c0       	rjmp	.+134    	; 0x2e8 <setAcceptanceCriteria+0xba>
	 spiMasterTRANSMIT((unsigned char)(criterion>>3));
     262:	8a 81       	ldd	r24, Y+2	; 0x02
     264:	9b 81       	ldd	r25, Y+3	; 0x03
     266:	ac 81       	ldd	r26, Y+4	; 0x04
     268:	bd 81       	ldd	r27, Y+5	; 0x05
     26a:	68 94       	set
     26c:	12 f8       	bld	r1, 2
     26e:	b6 95       	lsr	r27
     270:	a7 95       	ror	r26
     272:	97 95       	ror	r25
     274:	87 95       	ror	r24
     276:	16 94       	lsr	r1
     278:	d1 f7       	brne	.-12     	; 0x26e <setAcceptanceCriteria+0x40>
     27a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion<<5)|(1<<EXIDE)|((unsigned char)(criterion>>27)));
     27e:	8a 81       	ldd	r24, Y+2	; 0x02
     280:	28 2f       	mov	r18, r24
     282:	22 95       	swap	r18
     284:	22 0f       	add	r18, r18
     286:	20 7e       	andi	r18, 0xE0	; 224
     288:	8a 81       	ldd	r24, Y+2	; 0x02
     28a:	9b 81       	ldd	r25, Y+3	; 0x03
     28c:	ac 81       	ldd	r26, Y+4	; 0x04
     28e:	bd 81       	ldd	r27, Y+5	; 0x05
     290:	07 2e       	mov	r0, r23
     292:	7b e1       	ldi	r23, 0x1B	; 27
     294:	b6 95       	lsr	r27
     296:	a7 95       	ror	r26
     298:	97 95       	ror	r25
     29a:	87 95       	ror	r24
     29c:	7a 95       	dec	r23
     29e:	d1 f7       	brne	.-12     	; 0x294 <setAcceptanceCriteria+0x66>
     2a0:	70 2d       	mov	r23, r0
     2a2:	82 2b       	or	r24, r18
     2a4:	88 60       	ori	r24, 0x08	; 8
     2a6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion>>19));
     2aa:	8a 81       	ldd	r24, Y+2	; 0x02
     2ac:	9b 81       	ldd	r25, Y+3	; 0x03
     2ae:	ac 81       	ldd	r26, Y+4	; 0x04
     2b0:	bd 81       	ldd	r27, Y+5	; 0x05
     2b2:	07 2e       	mov	r0, r23
     2b4:	73 e1       	ldi	r23, 0x13	; 19
     2b6:	b6 95       	lsr	r27
     2b8:	a7 95       	ror	r26
     2ba:	97 95       	ror	r25
     2bc:	87 95       	ror	r24
     2be:	7a 95       	dec	r23
     2c0:	d1 f7       	brne	.-12     	; 0x2b6 <setAcceptanceCriteria+0x88>
     2c2:	70 2d       	mov	r23, r0
     2c4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion>>11));
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	9b 81       	ldd	r25, Y+3	; 0x03
     2cc:	ac 81       	ldd	r26, Y+4	; 0x04
     2ce:	bd 81       	ldd	r27, Y+5	; 0x05
     2d0:	07 2e       	mov	r0, r23
     2d2:	7b e0       	ldi	r23, 0x0B	; 11
     2d4:	b6 95       	lsr	r27
     2d6:	a7 95       	ror	r26
     2d8:	97 95       	ror	r25
     2da:	87 95       	ror	r24
     2dc:	7a 95       	dec	r23
     2de:	d1 f7       	brne	.-12     	; 0x2d4 <setAcceptanceCriteria+0xa6>
     2e0:	70 2d       	mov	r23, r0
     2e2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
     2e6:	14 c0       	rjmp	.+40     	; 0x310 <setAcceptanceCriteria+0xe2>
	 } else {
	 spiMasterTRANSMIT((unsigned char)(criterion >> 3));
     2e8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ea:	9b 81       	ldd	r25, Y+3	; 0x03
     2ec:	ac 81       	ldd	r26, Y+4	; 0x04
     2ee:	bd 81       	ldd	r27, Y+5	; 0x05
     2f0:	68 94       	set
     2f2:	12 f8       	bld	r1, 2
     2f4:	b6 95       	lsr	r27
     2f6:	a7 95       	ror	r26
     2f8:	97 95       	ror	r25
     2fa:	87 95       	ror	r24
     2fc:	16 94       	lsr	r1
     2fe:	d1 f7       	brne	.-12     	; 0x2f4 <setAcceptanceCriteria+0xc6>
     300:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion << 5));
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	82 95       	swap	r24
     308:	88 0f       	add	r24, r24
     30a:	80 7e       	andi	r24, 0xE0	; 224
     30c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 }
	 /* Release the bus */
	 spiMasterChipSelect(0);
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
}
     316:	26 96       	adiw	r28, 0x06	; 6
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
     322:	cf 91       	pop	r28
     324:	df 91       	pop	r29
     326:	08 95       	ret

00000328 <initMCP2515>:

/* Configuration routine */
void initMCP2515(void)
{
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
	/* Initialize SPI as a master device, on frequency < 10Mhz */
	 spiMasterINIT();
     330:	0e 94 dd 02 	call	0x5ba	; 0x5ba <spiMasterINIT>
	/* Initialize external interrupt service on this device */
	 extInterruptINIT(interruptMCP2515);
     334:	80 eb       	ldi	r24, 0xB0	; 176
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	0e 94 47 03 	call	0x68e	; 0x68e <extInterruptINIT>
	/* Send reset instruction */
	 resetMCP2515();
     33c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <resetMCP2515>
	/* Set configuration mode */
	 setMode(CONFIGURATION_MODE);
     340:	8f e0       	ldi	r24, 0x0F	; 15
     342:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     346:	8f 71       	andi	r24, 0x1F	; 31
     348:	80 68       	ori	r24, 0x80	; 128
     34a:	98 2f       	mov	r25, r24
     34c:	8f e0       	ldi	r24, 0x0F	; 15
     34e:	69 2f       	mov	r22, r25
     350:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
     354:	8e e0       	ldi	r24, 0x0E	; 14
     356:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     35a:	82 95       	swap	r24
     35c:	86 95       	lsr	r24
     35e:	87 70       	andi	r24, 0x07	; 7
     360:	84 30       	cpi	r24, 0x04	; 4
     362:	c1 f7       	brne	.-16     	; 0x354 <initMCP2515+0x2c>
	/* Set bit timing , masks and rollover mode*/
	 setBitTiming(0x04, 0xD2, 0x42);
     364:	84 e0       	ldi	r24, 0x04	; 4
     366:	62 ed       	ldi	r22, 0xD2	; 210
     368:	42 e4       	ldi	r20, 0x42	; 66
     36a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <setBitTiming>
	 setMask(RXM0, 0x00000000, 1);
     36e:	84 e3       	ldi	r24, 0x34	; 52
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	ba 01       	movw	r22, r20
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	0e 94 17 01 	call	0x22e	; 0x22e <setAcceptanceCriteria>
	 setMask(RXM1, 0x00000000, 1);
     37c:	88 e3       	ldi	r24, 0x38	; 56
     37e:	40 e0       	ldi	r20, 0x00	; 0
     380:	50 e0       	ldi	r21, 0x00	; 0
     382:	ba 01       	movw	r22, r20
     384:	21 e0       	ldi	r18, 0x01	; 1
     386:	0e 94 17 01 	call	0x22e	; 0x22e <setAcceptanceCriteria>
	 setRollover(1);
     38a:	80 e6       	ldi	r24, 0x60	; 96
     38c:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     390:	88 7f       	andi	r24, 0xF8	; 248
     392:	84 60       	ori	r24, 0x04	; 4
     394:	98 2f       	mov	r25, r24
     396:	80 e6       	ldi	r24, 0x60	; 96
     398:	69 2f       	mov	r22, r25
     39a:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
	/* Get into normal mode and setup communication */
	 setMode(NORMAL_MODE)
     39e:	8f e0       	ldi	r24, 0x0F	; 15
     3a0:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     3a4:	98 2f       	mov	r25, r24
     3a6:	9f 71       	andi	r25, 0x1F	; 31
     3a8:	8f e0       	ldi	r24, 0x0F	; 15
     3aa:	69 2f       	mov	r22, r25
     3ac:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
     3b0:	8e e0       	ldi	r24, 0x0E	; 14
     3b2:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     3b6:	82 95       	swap	r24
     3b8:	86 95       	lsr	r24
     3ba:	87 70       	andi	r24, 0x07	; 7
     3bc:	88 23       	and	r24, r24
     3be:	c1 f7       	brne	.-16     	; 0x3b0 <initMCP2515+0x88>
}
     3c0:	cf 91       	pop	r28
     3c2:	df 91       	pop	r29
     3c4:	08 95       	ret

000003c6 <sendCANmsg>:
 * - bits 7:6 - message priority (higher the better)
 * - bit 5 - if set, message is remote request (RTR)
 * - bit 4 - if set, message is considered to have ext. id.
 * - bits 3:0 - message length (0 to 8 bytes) */
void sendCANmsg(unsigned char bi,unsigned long id,unsigned char * data,unsigned char prop)
{
     3c6:	0f 93       	push	r16
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	29 97       	sbiw	r28, 0x09	; 9
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	8a 83       	std	Y+2, r24	; 0x02
     3de:	4b 83       	std	Y+3, r20	; 0x03
     3e0:	5c 83       	std	Y+4, r21	; 0x04
     3e2:	6d 83       	std	Y+5, r22	; 0x05
     3e4:	7e 83       	std	Y+6, r23	; 0x06
     3e6:	38 87       	std	Y+8, r19	; 0x08
     3e8:	2f 83       	std	Y+7, r18	; 0x07
     3ea:	09 87       	std	Y+9, r16	; 0x09
	/* Initialize reading of the receive buffer */
	 spiMasterChipSelect(1);
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	/* Send header and address */
	 spiMasterTRANSMIT(WRITE_INSTRUCTION);
     3f2:	82 e0       	ldi	r24, 0x02	; 2
     3f4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(TXBnCTRL(bi));
     3f8:	8a 81       	ldd	r24, Y+2	; 0x02
     3fa:	88 2f       	mov	r24, r24
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	03 96       	adiw	r24, 0x03	; 3
     400:	82 95       	swap	r24
     402:	80 7f       	andi	r24, 0xF0	; 240
     404:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 /* Setup message priority */
	 spiMasterTRANSMIT(prop >> 6);
     408:	89 85       	ldd	r24, Y+9	; 0x09
     40a:	82 95       	swap	r24
     40c:	86 95       	lsr	r24
     40e:	86 95       	lsr	r24
     410:	83 70       	andi	r24, 0x03	; 3
     412:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	/* Setup standard or extended identifier */
	 if(prop & 0x10) {
     416:	89 85       	ldd	r24, Y+9	; 0x09
     418:	88 2f       	mov	r24, r24
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	80 71       	andi	r24, 0x10	; 16
     41e:	90 70       	andi	r25, 0x00	; 0
     420:	00 97       	sbiw	r24, 0x00	; 0
     422:	09 f4       	brne	.+2      	; 0x426 <sendCANmsg+0x60>
     424:	43 c0       	rjmp	.+134    	; 0x4ac <sendCANmsg+0xe6>
	 spiMasterTRANSMIT((unsigned char)(id>>3));
     426:	8b 81       	ldd	r24, Y+3	; 0x03
     428:	9c 81       	ldd	r25, Y+4	; 0x04
     42a:	ad 81       	ldd	r26, Y+5	; 0x05
     42c:	be 81       	ldd	r27, Y+6	; 0x06
     42e:	68 94       	set
     430:	12 f8       	bld	r1, 2
     432:	b6 95       	lsr	r27
     434:	a7 95       	ror	r26
     436:	97 95       	ror	r25
     438:	87 95       	ror	r24
     43a:	16 94       	lsr	r1
     43c:	d1 f7       	brne	.-12     	; 0x432 <sendCANmsg+0x6c>
     43e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id<<5)|(1<<EXIDE)|((unsigned char)(id>>27)));
     442:	8b 81       	ldd	r24, Y+3	; 0x03
     444:	28 2f       	mov	r18, r24
     446:	22 95       	swap	r18
     448:	22 0f       	add	r18, r18
     44a:	20 7e       	andi	r18, 0xE0	; 224
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	9c 81       	ldd	r25, Y+4	; 0x04
     450:	ad 81       	ldd	r26, Y+5	; 0x05
     452:	be 81       	ldd	r27, Y+6	; 0x06
     454:	07 2e       	mov	r0, r23
     456:	7b e1       	ldi	r23, 0x1B	; 27
     458:	b6 95       	lsr	r27
     45a:	a7 95       	ror	r26
     45c:	97 95       	ror	r25
     45e:	87 95       	ror	r24
     460:	7a 95       	dec	r23
     462:	d1 f7       	brne	.-12     	; 0x458 <sendCANmsg+0x92>
     464:	70 2d       	mov	r23, r0
     466:	82 2b       	or	r24, r18
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id>>19));
     46e:	8b 81       	ldd	r24, Y+3	; 0x03
     470:	9c 81       	ldd	r25, Y+4	; 0x04
     472:	ad 81       	ldd	r26, Y+5	; 0x05
     474:	be 81       	ldd	r27, Y+6	; 0x06
     476:	07 2e       	mov	r0, r23
     478:	73 e1       	ldi	r23, 0x13	; 19
     47a:	b6 95       	lsr	r27
     47c:	a7 95       	ror	r26
     47e:	97 95       	ror	r25
     480:	87 95       	ror	r24
     482:	7a 95       	dec	r23
     484:	d1 f7       	brne	.-12     	; 0x47a <sendCANmsg+0xb4>
     486:	70 2d       	mov	r23, r0
     488:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id>>11));
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	9c 81       	ldd	r25, Y+4	; 0x04
     490:	ad 81       	ldd	r26, Y+5	; 0x05
     492:	be 81       	ldd	r27, Y+6	; 0x06
     494:	07 2e       	mov	r0, r23
     496:	7b e0       	ldi	r23, 0x0B	; 11
     498:	b6 95       	lsr	r27
     49a:	a7 95       	ror	r26
     49c:	97 95       	ror	r25
     49e:	87 95       	ror	r24
     4a0:	7a 95       	dec	r23
     4a2:	d1 f7       	brne	.-12     	; 0x498 <sendCANmsg+0xd2>
     4a4:	70 2d       	mov	r23, r0
     4a6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
     4aa:	14 c0       	rjmp	.+40     	; 0x4d4 <sendCANmsg+0x10e>
	 } else {
	 spiMasterTRANSMIT((unsigned char)(id>>3));
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	9c 81       	ldd	r25, Y+4	; 0x04
     4b0:	ad 81       	ldd	r26, Y+5	; 0x05
     4b2:	be 81       	ldd	r27, Y+6	; 0x06
     4b4:	68 94       	set
     4b6:	12 f8       	bld	r1, 2
     4b8:	b6 95       	lsr	r27
     4ba:	a7 95       	ror	r26
     4bc:	97 95       	ror	r25
     4be:	87 95       	ror	r24
     4c0:	16 94       	lsr	r1
     4c2:	d1 f7       	brne	.-12     	; 0x4b8 <sendCANmsg+0xf2>
     4c4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id<<5));
     4c8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ca:	82 95       	swap	r24
     4cc:	88 0f       	add	r24, r24
     4ce:	80 7e       	andi	r24, 0xE0	; 224
     4d0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 }
	 /* Setup message length and RTR bit */
	 spiMasterTRANSMIT((prop & 0x0F) | ((prop & 0x20) ? (1 << RTR) : 0));
     4d4:	89 85       	ldd	r24, Y+9	; 0x09
     4d6:	28 2f       	mov	r18, r24
     4d8:	2f 70       	andi	r18, 0x0F	; 15
     4da:	89 85       	ldd	r24, Y+9	; 0x09
     4dc:	88 2f       	mov	r24, r24
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	80 72       	andi	r24, 0x20	; 32
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	00 97       	sbiw	r24, 0x00	; 0
     4e6:	11 f0       	breq	.+4      	; 0x4ec <sendCANmsg+0x126>
     4e8:	80 e4       	ldi	r24, 0x40	; 64
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <sendCANmsg+0x128>
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	82 2b       	or	r24, r18
     4f0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	/* Store the message into the buffer */
	 for(unsigned char i = 0; i < (prop & 0x0F); i++)
     4f4:	19 82       	std	Y+1, r1	; 0x01
     4f6:	0e c0       	rjmp	.+28     	; 0x514 <sendCANmsg+0x14e>
	 spiMasterTRANSMIT(data[i]);
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	88 2f       	mov	r24, r24
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	2f 81       	ldd	r18, Y+7	; 0x07
     500:	38 85       	ldd	r19, Y+8	; 0x08
     502:	82 0f       	add	r24, r18
     504:	93 1f       	adc	r25, r19
     506:	fc 01       	movw	r30, r24
     508:	80 81       	ld	r24, Z
     50a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id<<5));
	 }
	 /* Setup message length and RTR bit */
	 spiMasterTRANSMIT((prop & 0x0F) | ((prop & 0x20) ? (1 << RTR) : 0));
	/* Store the message into the buffer */
	 for(unsigned char i = 0; i < (prop & 0x0F); i++)
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	8f 5f       	subi	r24, 0xFF	; 255
     512:	89 83       	std	Y+1, r24	; 0x01
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	28 2f       	mov	r18, r24
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	89 85       	ldd	r24, Y+9	; 0x09
     51c:	88 2f       	mov	r24, r24
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	8f 70       	andi	r24, 0x0F	; 15
     522:	90 70       	andi	r25, 0x00	; 0
     524:	28 17       	cp	r18, r24
     526:	39 07       	cpc	r19, r25
     528:	3c f3       	brlt	.-50     	; 0x4f8 <sendCANmsg+0x132>
	 spiMasterTRANSMIT(data[i]);
	 /* Send request to send */
	 sendRTS(bi);
     52a:	82 e0       	ldi	r24, 0x02	; 2
     52c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
     530:	80 e8       	ldi	r24, 0x80	; 128
     532:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
     536:	8a 81       	ldd	r24, Y+2	; 0x02
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	03 96       	adiw	r24, 0x03	; 3
     53e:	82 95       	swap	r24
     540:	80 7f       	andi	r24, 0xF0	; 240
     542:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	/* Release the bus */
	 spiMasterChipSelect(0);
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	
}
     54c:	29 96       	adiw	r28, 0x09	; 9
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	0f 91       	pop	r16
     55e:	08 95       	ret

00000560 <interruptMCP2515>:

void interruptMCP2515(void)
{
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	df 93       	push	r29
     566:	cf 93       	push	r28
     568:	0f 92       	push	r0
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
	 
	 /* Copy the message from the device and release buffer */
	 spiMasterTRANSMIT(READ_INSTRUCTION);
     56e:	83 e0       	ldi	r24, 0x03	; 3
     570:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(RXBnCTRL(0));
     574:	80 e6       	ldi	r24, 0x60	; 96
     576:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 /* Make the local copy */
	 for(unsigned char i=0; i < 14; i++)
     57a:	19 82       	std	Y+1, r1	; 0x01
     57c:	0f c0       	rjmp	.+30     	; 0x59c <interruptMCP2515+0x3c>
	 rbuffer[i] = spiMasterTRANSMIT(0);
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	08 2f       	mov	r16, r24
     582:	10 e0       	ldi	r17, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
     58a:	28 2f       	mov	r18, r24
     58c:	c8 01       	movw	r24, r16
     58e:	86 5f       	subi	r24, 0xF6	; 246
     590:	9d 4f       	sbci	r25, 0xFD	; 253
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
	 
	 /* Copy the message from the device and release buffer */
	 spiMasterTRANSMIT(READ_INSTRUCTION);
	 spiMasterTRANSMIT(RXBnCTRL(0));
	 /* Make the local copy */
	 for(unsigned char i=0; i < 14; i++)
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	89 83       	std	Y+1, r24	; 0x01
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	8e 30       	cpi	r24, 0x0E	; 14
     5a0:	70 f3       	brcs	.-36     	; 0x57e <interruptMCP2515+0x1e>
	 rbuffer[i] = spiMasterTRANSMIT(0);
	 msgReceived  = rbuffer;
     5a2:	8a e0       	ldi	r24, 0x0A	; 10
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	90 93 09 02 	sts	0x0209, r25
     5aa:	80 93 08 02 	sts	0x0208, r24
     5ae:	0f 90       	pop	r0
     5b0:	cf 91       	pop	r28
     5b2:	df 91       	pop	r29
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	08 95       	ret

000005ba <spiMasterINIT>:
 *
 * \warning This is platform-dependent method!
 *
 */
void spiMasterINIT()
{
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	 DDR_SPI = (1<<PIN_MOSI)|(1<<PIN_SCK)|(1<<PIN_SS);
     5c2:	84 e2       	ldi	r24, 0x24	; 36
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	2c e2       	ldi	r18, 0x2C	; 44
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18
	 PORT_SPI |= (1 << PIN_SS);
     5cc:	85 e2       	ldi	r24, 0x25	; 37
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	25 e2       	ldi	r18, 0x25	; 37
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	24 60       	ori	r18, 0x04	; 4
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
	/* Enable SPI, Master, set clock rate fck/4, mode 0,0 */
	 SPCR = (1<<SPE) | (1<<MSTR);
     5de:	8c e4       	ldi	r24, 0x4C	; 76
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	20 e5       	ldi	r18, 0x50	; 80
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18
	// SPSR = (1<<SPI2X);
	SPSR = 0X00;
     5e8:	8d e4       	ldi	r24, 0x4D	; 77
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	fc 01       	movw	r30, r24
     5ee:	10 82       	st	Z, r1
}
     5f0:	cf 91       	pop	r28
     5f2:	df 91       	pop	r29
     5f4:	08 95       	ret

000005f6 <spiMasterTRANSMIT>:
 * \param data[] Source data array
 * \param length Array length
 *
 */
unsigned char spiMasterTRANSMIT(unsigned char data)
{
     5f6:	df 93       	push	r29
     5f8:	cf 93       	push	r28
     5fa:	0f 92       	push	r0
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
     600:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	 SPDR = data;
     602:	8e e4       	ldi	r24, 0x4E	; 78
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	29 81       	ldd	r18, Y+1	; 0x01
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
	/* Wait for transmission complete */
	 while(!(SPSR & (1<<SPIF)));
     60c:	00 00       	nop
     60e:	8d e4       	ldi	r24, 0x4D	; 77
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	fc 01       	movw	r30, r24
     614:	80 81       	ld	r24, Z
     616:	88 23       	and	r24, r24
     618:	d4 f7       	brge	.-12     	; 0x60e <spiMasterTRANSMIT+0x18>
	/* SPDR must be stored as quickly
	 as possible (ref. ATMegaX ds) */
	 return SPDR;
     61a:	8e e4       	ldi	r24, 0x4E	; 78
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	fc 01       	movw	r30, r24
     620:	80 81       	ld	r24, Z
}
     622:	0f 90       	pop	r0
     624:	cf 91       	pop	r28
     626:	df 91       	pop	r29
     628:	08 95       	ret

0000062a <spiMasterChipSelect>:
 *
 * \warning This is platform-dependent method!
 * \param state Wished state
 */
void spiMasterChipSelect(unsigned char state)
{
     62a:	df 93       	push	r29
     62c:	cf 93       	push	r28
     62e:	0f 92       	push	r0
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	89 83       	std	Y+1, r24	; 0x01
	/* What the user wants? (remember that the CS signal is inverted) */
	 if(!state) {
     636:	89 81       	ldd	r24, Y+1	; 0x01
     638:	88 23       	and	r24, r24
     63a:	99 f4       	brne	.+38     	; 0x662 <spiMasterChipSelect+0x38>
	 /* Upper the CS pin */
	 PORT_SPI |= (1<<PIN_SS);
     63c:	85 e2       	ldi	r24, 0x25	; 37
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	25 e2       	ldi	r18, 0x25	; 37
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	f9 01       	movw	r30, r18
     646:	20 81       	ld	r18, Z
     648:	24 60       	ori	r18, 0x04	; 4
     64a:	fc 01       	movw	r30, r24
     64c:	20 83       	st	Z, r18
	 DDR_SPI |= (1<<PIN_SS);
     64e:	84 e2       	ldi	r24, 0x24	; 36
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	24 e2       	ldi	r18, 0x24	; 36
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	f9 01       	movw	r30, r18
     658:	20 81       	ld	r18, Z
     65a:	24 60       	ori	r18, 0x04	; 4
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
     660:	12 c0       	rjmp	.+36     	; 0x686 <spiMasterChipSelect+0x5c>
	 } else {
	 /* Lower the CS pin */
	 PORT_SPI &= ~(1<<PIN_SS);
     662:	85 e2       	ldi	r24, 0x25	; 37
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	25 e2       	ldi	r18, 0x25	; 37
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	f9 01       	movw	r30, r18
     66c:	20 81       	ld	r18, Z
     66e:	2b 7f       	andi	r18, 0xFB	; 251
     670:	fc 01       	movw	r30, r24
     672:	20 83       	st	Z, r18
	 DDR_SPI |= (1<<PIN_SS);
     674:	84 e2       	ldi	r24, 0x24	; 36
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	24 e2       	ldi	r18, 0x24	; 36
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	f9 01       	movw	r30, r18
     67e:	20 81       	ld	r18, Z
     680:	24 60       	ori	r18, 0x04	; 4
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
	 }
}
     686:	0f 90       	pop	r0
     688:	cf 91       	pop	r28
     68a:	df 91       	pop	r29
     68c:	08 95       	ret

0000068e <extInterruptINIT>:
/** Initialization of hardware ext. interrupts
 * \param *handler pointer to a function which handle occured interrupt.
 * \return nothing
 */
void extInterruptINIT(void (*handler)(void))
{
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	00 d0       	rcall	.+0      	; 0x694 <extInterruptINIT+0x6>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	9a 83       	std	Y+2, r25	; 0x02
     69a:	89 83       	std	Y+1, r24	; 0x01
	/* Set function pointer */
	 int_handler = handler;
     69c:	89 81       	ldd	r24, Y+1	; 0x01
     69e:	9a 81       	ldd	r25, Y+2	; 0x02
     6a0:	90 93 19 02 	sts	0x0219, r25
     6a4:	80 93 18 02 	sts	0x0218, r24
	/* Initialize external interrupt on pin INT0 on failing edge */
	 EICRA |= (1 << ISC01);
     6a8:	89 e6       	ldi	r24, 0x69	; 105
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	29 e6       	ldi	r18, 0x69	; 105
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	f9 01       	movw	r30, r18
     6b2:	20 81       	ld	r18, Z
     6b4:	22 60       	ori	r18, 0x02	; 2
     6b6:	fc 01       	movw	r30, r24
     6b8:	20 83       	st	Z, r18
	 EIMSK |= (1 << INT0);
     6ba:	8d e3       	ldi	r24, 0x3D	; 61
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	2d e3       	ldi	r18, 0x3D	; 61
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	f9 01       	movw	r30, r18
     6c4:	20 81       	ld	r18, Z
     6c6:	21 60       	ori	r18, 0x01	; 1
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18
}
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	cf 91       	pop	r28
     6d2:	df 91       	pop	r29
     6d4:	08 95       	ret

000006d6 <__vector_1>:
/* System interrupt handler */
ISR(INT0_vect)
{
     6d6:	1f 92       	push	r1
     6d8:	0f 92       	push	r0
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	0f 92       	push	r0
     6de:	11 24       	eor	r1, r1
     6e0:	2f 93       	push	r18
     6e2:	3f 93       	push	r19
     6e4:	4f 93       	push	r20
     6e6:	5f 93       	push	r21
     6e8:	6f 93       	push	r22
     6ea:	7f 93       	push	r23
     6ec:	8f 93       	push	r24
     6ee:	9f 93       	push	r25
     6f0:	af 93       	push	r26
     6f2:	bf 93       	push	r27
     6f4:	ef 93       	push	r30
     6f6:	ff 93       	push	r31
     6f8:	df 93       	push	r29
     6fa:	cf 93       	push	r28
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
	int_handler();
     700:	80 91 18 02 	lds	r24, 0x0218
     704:	90 91 19 02 	lds	r25, 0x0219
     708:	fc 01       	movw	r30, r24
     70a:	09 95       	icall
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	ff 91       	pop	r31
     712:	ef 91       	pop	r30
     714:	bf 91       	pop	r27
     716:	af 91       	pop	r26
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	7f 91       	pop	r23
     71e:	6f 91       	pop	r22
     720:	5f 91       	pop	r21
     722:	4f 91       	pop	r20
     724:	3f 91       	pop	r19
     726:	2f 91       	pop	r18
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <main>:
#include <avr/interrupt.h>
#include "AVR_CAN.h"
#include "ADC.h"
#include "hc-sr04.h"
int main(void)
{
     732:	0f 93       	push	r16
     734:	df 93       	push	r29
     736:	cf 93       	push	r28
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	2f 97       	sbiw	r28, 0x0f	; 15
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
	DDRB=0xff;
     748:	84 e2       	ldi	r24, 0x24	; 36
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	2f ef       	ldi	r18, 0xFF	; 255
     74e:	fc 01       	movw	r30, r24
     750:	20 83       	st	Z, r18
	uint16_t ADC_Value;
	int temperature = 0;
     752:	1a 82       	std	Y+2, r1	; 0x02
     754:	19 82       	std	Y+1, r1	; 0x01
	unsigned char buffer[10];

	unsigned char buffer_size=0;
     756:	1b 82       	std	Y+3, r1	; 0x03
	//Button SetUp Using Interrupt
	DDRD |= 0x02; 
     758:	8a e2       	ldi	r24, 0x2A	; 42
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	2a e2       	ldi	r18, 0x2A	; 42
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	f9 01       	movw	r30, r18
     762:	20 81       	ld	r18, Z
     764:	22 60       	ori	r18, 0x02	; 2
     766:	fc 01       	movw	r30, r24
     768:	20 83       	st	Z, r18
	EIMSK =(1<<INT1);
     76a:	8d e3       	ldi	r24, 0x3D	; 61
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	22 e0       	ldi	r18, 0x02	; 2
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
	EICRA = 0x02;
     774:	89 e6       	ldi	r24, 0x69	; 105
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	22 e0       	ldi	r18, 0x02	; 2
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18
	sei();
     77e:	78 94       	sei
     780:	01 c0       	rjmp	.+2      	; 0x784 <main+0x52>
			itoa(temperature,(char*)buffer,10);
			buffer_size =sizeof(buffer)/sizeof(char);
		
		   sendCANmsg(0,0x06,buffer,buffer_size);
		}
	  }
     782:	00 00       	nop
	sei();

	while(1)
	{

		ADC_Value = Analog_Read(0); 
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 75 00 	call	0xea	; 0xea <Analog_Read>
     78a:	9d 83       	std	Y+5, r25	; 0x05
     78c:	8c 83       	std	Y+4, r24	; 0x04
		temperature =(ADC_Value*500)/1023; 
     78e:	4c 81       	ldd	r20, Y+4	; 0x04
     790:	5d 81       	ldd	r21, Y+5	; 0x05
     792:	24 ef       	ldi	r18, 0xF4	; 244
     794:	31 e0       	ldi	r19, 0x01	; 1
     796:	42 9f       	mul	r20, r18
     798:	c0 01       	movw	r24, r0
     79a:	43 9f       	mul	r20, r19
     79c:	90 0d       	add	r25, r0
     79e:	52 9f       	mul	r21, r18
     7a0:	90 0d       	add	r25, r0
     7a2:	11 24       	eor	r1, r1
     7a4:	2f ef       	ldi	r18, 0xFF	; 255
     7a6:	33 e0       	ldi	r19, 0x03	; 3
     7a8:	b9 01       	movw	r22, r18
     7aa:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     7ae:	9b 01       	movw	r18, r22
     7b0:	c9 01       	movw	r24, r18
     7b2:	9a 83       	std	Y+2, r25	; 0x02
     7b4:	89 83       	std	Y+1, r24	; 0x01


		if(temperature>=30)
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ba:	8e 31       	cpi	r24, 0x1E	; 30
     7bc:	91 05       	cpc	r25, r1
     7be:	0c f3       	brlt	.-62     	; 0x782 <main+0x50>
		{
			itoa(temperature,(char*)buffer,10);
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	9a 81       	ldd	r25, Y+2	; 0x02
     7c4:	9e 01       	movw	r18, r28
     7c6:	2a 5f       	subi	r18, 0xFA	; 250
     7c8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ca:	b9 01       	movw	r22, r18
     7cc:	4a e0       	ldi	r20, 0x0A	; 10
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <itoa>
			buffer_size =sizeof(buffer)/sizeof(char);
     7d4:	8a e0       	ldi	r24, 0x0A	; 10
     7d6:	8b 83       	std	Y+3, r24	; 0x03
		
		   sendCANmsg(0,0x06,buffer,buffer_size);
     7d8:	9e 01       	movw	r18, r28
     7da:	2a 5f       	subi	r18, 0xFA	; 250
     7dc:	3f 4f       	sbci	r19, 0xFF	; 255
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	46 e0       	ldi	r20, 0x06	; 6
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	0b 81       	ldd	r16, Y+3	; 0x03
     7ea:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <sendCANmsg>
		}
	  }
     7ee:	ca cf       	rjmp	.-108    	; 0x784 <main+0x52>

000007f0 <__vector_11>:
int counts;
float dist;
uint16_t us_per_count;


ISR(TIMER1_COMPA_vect){
     7f0:	1f 92       	push	r1
     7f2:	0f 92       	push	r0
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	2f 93       	push	r18
     800:	3f 93       	push	r19
     802:	4f 93       	push	r20
     804:	5f 93       	push	r21
     806:	6f 93       	push	r22
     808:	7f 93       	push	r23
     80a:	8f 93       	push	r24
     80c:	9f 93       	push	r25
     80e:	af 93       	push	r26
     810:	bf 93       	push	r27
     812:	ef 93       	push	r30
     814:	ff 93       	push	r31
     816:	df 93       	push	r29
     818:	cf 93       	push	r28
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	68 97       	sbiw	r28, 0x18	; 24
     820:	de bf       	out	0x3e, r29	; 62
     822:	cd bf       	out	0x3d, r28	; 61

    //Generate a 12us pulse to trigger the HR-SR04
    PORTB ^= ( 1 << PORTB1);
     824:	85 e2       	ldi	r24, 0x25	; 37
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	25 e2       	ldi	r18, 0x25	; 37
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	f9 01       	movw	r30, r18
     82e:	30 81       	ld	r19, Z
     830:	22 e0       	ldi	r18, 0x02	; 2
     832:	23 27       	eor	r18, r19
     834:	fc 01       	movw	r30, r24
     836:	20 83       	st	Z, r18
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	a0 e4       	ldi	r26, 0x40	; 64
     83e:	b1 e4       	ldi	r27, 0x41	; 65
     840:	89 83       	std	Y+1, r24	; 0x01
     842:	9a 83       	std	Y+2, r25	; 0x02
     844:	ab 83       	std	Y+3, r26	; 0x03
     846:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     848:	69 81       	ldd	r22, Y+1	; 0x01
     84a:	7a 81       	ldd	r23, Y+2	; 0x02
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	9c 81       	ldd	r25, Y+4	; 0x04
     850:	2b ea       	ldi	r18, 0xAB	; 171
     852:	3a ea       	ldi	r19, 0xAA	; 170
     854:	4a ea       	ldi	r20, 0xAA	; 170
     856:	5e e3       	ldi	r21, 0x3E	; 62
     858:	0e 94 ef 07 	call	0xfde	; 0xfde <__mulsf3>
     85c:	dc 01       	movw	r26, r24
     85e:	cb 01       	movw	r24, r22
     860:	8d 83       	std	Y+5, r24	; 0x05
     862:	9e 83       	std	Y+6, r25	; 0x06
     864:	af 83       	std	Y+7, r26	; 0x07
     866:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     868:	11 e0       	ldi	r17, 0x01	; 1
     86a:	6d 81       	ldd	r22, Y+5	; 0x05
     86c:	7e 81       	ldd	r23, Y+6	; 0x06
     86e:	8f 81       	ldd	r24, Y+7	; 0x07
     870:	98 85       	ldd	r25, Y+8	; 0x08
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e8       	ldi	r20, 0x80	; 128
     878:	5f e3       	ldi	r21, 0x3F	; 63
     87a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__ltsf2>
     87e:	88 23       	and	r24, r24
     880:	0c f0       	brlt	.+2      	; 0x884 <__vector_11+0x94>
     882:	10 e0       	ldi	r17, 0x00	; 0
     884:	11 23       	and	r17, r17
     886:	19 f0       	breq	.+6      	; 0x88e <__vector_11+0x9e>
		__ticks = 1;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	89 87       	std	Y+9, r24	; 0x09
     88c:	a3 c0       	rjmp	.+326    	; 0x9d4 <__stack+0xd5>
	else if (__tmp > 255)
     88e:	11 e0       	ldi	r17, 0x01	; 1
     890:	6d 81       	ldd	r22, Y+5	; 0x05
     892:	7e 81       	ldd	r23, Y+6	; 0x06
     894:	8f 81       	ldd	r24, Y+7	; 0x07
     896:	98 85       	ldd	r25, Y+8	; 0x08
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	4f e7       	ldi	r20, 0x7F	; 127
     89e:	53 e4       	ldi	r21, 0x43	; 67
     8a0:	0e 94 97 09 	call	0x132e	; 0x132e <__gtsf2>
     8a4:	18 16       	cp	r1, r24
     8a6:	0c f0       	brlt	.+2      	; 0x8aa <__vector_11+0xba>
     8a8:	10 e0       	ldi	r17, 0x00	; 0
     8aa:	11 23       	and	r17, r17
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <__vector_11+0xc0>
     8ae:	89 c0       	rjmp	.+274    	; 0x9c2 <__stack+0xc3>
	{
		_delay_ms(__us / 1000.0);
     8b0:	69 81       	ldd	r22, Y+1	; 0x01
     8b2:	7a 81       	ldd	r23, Y+2	; 0x02
     8b4:	8b 81       	ldd	r24, Y+3	; 0x03
     8b6:	9c 81       	ldd	r25, Y+4	; 0x04
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	4a e7       	ldi	r20, 0x7A	; 122
     8be:	54 e4       	ldi	r21, 0x44	; 68
     8c0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__divsf3>
     8c4:	dc 01       	movw	r26, r24
     8c6:	cb 01       	movw	r24, r22
     8c8:	8a 87       	std	Y+10, r24	; 0x0a
     8ca:	9b 87       	std	Y+11, r25	; 0x0b
     8cc:	ac 87       	std	Y+12, r26	; 0x0c
     8ce:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     8d0:	6a 85       	ldd	r22, Y+10	; 0x0a
     8d2:	7b 85       	ldd	r23, Y+11	; 0x0b
     8d4:	8c 85       	ldd	r24, Y+12	; 0x0c
     8d6:	9d 85       	ldd	r25, Y+13	; 0x0d
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	4a e7       	ldi	r20, 0x7A	; 122
     8de:	53 e4       	ldi	r21, 0x43	; 67
     8e0:	0e 94 ef 07 	call	0xfde	; 0xfde <__mulsf3>
     8e4:	dc 01       	movw	r26, r24
     8e6:	cb 01       	movw	r24, r22
     8e8:	8e 87       	std	Y+14, r24	; 0x0e
     8ea:	9f 87       	std	Y+15, r25	; 0x0f
     8ec:	a8 8b       	std	Y+16, r26	; 0x10
     8ee:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     8f0:	11 e0       	ldi	r17, 0x01	; 1
     8f2:	6e 85       	ldd	r22, Y+14	; 0x0e
     8f4:	7f 85       	ldd	r23, Y+15	; 0x0f
     8f6:	88 89       	ldd	r24, Y+16	; 0x10
     8f8:	99 89       	ldd	r25, Y+17	; 0x11
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	40 e8       	ldi	r20, 0x80	; 128
     900:	5f e3       	ldi	r21, 0x3F	; 63
     902:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__ltsf2>
     906:	88 23       	and	r24, r24
     908:	0c f0       	brlt	.+2      	; 0x90c <__stack+0xd>
     90a:	10 e0       	ldi	r17, 0x00	; 0
     90c:	11 23       	and	r17, r17
     90e:	29 f0       	breq	.+10     	; 0x91a <__stack+0x1b>
		__ticks = 1;
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	9b 8b       	std	Y+19, r25	; 0x13
     916:	8a 8b       	std	Y+18, r24	; 0x12
     918:	46 c0       	rjmp	.+140    	; 0x9a6 <__stack+0xa7>
	else if (__tmp > 65535)
     91a:	11 e0       	ldi	r17, 0x01	; 1
     91c:	6e 85       	ldd	r22, Y+14	; 0x0e
     91e:	7f 85       	ldd	r23, Y+15	; 0x0f
     920:	88 89       	ldd	r24, Y+16	; 0x10
     922:	99 89       	ldd	r25, Y+17	; 0x11
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f e7       	ldi	r20, 0x7F	; 127
     92a:	57 e4       	ldi	r21, 0x47	; 71
     92c:	0e 94 97 09 	call	0x132e	; 0x132e <__gtsf2>
     930:	18 16       	cp	r1, r24
     932:	0c f0       	brlt	.+2      	; 0x936 <__stack+0x37>
     934:	10 e0       	ldi	r17, 0x00	; 0
     936:	11 23       	and	r17, r17
     938:	61 f1       	breq	.+88     	; 0x992 <__stack+0x93>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     93a:	6a 85       	ldd	r22, Y+10	; 0x0a
     93c:	7b 85       	ldd	r23, Y+11	; 0x0b
     93e:	8c 85       	ldd	r24, Y+12	; 0x0c
     940:	9d 85       	ldd	r25, Y+13	; 0x0d
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e2       	ldi	r20, 0x20	; 32
     948:	51 e4       	ldi	r21, 0x41	; 65
     94a:	0e 94 ef 07 	call	0xfde	; 0xfde <__mulsf3>
     94e:	dc 01       	movw	r26, r24
     950:	cb 01       	movw	r24, r22
     952:	bc 01       	movw	r22, r24
     954:	cd 01       	movw	r24, r26
     956:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fixunssfsi>
     95a:	dc 01       	movw	r26, r24
     95c:	cb 01       	movw	r24, r22
     95e:	9b 8b       	std	Y+19, r25	; 0x13
     960:	8a 8b       	std	Y+18, r24	; 0x12
     962:	12 c0       	rjmp	.+36     	; 0x988 <__stack+0x89>
     964:	89 e1       	ldi	r24, 0x19	; 25
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	9d 8b       	std	Y+21, r25	; 0x15
     96a:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     96c:	8c 89       	ldd	r24, Y+20	; 0x14
     96e:	9d 89       	ldd	r25, Y+21	; 0x15
     970:	8c 01       	movw	r16, r24
     972:	c8 01       	movw	r24, r16
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <__stack+0x75>
     978:	8c 01       	movw	r16, r24
     97a:	1d 8b       	std	Y+21, r17	; 0x15
     97c:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     97e:	8a 89       	ldd	r24, Y+18	; 0x12
     980:	9b 89       	ldd	r25, Y+19	; 0x13
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	9b 8b       	std	Y+19, r25	; 0x13
     986:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     988:	8a 89       	ldd	r24, Y+18	; 0x12
     98a:	9b 89       	ldd	r25, Y+19	; 0x13
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	51 f7       	brne	.-44     	; 0x964 <__stack+0x65>
     990:	28 c0       	rjmp	.+80     	; 0x9e2 <__stack+0xe3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     992:	6e 85       	ldd	r22, Y+14	; 0x0e
     994:	7f 85       	ldd	r23, Y+15	; 0x0f
     996:	88 89       	ldd	r24, Y+16	; 0x10
     998:	99 89       	ldd	r25, Y+17	; 0x11
     99a:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fixunssfsi>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	9b 8b       	std	Y+19, r25	; 0x13
     9a4:	8a 8b       	std	Y+18, r24	; 0x12
     9a6:	8a 89       	ldd	r24, Y+18	; 0x12
     9a8:	9b 89       	ldd	r25, Y+19	; 0x13
     9aa:	9f 8b       	std	Y+23, r25	; 0x17
     9ac:	8e 8b       	std	Y+22, r24	; 0x16
     9ae:	8e 89       	ldd	r24, Y+22	; 0x16
     9b0:	9f 89       	ldd	r25, Y+23	; 0x17
     9b2:	8c 01       	movw	r16, r24
     9b4:	f8 01       	movw	r30, r16
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <__stack+0xb7>
     9ba:	8f 01       	movw	r16, r30
     9bc:	1f 8b       	std	Y+23, r17	; 0x17
     9be:	0e 8b       	std	Y+22, r16	; 0x16
     9c0:	10 c0       	rjmp	.+32     	; 0x9e2 <__stack+0xe3>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     9c2:	6d 81       	ldd	r22, Y+5	; 0x05
     9c4:	7e 81       	ldd	r23, Y+6	; 0x06
     9c6:	8f 81       	ldd	r24, Y+7	; 0x07
     9c8:	98 85       	ldd	r25, Y+8	; 0x08
     9ca:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fixunssfsi>
     9ce:	dc 01       	movw	r26, r24
     9d0:	cb 01       	movw	r24, r22
     9d2:	89 87       	std	Y+9, r24	; 0x09
     9d4:	89 85       	ldd	r24, Y+9	; 0x09
     9d6:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9d8:	88 8d       	ldd	r24, Y+24	; 0x18
     9da:	18 2f       	mov	r17, r24
     9dc:	1a 95       	dec	r17
     9de:	f1 f7       	brne	.-4      	; 0x9dc <__stack+0xdd>
     9e0:	18 8f       	std	Y+24, r17	; 0x18
    _delay_us(12);
    PORTB ^= ( 1 << PORTB1);
     9e2:	85 e2       	ldi	r24, 0x25	; 37
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	25 e2       	ldi	r18, 0x25	; 37
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	f9 01       	movw	r30, r18
     9ec:	30 81       	ld	r19, Z
     9ee:	22 e0       	ldi	r18, 0x02	; 2
     9f0:	23 27       	eor	r18, r19
     9f2:	fc 01       	movw	r30, r24
     9f4:	20 83       	st	Z, r18
}
     9f6:	68 96       	adiw	r28, 0x18	; 24
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	cf 91       	pop	r28
     9fe:	df 91       	pop	r29
     a00:	ff 91       	pop	r31
     a02:	ef 91       	pop	r30
     a04:	bf 91       	pop	r27
     a06:	af 91       	pop	r26
     a08:	9f 91       	pop	r25
     a0a:	8f 91       	pop	r24
     a0c:	7f 91       	pop	r23
     a0e:	6f 91       	pop	r22
     a10:	5f 91       	pop	r21
     a12:	4f 91       	pop	r20
     a14:	3f 91       	pop	r19
     a16:	2f 91       	pop	r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	0f 90       	pop	r0
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	0f 90       	pop	r0
     a22:	1f 90       	pop	r1
     a24:	18 95       	reti

00000a26 <__vector_10>:

ISR(TIMER1_CAPT_vect){
     a26:	1f 92       	push	r1
     a28:	0f 92       	push	r0
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	0f 92       	push	r0
     a2e:	11 24       	eor	r1, r1
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	2f 93       	push	r18
     a3a:	3f 93       	push	r19
     a3c:	4f 93       	push	r20
     a3e:	5f 93       	push	r21
     a40:	6f 93       	push	r22
     a42:	7f 93       	push	r23
     a44:	8f 93       	push	r24
     a46:	9f 93       	push	r25
     a48:	af 93       	push	r26
     a4a:	bf 93       	push	r27
     a4c:	ef 93       	push	r30
     a4e:	ff 93       	push	r31
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62

    if(TCCR1B & (1 << ICES1)){
     a58:	81 e8       	ldi	r24, 0x81	; 129
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	fc 01       	movw	r30, r24
     a5e:	80 81       	ld	r24, Z
     a60:	88 2f       	mov	r24, r24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	80 74       	andi	r24, 0x40	; 64
     a66:	90 70       	andi	r25, 0x00	; 0
     a68:	00 97       	sbiw	r24, 0x00	; 0
     a6a:	99 f0       	breq	.+38     	; 0xa92 <__vector_10+0x6c>

        TCCR1B &= ~( 1 << ICES1);
     a6c:	81 e8       	ldi	r24, 0x81	; 129
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	21 e8       	ldi	r18, 0x81	; 129
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	f9 01       	movw	r30, r18
     a76:	20 81       	ld	r18, Z
     a78:	2f 7b       	andi	r18, 0xBF	; 191
     a7a:	fc 01       	movw	r30, r24
     a7c:	20 83       	st	Z, r18
        rising = ICR1;
     a7e:	86 e8       	ldi	r24, 0x86	; 134
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	fc 01       	movw	r30, r24
     a84:	80 81       	ld	r24, Z
     a86:	91 81       	ldd	r25, Z+1	; 0x01
     a88:	90 93 25 02 	sts	0x0225, r25
     a8c:	80 93 24 02 	sts	0x0224, r24
     a90:	5f c0       	rjmp	.+190    	; 0xb50 <__vector_10+0x12a>
    }
    else{
        TCCR1B |= (1 << ICES1);
     a92:	81 e8       	ldi	r24, 0x81	; 129
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	21 e8       	ldi	r18, 0x81	; 129
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	f9 01       	movw	r30, r18
     a9c:	20 81       	ld	r18, Z
     a9e:	20 64       	ori	r18, 0x40	; 64
     aa0:	fc 01       	movw	r30, r24
     aa2:	20 83       	st	Z, r18
        falling = ICR1;
     aa4:	86 e8       	ldi	r24, 0x86	; 134
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	fc 01       	movw	r30, r24
     aaa:	80 81       	ld	r24, Z
     aac:	91 81       	ldd	r25, Z+1	; 0x01
     aae:	90 93 1b 02 	sts	0x021B, r25
     ab2:	80 93 1a 02 	sts	0x021A, r24
        counts = falling - rising;
     ab6:	20 91 1a 02 	lds	r18, 0x021A
     aba:	30 91 1b 02 	lds	r19, 0x021B
     abe:	80 91 24 02 	lds	r24, 0x0224
     ac2:	90 91 25 02 	lds	r25, 0x0225
     ac6:	a9 01       	movw	r20, r18
     ac8:	48 1b       	sub	r20, r24
     aca:	59 0b       	sbc	r21, r25
     acc:	ca 01       	movw	r24, r20
     ace:	90 93 23 02 	sts	0x0223, r25
     ad2:	80 93 22 02 	sts	0x0222, r24
        dist = (float)us_per_count * counts * 10 / 580;
     ad6:	80 91 20 02 	lds	r24, 0x0220
     ada:	90 91 21 02 	lds	r25, 0x0221
     ade:	cc 01       	movw	r24, r24
     ae0:	a0 e0       	ldi	r26, 0x00	; 0
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	bc 01       	movw	r22, r24
     ae6:	cd 01       	movw	r24, r26
     ae8:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__floatunsisf>
     aec:	7b 01       	movw	r14, r22
     aee:	8c 01       	movw	r16, r24
     af0:	80 91 22 02 	lds	r24, 0x0222
     af4:	90 91 23 02 	lds	r25, 0x0223
     af8:	aa 27       	eor	r26, r26
     afa:	97 fd       	sbrc	r25, 7
     afc:	a0 95       	com	r26
     afe:	ba 2f       	mov	r27, r26
     b00:	bc 01       	movw	r22, r24
     b02:	cd 01       	movw	r24, r26
     b04:	0e 94 27 0a 	call	0x144e	; 0x144e <__floatsisf>
     b08:	9b 01       	movw	r18, r22
     b0a:	ac 01       	movw	r20, r24
     b0c:	c8 01       	movw	r24, r16
     b0e:	b7 01       	movw	r22, r14
     b10:	0e 94 ef 07 	call	0xfde	; 0xfde <__mulsf3>
     b14:	dc 01       	movw	r26, r24
     b16:	cb 01       	movw	r24, r22
     b18:	bc 01       	movw	r22, r24
     b1a:	cd 01       	movw	r24, r26
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e2       	ldi	r20, 0x20	; 32
     b22:	51 e4       	ldi	r21, 0x41	; 65
     b24:	0e 94 ef 07 	call	0xfde	; 0xfde <__mulsf3>
     b28:	dc 01       	movw	r26, r24
     b2a:	cb 01       	movw	r24, r22
     b2c:	bc 01       	movw	r22, r24
     b2e:	cd 01       	movw	r24, r26
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	41 e1       	ldi	r20, 0x11	; 17
     b36:	54 e4       	ldi	r21, 0x44	; 68
     b38:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__divsf3>
     b3c:	dc 01       	movw	r26, r24
     b3e:	cb 01       	movw	r24, r22
     b40:	80 93 1c 02 	sts	0x021C, r24
     b44:	90 93 1d 02 	sts	0x021D, r25
     b48:	a0 93 1e 02 	sts	0x021E, r26
     b4c:	b0 93 1f 02 	sts	0x021F, r27
    }
}
     b50:	cf 91       	pop	r28
     b52:	df 91       	pop	r29
     b54:	ff 91       	pop	r31
     b56:	ef 91       	pop	r30
     b58:	bf 91       	pop	r27
     b5a:	af 91       	pop	r26
     b5c:	9f 91       	pop	r25
     b5e:	8f 91       	pop	r24
     b60:	7f 91       	pop	r23
     b62:	6f 91       	pop	r22
     b64:	5f 91       	pop	r21
     b66:	4f 91       	pop	r20
     b68:	3f 91       	pop	r19
     b6a:	2f 91       	pop	r18
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	0f 90       	pop	r0
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	0f 90       	pop	r0
     b7a:	1f 90       	pop	r1
     b7c:	18 95       	reti

00000b7e <init_ultrasonic_sensor>:


void init_ultrasonic_sensor(){
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62

    //PORTB2 as output (Arduino PIN 10)
    DDRB |= (1 << PORTB1);  
     b86:	84 e2       	ldi	r24, 0x24	; 36
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	24 e2       	ldi	r18, 0x24	; 36
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	f9 01       	movw	r30, r18
     b90:	20 81       	ld	r18, Z
     b92:	22 60       	ori	r18, 0x02	; 2
     b94:	fc 01       	movw	r30, r24
     b96:	20 83       	st	Z, r18

    //****TIMER1 INIT****//

    //noice reduction enable
    TCCR1B |= (1<<ICNC1); 
     b98:	81 e8       	ldi	r24, 0x81	; 129
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	21 e8       	ldi	r18, 0x81	; 129
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	f9 01       	movw	r30, r18
     ba2:	20 81       	ld	r18, Z
     ba4:	20 68       	ori	r18, 0x80	; 128
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18

    //Prescale to 64
    TCCR1B |= (1<<CS10) | (1<<CS11); 
     baa:	81 e8       	ldi	r24, 0x81	; 129
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	21 e8       	ldi	r18, 0x81	; 129
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	f9 01       	movw	r30, r18
     bb4:	20 81       	ld	r18, Z
     bb6:	23 60       	ori	r18, 0x03	; 3
     bb8:	fc 01       	movw	r30, r24
     bba:	20 83       	st	Z, r18

    //select CTC mode
    TCCR1B |= (1<<WGM12); 
     bbc:	81 e8       	ldi	r24, 0x81	; 129
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	21 e8       	ldi	r18, 0x81	; 129
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	f9 01       	movw	r30, r18
     bc6:	20 81       	ld	r18, Z
     bc8:	28 60       	ori	r18, 0x08	; 8
     bca:	fc 01       	movw	r30, r24
     bcc:	20 83       	st	Z, r18

    //read Int. at: rising edge, falling edge
	TIMSK1 |= (1<<ICIE1) | (1<<OCIE1A);
     bce:	8f e6       	ldi	r24, 0x6F	; 111
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	2f e6       	ldi	r18, 0x6F	; 111
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	f9 01       	movw	r30, r18
     bd8:	20 81       	ld	r18, Z
     bda:	22 62       	ori	r18, 0x22	; 34
     bdc:	fc 01       	movw	r30, r24
     bde:	20 83       	st	Z, r18

    //read Int. at rising edge
	TCCR1B |= (1<<ICES1);
     be0:	81 e8       	ldi	r24, 0x81	; 129
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	21 e8       	ldi	r18, 0x81	; 129
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	f9 01       	movw	r30, r18
     bea:	20 81       	ld	r18, Z
     bec:	20 64       	ori	r18, 0x40	; 64
     bee:	fc 01       	movw	r30, r24
     bf0:	20 83       	st	Z, r18

    //calculate TOP (70ms runtime for one cycle): 16MHz/64 = 25000 count/sec. = 25000/1000 = 2500 count/us / 100*70 = 17500 count/70ms
    OCR1A = 17500;
     bf2:	88 e8       	ldi	r24, 0x88	; 136
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	2c e5       	ldi	r18, 0x5C	; 92
     bf8:	34 e4       	ldi	r19, 0x44	; 68
     bfa:	fc 01       	movw	r30, r24
     bfc:	31 83       	std	Z+1, r19	; 0x01
     bfe:	20 83       	st	Z, r18

    //CPU-speed / Prescale = cycles/sec. 1sec/ freq./sec. = 4 (t= 4us/cycle)
    us_per_count = 4;
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	90 93 21 02 	sts	0x0221, r25
     c08:	80 93 20 02 	sts	0x0220, r24

    //activate global interrupt
    sei();
     c0c:	78 94       	sei

}
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <read_dist>:

float read_dist(){
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
    return dist;
     c1c:	80 91 1c 02 	lds	r24, 0x021C
     c20:	90 91 1d 02 	lds	r25, 0x021D
     c24:	a0 91 1e 02 	lds	r26, 0x021E
     c28:	b0 91 1f 02 	lds	r27, 0x021F
     c2c:	bc 01       	movw	r22, r24
     c2e:	cd 01       	movw	r24, r26
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <__fixunssfsi>:
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	7b 01       	movw	r14, r22
     c40:	8c 01       	movw	r16, r24
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	5f e4       	ldi	r21, 0x4F	; 79
     c4a:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     c4e:	87 fd       	sbrc	r24, 7
     c50:	11 c0       	rjmp	.+34     	; 0xc74 <__fixunssfsi+0x3e>
     c52:	c8 01       	movw	r24, r16
     c54:	b7 01       	movw	r22, r14
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	5f e4       	ldi	r21, 0x4F	; 79
     c5e:	0e 94 be 07 	call	0xf7c	; 0xf7c <__subsf3>
     c62:	0e 94 87 0a 	call	0x150e	; 0x150e <__fixsfsi>
     c66:	9b 01       	movw	r18, r22
     c68:	ac 01       	movw	r20, r24
     c6a:	20 50       	subi	r18, 0x00	; 0
     c6c:	30 40       	sbci	r19, 0x00	; 0
     c6e:	40 40       	sbci	r20, 0x00	; 0
     c70:	50 48       	sbci	r21, 0x80	; 128
     c72:	06 c0       	rjmp	.+12     	; 0xc80 <__fixunssfsi+0x4a>
     c74:	c8 01       	movw	r24, r16
     c76:	b7 01       	movw	r22, r14
     c78:	0e 94 87 0a 	call	0x150e	; 0x150e <__fixsfsi>
     c7c:	9b 01       	movw	r18, r22
     c7e:	ac 01       	movw	r20, r24
     c80:	b9 01       	movw	r22, r18
     c82:	ca 01       	movw	r24, r20
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	08 95       	ret

00000c8e <_fpadd_parts>:
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ed e4       	ldi	r30, 0x4D	; 77
     c94:	f6 e0       	ldi	r31, 0x06	; 6
     c96:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__prologue_saves__+0x8>
     c9a:	fc 01       	movw	r30, r24
     c9c:	ea 01       	movw	r28, r20
     c9e:	80 81       	ld	r24, Z
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	08 f4       	brcc	.+2      	; 0xca6 <_fpadd_parts+0x18>
     ca4:	38 c1       	rjmp	.+624    	; 0xf16 <_fpadd_parts+0x288>
     ca6:	db 01       	movw	r26, r22
     ca8:	9c 91       	ld	r25, X
     caa:	92 30       	cpi	r25, 0x02	; 2
     cac:	08 f4       	brcc	.+2      	; 0xcb0 <_fpadd_parts+0x22>
     cae:	30 c1       	rjmp	.+608    	; 0xf10 <_fpadd_parts+0x282>
     cb0:	84 30       	cpi	r24, 0x04	; 4
     cb2:	59 f4       	brne	.+22     	; 0xcca <_fpadd_parts+0x3c>
     cb4:	94 30       	cpi	r25, 0x04	; 4
     cb6:	09 f0       	breq	.+2      	; 0xcba <_fpadd_parts+0x2c>
     cb8:	2e c1       	rjmp	.+604    	; 0xf16 <_fpadd_parts+0x288>
     cba:	91 81       	ldd	r25, Z+1	; 0x01
     cbc:	11 96       	adiw	r26, 0x01	; 1
     cbe:	8c 91       	ld	r24, X
     cc0:	11 97       	sbiw	r26, 0x01	; 1
     cc2:	98 17       	cp	r25, r24
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <_fpadd_parts+0x3a>
     cc6:	21 c1       	rjmp	.+578    	; 0xf0a <_fpadd_parts+0x27c>
     cc8:	26 c1       	rjmp	.+588    	; 0xf16 <_fpadd_parts+0x288>
     cca:	94 30       	cpi	r25, 0x04	; 4
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <_fpadd_parts+0x42>
     cce:	20 c1       	rjmp	.+576    	; 0xf10 <_fpadd_parts+0x282>
     cd0:	92 30       	cpi	r25, 0x02	; 2
     cd2:	b1 f4       	brne	.+44     	; 0xd00 <_fpadd_parts+0x72>
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	09 f0       	breq	.+2      	; 0xcda <_fpadd_parts+0x4c>
     cd8:	1e c1       	rjmp	.+572    	; 0xf16 <_fpadd_parts+0x288>
     cda:	ca 01       	movw	r24, r20
     cdc:	af 01       	movw	r20, r30
     cde:	28 e0       	ldi	r18, 0x08	; 8
     ce0:	da 01       	movw	r26, r20
     ce2:	0d 90       	ld	r0, X+
     ce4:	ad 01       	movw	r20, r26
     ce6:	dc 01       	movw	r26, r24
     ce8:	0d 92       	st	X+, r0
     cea:	cd 01       	movw	r24, r26
     cec:	21 50       	subi	r18, 0x01	; 1
     cee:	c1 f7       	brne	.-16     	; 0xce0 <_fpadd_parts+0x52>
     cf0:	db 01       	movw	r26, r22
     cf2:	11 96       	adiw	r26, 0x01	; 1
     cf4:	8c 91       	ld	r24, X
     cf6:	11 97       	sbiw	r26, 0x01	; 1
     cf8:	91 81       	ldd	r25, Z+1	; 0x01
     cfa:	89 23       	and	r24, r25
     cfc:	89 83       	std	Y+1, r24	; 0x01
     cfe:	0a c1       	rjmp	.+532    	; 0xf14 <_fpadd_parts+0x286>
     d00:	82 30       	cpi	r24, 0x02	; 2
     d02:	09 f4       	brne	.+2      	; 0xd06 <_fpadd_parts+0x78>
     d04:	05 c1       	rjmp	.+522    	; 0xf10 <_fpadd_parts+0x282>
     d06:	c2 80       	ldd	r12, Z+2	; 0x02
     d08:	d3 80       	ldd	r13, Z+3	; 0x03
     d0a:	db 01       	movw	r26, r22
     d0c:	12 96       	adiw	r26, 0x02	; 2
     d0e:	6d 90       	ld	r6, X+
     d10:	7c 90       	ld	r7, X
     d12:	13 97       	sbiw	r26, 0x03	; 3
     d14:	24 81       	ldd	r18, Z+4	; 0x04
     d16:	35 81       	ldd	r19, Z+5	; 0x05
     d18:	46 81       	ldd	r20, Z+6	; 0x06
     d1a:	57 81       	ldd	r21, Z+7	; 0x07
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	ed 90       	ld	r14, X+
     d20:	fd 90       	ld	r15, X+
     d22:	0d 91       	ld	r16, X+
     d24:	1c 91       	ld	r17, X
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	c6 01       	movw	r24, r12
     d2a:	86 19       	sub	r24, r6
     d2c:	97 09       	sbc	r25, r7
     d2e:	5c 01       	movw	r10, r24
     d30:	97 ff       	sbrs	r25, 7
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <_fpadd_parts+0xae>
     d34:	aa 24       	eor	r10, r10
     d36:	bb 24       	eor	r11, r11
     d38:	a8 1a       	sub	r10, r24
     d3a:	b9 0a       	sbc	r11, r25
     d3c:	b0 e2       	ldi	r27, 0x20	; 32
     d3e:	ab 16       	cp	r10, r27
     d40:	b1 04       	cpc	r11, r1
     d42:	0c f0       	brlt	.+2      	; 0xd46 <_fpadd_parts+0xb8>
     d44:	61 c0       	rjmp	.+194    	; 0xe08 <_fpadd_parts+0x17a>
     d46:	18 16       	cp	r1, r24
     d48:	19 06       	cpc	r1, r25
     d4a:	6c f5       	brge	.+90     	; 0xda6 <_fpadd_parts+0x118>
     d4c:	37 01       	movw	r6, r14
     d4e:	48 01       	movw	r8, r16
     d50:	0a 2c       	mov	r0, r10
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <_fpadd_parts+0xce>
     d54:	96 94       	lsr	r9
     d56:	87 94       	ror	r8
     d58:	77 94       	ror	r7
     d5a:	67 94       	ror	r6
     d5c:	0a 94       	dec	r0
     d5e:	d2 f7       	brpl	.-12     	; 0xd54 <_fpadd_parts+0xc6>
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	a0 e0       	ldi	r26, 0x00	; 0
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	0a 2c       	mov	r0, r10
     d6a:	04 c0       	rjmp	.+8      	; 0xd74 <_fpadd_parts+0xe6>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	aa 1f       	adc	r26, r26
     d72:	bb 1f       	adc	r27, r27
     d74:	0a 94       	dec	r0
     d76:	d2 f7       	brpl	.-12     	; 0xd6c <_fpadd_parts+0xde>
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	a1 09       	sbc	r26, r1
     d7c:	b1 09       	sbc	r27, r1
     d7e:	8e 21       	and	r24, r14
     d80:	9f 21       	and	r25, r15
     d82:	a0 23       	and	r26, r16
     d84:	b1 23       	and	r27, r17
     d86:	ee 24       	eor	r14, r14
     d88:	ff 24       	eor	r15, r15
     d8a:	87 01       	movw	r16, r14
     d8c:	e3 94       	inc	r14
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	a1 05       	cpc	r26, r1
     d92:	b1 05       	cpc	r27, r1
     d94:	19 f4       	brne	.+6      	; 0xd9c <_fpadd_parts+0x10e>
     d96:	ee 24       	eor	r14, r14
     d98:	ff 24       	eor	r15, r15
     d9a:	87 01       	movw	r16, r14
     d9c:	e6 28       	or	r14, r6
     d9e:	f7 28       	or	r15, r7
     da0:	08 29       	or	r16, r8
     da2:	19 29       	or	r17, r9
     da4:	3c c0       	rjmp	.+120    	; 0xe1e <_fpadd_parts+0x190>
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	d1 f1       	breq	.+116    	; 0xe1e <_fpadd_parts+0x190>
     daa:	ca 0c       	add	r12, r10
     dac:	db 1c       	adc	r13, r11
     dae:	39 01       	movw	r6, r18
     db0:	4a 01       	movw	r8, r20
     db2:	0a 2c       	mov	r0, r10
     db4:	04 c0       	rjmp	.+8      	; 0xdbe <_fpadd_parts+0x130>
     db6:	96 94       	lsr	r9
     db8:	87 94       	ror	r8
     dba:	77 94       	ror	r7
     dbc:	67 94       	ror	r6
     dbe:	0a 94       	dec	r0
     dc0:	d2 f7       	brpl	.-12     	; 0xdb6 <_fpadd_parts+0x128>
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	a0 e0       	ldi	r26, 0x00	; 0
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	0a 2c       	mov	r0, r10
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <_fpadd_parts+0x148>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	aa 1f       	adc	r26, r26
     dd4:	bb 1f       	adc	r27, r27
     dd6:	0a 94       	dec	r0
     dd8:	d2 f7       	brpl	.-12     	; 0xdce <_fpadd_parts+0x140>
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	a1 09       	sbc	r26, r1
     dde:	b1 09       	sbc	r27, r1
     de0:	82 23       	and	r24, r18
     de2:	93 23       	and	r25, r19
     de4:	a4 23       	and	r26, r20
     de6:	b5 23       	and	r27, r21
     de8:	21 e0       	ldi	r18, 0x01	; 1
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	a1 05       	cpc	r26, r1
     df4:	b1 05       	cpc	r27, r1
     df6:	19 f4       	brne	.+6      	; 0xdfe <_fpadd_parts+0x170>
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	a9 01       	movw	r20, r18
     dfe:	26 29       	or	r18, r6
     e00:	37 29       	or	r19, r7
     e02:	48 29       	or	r20, r8
     e04:	59 29       	or	r21, r9
     e06:	0b c0       	rjmp	.+22     	; 0xe1e <_fpadd_parts+0x190>
     e08:	6c 14       	cp	r6, r12
     e0a:	7d 04       	cpc	r7, r13
     e0c:	24 f4       	brge	.+8      	; 0xe16 <_fpadd_parts+0x188>
     e0e:	ee 24       	eor	r14, r14
     e10:	ff 24       	eor	r15, r15
     e12:	87 01       	movw	r16, r14
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <_fpadd_parts+0x190>
     e16:	63 01       	movw	r12, r6
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	a9 01       	movw	r20, r18
     e1e:	81 81       	ldd	r24, Z+1	; 0x01
     e20:	fb 01       	movw	r30, r22
     e22:	91 81       	ldd	r25, Z+1	; 0x01
     e24:	89 17       	cp	r24, r25
     e26:	09 f4       	brne	.+2      	; 0xe2a <_fpadd_parts+0x19c>
     e28:	45 c0       	rjmp	.+138    	; 0xeb4 <_fpadd_parts+0x226>
     e2a:	88 23       	and	r24, r24
     e2c:	49 f0       	breq	.+18     	; 0xe40 <_fpadd_parts+0x1b2>
     e2e:	d8 01       	movw	r26, r16
     e30:	c7 01       	movw	r24, r14
     e32:	82 1b       	sub	r24, r18
     e34:	93 0b       	sbc	r25, r19
     e36:	a4 0b       	sbc	r26, r20
     e38:	b5 0b       	sbc	r27, r21
     e3a:	9c 01       	movw	r18, r24
     e3c:	ad 01       	movw	r20, r26
     e3e:	04 c0       	rjmp	.+8      	; 0xe48 <_fpadd_parts+0x1ba>
     e40:	2e 19       	sub	r18, r14
     e42:	3f 09       	sbc	r19, r15
     e44:	40 0b       	sbc	r20, r16
     e46:	51 0b       	sbc	r21, r17
     e48:	57 fd       	sbrc	r21, 7
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <_fpadd_parts+0x1c6>
     e4c:	19 82       	std	Y+1, r1	; 0x01
     e4e:	db 82       	std	Y+3, r13	; 0x03
     e50:	ca 82       	std	Y+2, r12	; 0x02
     e52:	0b c0       	rjmp	.+22     	; 0xe6a <_fpadd_parts+0x1dc>
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	db 82       	std	Y+3, r13	; 0x03
     e5a:	ca 82       	std	Y+2, r12	; 0x02
     e5c:	50 95       	com	r21
     e5e:	40 95       	com	r20
     e60:	30 95       	com	r19
     e62:	21 95       	neg	r18
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	4f 4f       	sbci	r20, 0xFF	; 255
     e68:	5f 4f       	sbci	r21, 0xFF	; 255
     e6a:	2c 83       	std	Y+4, r18	; 0x04
     e6c:	3d 83       	std	Y+5, r19	; 0x05
     e6e:	4e 83       	std	Y+6, r20	; 0x06
     e70:	5f 83       	std	Y+7, r21	; 0x07
     e72:	0d c0       	rjmp	.+26     	; 0xe8e <_fpadd_parts+0x200>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	aa 1f       	adc	r26, r26
     e7a:	bb 1f       	adc	r27, r27
     e7c:	8c 83       	std	Y+4, r24	; 0x04
     e7e:	9d 83       	std	Y+5, r25	; 0x05
     e80:	ae 83       	std	Y+6, r26	; 0x06
     e82:	bf 83       	std	Y+7, r27	; 0x07
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	9b 81       	ldd	r25, Y+3	; 0x03
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	9b 83       	std	Y+3, r25	; 0x03
     e8c:	8a 83       	std	Y+2, r24	; 0x02
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	9d 81       	ldd	r25, Y+5	; 0x05
     e92:	ae 81       	ldd	r26, Y+6	; 0x06
     e94:	bf 81       	ldd	r27, Y+7	; 0x07
     e96:	9c 01       	movw	r18, r24
     e98:	ad 01       	movw	r20, r26
     e9a:	21 50       	subi	r18, 0x01	; 1
     e9c:	30 40       	sbci	r19, 0x00	; 0
     e9e:	40 40       	sbci	r20, 0x00	; 0
     ea0:	50 40       	sbci	r21, 0x00	; 0
     ea2:	2f 3f       	cpi	r18, 0xFF	; 255
     ea4:	ef ef       	ldi	r30, 0xFF	; 255
     ea6:	3e 07       	cpc	r19, r30
     ea8:	ef ef       	ldi	r30, 0xFF	; 255
     eaa:	4e 07       	cpc	r20, r30
     eac:	ef e3       	ldi	r30, 0x3F	; 63
     eae:	5e 07       	cpc	r21, r30
     eb0:	08 f3       	brcs	.-62     	; 0xe74 <_fpadd_parts+0x1e6>
     eb2:	0b c0       	rjmp	.+22     	; 0xeca <_fpadd_parts+0x23c>
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	db 82       	std	Y+3, r13	; 0x03
     eb8:	ca 82       	std	Y+2, r12	; 0x02
     eba:	2e 0d       	add	r18, r14
     ebc:	3f 1d       	adc	r19, r15
     ebe:	40 1f       	adc	r20, r16
     ec0:	51 1f       	adc	r21, r17
     ec2:	2c 83       	std	Y+4, r18	; 0x04
     ec4:	3d 83       	std	Y+5, r19	; 0x05
     ec6:	4e 83       	std	Y+6, r20	; 0x06
     ec8:	5f 83       	std	Y+7, r21	; 0x07
     eca:	83 e0       	ldi	r24, 0x03	; 3
     ecc:	88 83       	st	Y, r24
     ece:	2c 81       	ldd	r18, Y+4	; 0x04
     ed0:	3d 81       	ldd	r19, Y+5	; 0x05
     ed2:	4e 81       	ldd	r20, Y+6	; 0x06
     ed4:	5f 81       	ldd	r21, Y+7	; 0x07
     ed6:	57 ff       	sbrs	r21, 7
     ed8:	1d c0       	rjmp	.+58     	; 0xf14 <_fpadd_parts+0x286>
     eda:	da 01       	movw	r26, r20
     edc:	c9 01       	movw	r24, r18
     ede:	81 70       	andi	r24, 0x01	; 1
     ee0:	90 70       	andi	r25, 0x00	; 0
     ee2:	a0 70       	andi	r26, 0x00	; 0
     ee4:	b0 70       	andi	r27, 0x00	; 0
     ee6:	56 95       	lsr	r21
     ee8:	47 95       	ror	r20
     eea:	37 95       	ror	r19
     eec:	27 95       	ror	r18
     eee:	82 2b       	or	r24, r18
     ef0:	93 2b       	or	r25, r19
     ef2:	a4 2b       	or	r26, r20
     ef4:	b5 2b       	or	r27, r21
     ef6:	8c 83       	std	Y+4, r24	; 0x04
     ef8:	9d 83       	std	Y+5, r25	; 0x05
     efa:	ae 83       	std	Y+6, r26	; 0x06
     efc:	bf 83       	std	Y+7, r27	; 0x07
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	9b 81       	ldd	r25, Y+3	; 0x03
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	9b 83       	std	Y+3, r25	; 0x03
     f06:	8a 83       	std	Y+2, r24	; 0x02
     f08:	05 c0       	rjmp	.+10     	; 0xf14 <_fpadd_parts+0x286>
     f0a:	e0 e0       	ldi	r30, 0x00	; 0
     f0c:	f1 e0       	ldi	r31, 0x01	; 1
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <_fpadd_parts+0x288>
     f10:	fb 01       	movw	r30, r22
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <_fpadd_parts+0x288>
     f14:	fe 01       	movw	r30, r28
     f16:	cf 01       	movw	r24, r30
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	ee e0       	ldi	r30, 0x0E	; 14
     f1e:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__epilogue_restores__+0x8>

00000f22 <__addsf3>:
     f22:	a0 e2       	ldi	r26, 0x20	; 32
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e7 e9       	ldi	r30, 0x97	; 151
     f28:	f7 e0       	ldi	r31, 0x07	; 7
     f2a:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__prologue_saves__+0x18>
     f2e:	69 83       	std	Y+1, r22	; 0x01
     f30:	7a 83       	std	Y+2, r23	; 0x02
     f32:	8b 83       	std	Y+3, r24	; 0x03
     f34:	9c 83       	std	Y+4, r25	; 0x04
     f36:	2d 83       	std	Y+5, r18	; 0x05
     f38:	3e 83       	std	Y+6, r19	; 0x06
     f3a:	4f 83       	std	Y+7, r20	; 0x07
     f3c:	58 87       	std	Y+8, r21	; 0x08
     f3e:	89 e0       	ldi	r24, 0x09	; 9
     f40:	e8 2e       	mov	r14, r24
     f42:	f1 2c       	mov	r15, r1
     f44:	ec 0e       	add	r14, r28
     f46:	fd 1e       	adc	r15, r29
     f48:	ce 01       	movw	r24, r28
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	b7 01       	movw	r22, r14
     f4e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
     f52:	8e 01       	movw	r16, r28
     f54:	0f 5e       	subi	r16, 0xEF	; 239
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	ce 01       	movw	r24, r28
     f5a:	05 96       	adiw	r24, 0x05	; 5
     f5c:	b8 01       	movw	r22, r16
     f5e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
     f62:	c7 01       	movw	r24, r14
     f64:	b8 01       	movw	r22, r16
     f66:	ae 01       	movw	r20, r28
     f68:	47 5e       	subi	r20, 0xE7	; 231
     f6a:	5f 4f       	sbci	r21, 0xFF	; 255
     f6c:	0e 94 47 06 	call	0xc8e	; 0xc8e <_fpadd_parts>
     f70:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__pack_f>
     f74:	a0 96       	adiw	r28, 0x20	; 32
     f76:	e6 e0       	ldi	r30, 0x06	; 6
     f78:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__epilogue_restores__+0x18>

00000f7c <__subsf3>:
     f7c:	a0 e2       	ldi	r26, 0x20	; 32
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e4 ec       	ldi	r30, 0xC4	; 196
     f82:	f7 e0       	ldi	r31, 0x07	; 7
     f84:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__prologue_saves__+0x18>
     f88:	69 83       	std	Y+1, r22	; 0x01
     f8a:	7a 83       	std	Y+2, r23	; 0x02
     f8c:	8b 83       	std	Y+3, r24	; 0x03
     f8e:	9c 83       	std	Y+4, r25	; 0x04
     f90:	2d 83       	std	Y+5, r18	; 0x05
     f92:	3e 83       	std	Y+6, r19	; 0x06
     f94:	4f 83       	std	Y+7, r20	; 0x07
     f96:	58 87       	std	Y+8, r21	; 0x08
     f98:	8e 01       	movw	r16, r28
     f9a:	07 5f       	subi	r16, 0xF7	; 247
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	ce 01       	movw	r24, r28
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	b8 01       	movw	r22, r16
     fa4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
     fa8:	91 e1       	ldi	r25, 0x11	; 17
     faa:	e9 2e       	mov	r14, r25
     fac:	f1 2c       	mov	r15, r1
     fae:	ec 0e       	add	r14, r28
     fb0:	fd 1e       	adc	r15, r29
     fb2:	ce 01       	movw	r24, r28
     fb4:	05 96       	adiw	r24, 0x05	; 5
     fb6:	b7 01       	movw	r22, r14
     fb8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
     fbc:	8a 89       	ldd	r24, Y+18	; 0x12
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	89 27       	eor	r24, r25
     fc2:	8a 8b       	std	Y+18, r24	; 0x12
     fc4:	c8 01       	movw	r24, r16
     fc6:	b7 01       	movw	r22, r14
     fc8:	ae 01       	movw	r20, r28
     fca:	47 5e       	subi	r20, 0xE7	; 231
     fcc:	5f 4f       	sbci	r21, 0xFF	; 255
     fce:	0e 94 47 06 	call	0xc8e	; 0xc8e <_fpadd_parts>
     fd2:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__pack_f>
     fd6:	a0 96       	adiw	r28, 0x20	; 32
     fd8:	e6 e0       	ldi	r30, 0x06	; 6
     fda:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__epilogue_restores__+0x18>

00000fde <__mulsf3>:
     fde:	a0 e2       	ldi	r26, 0x20	; 32
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e5 ef       	ldi	r30, 0xF5	; 245
     fe4:	f7 e0       	ldi	r31, 0x07	; 7
     fe6:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__prologue_saves__>
     fea:	69 83       	std	Y+1, r22	; 0x01
     fec:	7a 83       	std	Y+2, r23	; 0x02
     fee:	8b 83       	std	Y+3, r24	; 0x03
     ff0:	9c 83       	std	Y+4, r25	; 0x04
     ff2:	2d 83       	std	Y+5, r18	; 0x05
     ff4:	3e 83       	std	Y+6, r19	; 0x06
     ff6:	4f 83       	std	Y+7, r20	; 0x07
     ff8:	58 87       	std	Y+8, r21	; 0x08
     ffa:	ce 01       	movw	r24, r28
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	be 01       	movw	r22, r28
    1000:	67 5f       	subi	r22, 0xF7	; 247
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
    1008:	ce 01       	movw	r24, r28
    100a:	05 96       	adiw	r24, 0x05	; 5
    100c:	be 01       	movw	r22, r28
    100e:	6f 5e       	subi	r22, 0xEF	; 239
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
    1016:	99 85       	ldd	r25, Y+9	; 0x09
    1018:	92 30       	cpi	r25, 0x02	; 2
    101a:	78 f0       	brcs	.+30     	; 0x103a <__mulsf3+0x5c>
    101c:	89 89       	ldd	r24, Y+17	; 0x11
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	c0 f0       	brcs	.+48     	; 0x1052 <__mulsf3+0x74>
    1022:	94 30       	cpi	r25, 0x04	; 4
    1024:	19 f4       	brne	.+6      	; 0x102c <__mulsf3+0x4e>
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	41 f4       	brne	.+16     	; 0x103a <__mulsf3+0x5c>
    102a:	cb c0       	rjmp	.+406    	; 0x11c2 <__mulsf3+0x1e4>
    102c:	84 30       	cpi	r24, 0x04	; 4
    102e:	19 f4       	brne	.+6      	; 0x1036 <__mulsf3+0x58>
    1030:	92 30       	cpi	r25, 0x02	; 2
    1032:	79 f4       	brne	.+30     	; 0x1052 <__mulsf3+0x74>
    1034:	c6 c0       	rjmp	.+396    	; 0x11c2 <__mulsf3+0x1e4>
    1036:	92 30       	cpi	r25, 0x02	; 2
    1038:	51 f4       	brne	.+20     	; 0x104e <__mulsf3+0x70>
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	2a 85       	ldd	r18, Y+10	; 0x0a
    103e:	9a 89       	ldd	r25, Y+18	; 0x12
    1040:	29 17       	cp	r18, r25
    1042:	09 f4       	brne	.+2      	; 0x1046 <__mulsf3+0x68>
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	8a 87       	std	Y+10, r24	; 0x0a
    1048:	ce 01       	movw	r24, r28
    104a:	09 96       	adiw	r24, 0x09	; 9
    104c:	bc c0       	rjmp	.+376    	; 0x11c6 <__mulsf3+0x1e8>
    104e:	82 30       	cpi	r24, 0x02	; 2
    1050:	51 f4       	brne	.+20     	; 0x1066 <__mulsf3+0x88>
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	2a 85       	ldd	r18, Y+10	; 0x0a
    1056:	9a 89       	ldd	r25, Y+18	; 0x12
    1058:	29 17       	cp	r18, r25
    105a:	09 f4       	brne	.+2      	; 0x105e <__mulsf3+0x80>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	8a 8b       	std	Y+18, r24	; 0x12
    1060:	ce 01       	movw	r24, r28
    1062:	41 96       	adiw	r24, 0x11	; 17
    1064:	b0 c0       	rjmp	.+352    	; 0x11c6 <__mulsf3+0x1e8>
    1066:	6d 84       	ldd	r6, Y+13	; 0x0d
    1068:	7e 84       	ldd	r7, Y+14	; 0x0e
    106a:	8f 84       	ldd	r8, Y+15	; 0x0f
    106c:	98 88       	ldd	r9, Y+16	; 0x10
    106e:	ed 88       	ldd	r14, Y+21	; 0x15
    1070:	fe 88       	ldd	r15, Y+22	; 0x16
    1072:	0f 89       	ldd	r16, Y+23	; 0x17
    1074:	18 8d       	ldd	r17, Y+24	; 0x18
    1076:	e0 e2       	ldi	r30, 0x20	; 32
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	dc 01       	movw	r26, r24
    1080:	aa 24       	eor	r10, r10
    1082:	bb 24       	eor	r11, r11
    1084:	65 01       	movw	r12, r10
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	a9 01       	movw	r20, r18
    108c:	b3 01       	movw	r22, r6
    108e:	61 70       	andi	r22, 0x01	; 1
    1090:	70 70       	andi	r23, 0x00	; 0
    1092:	61 15       	cp	r22, r1
    1094:	71 05       	cpc	r23, r1
    1096:	d1 f0       	breq	.+52     	; 0x10cc <__mulsf3+0xee>
    1098:	2e 0d       	add	r18, r14
    109a:	3f 1d       	adc	r19, r15
    109c:	40 1f       	adc	r20, r16
    109e:	51 1f       	adc	r21, r17
    10a0:	15 01       	movw	r2, r10
    10a2:	26 01       	movw	r4, r12
    10a4:	28 0e       	add	r2, r24
    10a6:	39 1e       	adc	r3, r25
    10a8:	4a 1e       	adc	r4, r26
    10aa:	5b 1e       	adc	r5, r27
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a0 e0       	ldi	r26, 0x00	; 0
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	2e 15       	cp	r18, r14
    10b6:	3f 05       	cpc	r19, r15
    10b8:	40 07       	cpc	r20, r16
    10ba:	51 07       	cpc	r21, r17
    10bc:	18 f0       	brcs	.+6      	; 0x10c4 <__mulsf3+0xe6>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	dc 01       	movw	r26, r24
    10c4:	82 0d       	add	r24, r2
    10c6:	93 1d       	adc	r25, r3
    10c8:	a4 1d       	adc	r26, r4
    10ca:	b5 1d       	adc	r27, r5
    10cc:	aa 0c       	add	r10, r10
    10ce:	bb 1c       	adc	r11, r11
    10d0:	cc 1c       	adc	r12, r12
    10d2:	dd 1c       	adc	r13, r13
    10d4:	17 ff       	sbrs	r17, 7
    10d6:	09 c0       	rjmp	.+18     	; 0x10ea <__mulsf3+0x10c>
    10d8:	61 e0       	ldi	r22, 0x01	; 1
    10da:	26 2e       	mov	r2, r22
    10dc:	31 2c       	mov	r3, r1
    10de:	41 2c       	mov	r4, r1
    10e0:	51 2c       	mov	r5, r1
    10e2:	a2 28       	or	r10, r2
    10e4:	b3 28       	or	r11, r3
    10e6:	c4 28       	or	r12, r4
    10e8:	d5 28       	or	r13, r5
    10ea:	31 97       	sbiw	r30, 0x01	; 1
    10ec:	49 f0       	breq	.+18     	; 0x1100 <__mulsf3+0x122>
    10ee:	ee 0c       	add	r14, r14
    10f0:	ff 1c       	adc	r15, r15
    10f2:	00 1f       	adc	r16, r16
    10f4:	11 1f       	adc	r17, r17
    10f6:	96 94       	lsr	r9
    10f8:	87 94       	ror	r8
    10fa:	77 94       	ror	r7
    10fc:	67 94       	ror	r6
    10fe:	c6 cf       	rjmp	.-116    	; 0x108c <__mulsf3+0xae>
    1100:	6b 89       	ldd	r22, Y+19	; 0x13
    1102:	7c 89       	ldd	r23, Y+20	; 0x14
    1104:	eb 85       	ldd	r30, Y+11	; 0x0b
    1106:	fc 85       	ldd	r31, Y+12	; 0x0c
    1108:	6e 0f       	add	r22, r30
    110a:	7f 1f       	adc	r23, r31
    110c:	6e 5f       	subi	r22, 0xFE	; 254
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	7c 8f       	std	Y+28, r23	; 0x1c
    1112:	6b 8f       	std	Y+27, r22	; 0x1b
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	ea 85       	ldd	r30, Y+10	; 0x0a
    1118:	7a 89       	ldd	r23, Y+18	; 0x12
    111a:	e7 17       	cp	r30, r23
    111c:	09 f4       	brne	.+2      	; 0x1120 <__mulsf3+0x142>
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	6a 8f       	std	Y+26, r22	; 0x1a
    1122:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1124:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1126:	10 c0       	rjmp	.+32     	; 0x1148 <__mulsf3+0x16a>
    1128:	fc 01       	movw	r30, r24
    112a:	e1 70       	andi	r30, 0x01	; 1
    112c:	f0 70       	andi	r31, 0x00	; 0
    112e:	30 97       	sbiw	r30, 0x00	; 0
    1130:	29 f0       	breq	.+10     	; 0x113c <__mulsf3+0x15e>
    1132:	56 95       	lsr	r21
    1134:	47 95       	ror	r20
    1136:	37 95       	ror	r19
    1138:	27 95       	ror	r18
    113a:	50 68       	ori	r21, 0x80	; 128
    113c:	b6 95       	lsr	r27
    113e:	a7 95       	ror	r26
    1140:	97 95       	ror	r25
    1142:	87 95       	ror	r24
    1144:	6f 5f       	subi	r22, 0xFF	; 255
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	b7 fd       	sbrc	r27, 7
    114a:	ee cf       	rjmp	.-36     	; 0x1128 <__mulsf3+0x14a>
    114c:	0c c0       	rjmp	.+24     	; 0x1166 <__mulsf3+0x188>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	aa 1f       	adc	r26, r26
    1154:	bb 1f       	adc	r27, r27
    1156:	57 fd       	sbrc	r21, 7
    1158:	81 60       	ori	r24, 0x01	; 1
    115a:	22 0f       	add	r18, r18
    115c:	33 1f       	adc	r19, r19
    115e:	44 1f       	adc	r20, r20
    1160:	55 1f       	adc	r21, r21
    1162:	61 50       	subi	r22, 0x01	; 1
    1164:	70 40       	sbci	r23, 0x00	; 0
    1166:	80 30       	cpi	r24, 0x00	; 0
    1168:	e0 e0       	ldi	r30, 0x00	; 0
    116a:	9e 07       	cpc	r25, r30
    116c:	e0 e0       	ldi	r30, 0x00	; 0
    116e:	ae 07       	cpc	r26, r30
    1170:	e0 e4       	ldi	r30, 0x40	; 64
    1172:	be 07       	cpc	r27, r30
    1174:	60 f3       	brcs	.-40     	; 0x114e <__mulsf3+0x170>
    1176:	6b 8f       	std	Y+27, r22	; 0x1b
    1178:	7c 8f       	std	Y+28, r23	; 0x1c
    117a:	6f e7       	ldi	r22, 0x7F	; 127
    117c:	e6 2e       	mov	r14, r22
    117e:	f1 2c       	mov	r15, r1
    1180:	01 2d       	mov	r16, r1
    1182:	11 2d       	mov	r17, r1
    1184:	e8 22       	and	r14, r24
    1186:	f9 22       	and	r15, r25
    1188:	0a 23       	and	r16, r26
    118a:	1b 23       	and	r17, r27
    118c:	60 e4       	ldi	r22, 0x40	; 64
    118e:	e6 16       	cp	r14, r22
    1190:	f1 04       	cpc	r15, r1
    1192:	01 05       	cpc	r16, r1
    1194:	11 05       	cpc	r17, r1
    1196:	61 f4       	brne	.+24     	; 0x11b0 <__mulsf3+0x1d2>
    1198:	87 fd       	sbrc	r24, 7
    119a:	0a c0       	rjmp	.+20     	; 0x11b0 <__mulsf3+0x1d2>
    119c:	21 15       	cp	r18, r1
    119e:	31 05       	cpc	r19, r1
    11a0:	41 05       	cpc	r20, r1
    11a2:	51 05       	cpc	r21, r1
    11a4:	29 f0       	breq	.+10     	; 0x11b0 <__mulsf3+0x1d2>
    11a6:	80 5c       	subi	r24, 0xC0	; 192
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	af 4f       	sbci	r26, 0xFF	; 255
    11ac:	bf 4f       	sbci	r27, 0xFF	; 255
    11ae:	80 78       	andi	r24, 0x80	; 128
    11b0:	8d 8f       	std	Y+29, r24	; 0x1d
    11b2:	9e 8f       	std	Y+30, r25	; 0x1e
    11b4:	af 8f       	std	Y+31, r26	; 0x1f
    11b6:	b8 a3       	std	Y+32, r27	; 0x20
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	89 8f       	std	Y+25, r24	; 0x19
    11bc:	ce 01       	movw	r24, r28
    11be:	49 96       	adiw	r24, 0x19	; 25
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <__mulsf3+0x1e8>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__pack_f>
    11ca:	a0 96       	adiw	r28, 0x20	; 32
    11cc:	e2 e1       	ldi	r30, 0x12	; 18
    11ce:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__epilogue_restores__>

000011d2 <__divsf3>:
    11d2:	a8 e1       	ldi	r26, 0x18	; 24
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	ef ee       	ldi	r30, 0xEF	; 239
    11d8:	f8 e0       	ldi	r31, 0x08	; 8
    11da:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__prologue_saves__+0x10>
    11de:	69 83       	std	Y+1, r22	; 0x01
    11e0:	7a 83       	std	Y+2, r23	; 0x02
    11e2:	8b 83       	std	Y+3, r24	; 0x03
    11e4:	9c 83       	std	Y+4, r25	; 0x04
    11e6:	2d 83       	std	Y+5, r18	; 0x05
    11e8:	3e 83       	std	Y+6, r19	; 0x06
    11ea:	4f 83       	std	Y+7, r20	; 0x07
    11ec:	58 87       	std	Y+8, r21	; 0x08
    11ee:	8e 01       	movw	r16, r28
    11f0:	07 5f       	subi	r16, 0xF7	; 247
    11f2:	1f 4f       	sbci	r17, 0xFF	; 255
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	b8 01       	movw	r22, r16
    11fa:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
    11fe:	81 e1       	ldi	r24, 0x11	; 17
    1200:	e8 2e       	mov	r14, r24
    1202:	f1 2c       	mov	r15, r1
    1204:	ec 0e       	add	r14, r28
    1206:	fd 1e       	adc	r15, r29
    1208:	ce 01       	movw	r24, r28
    120a:	05 96       	adiw	r24, 0x05	; 5
    120c:	b7 01       	movw	r22, r14
    120e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
    1212:	99 85       	ldd	r25, Y+9	; 0x09
    1214:	92 30       	cpi	r25, 0x02	; 2
    1216:	08 f4       	brcc	.+2      	; 0x121a <__divsf3+0x48>
    1218:	83 c0       	rjmp	.+262    	; 0x1320 <__divsf3+0x14e>
    121a:	89 89       	ldd	r24, Y+17	; 0x11
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	08 f4       	brcc	.+2      	; 0x1222 <__divsf3+0x50>
    1220:	7b c0       	rjmp	.+246    	; 0x1318 <__divsf3+0x146>
    1222:	2a 85       	ldd	r18, Y+10	; 0x0a
    1224:	3a 89       	ldd	r19, Y+18	; 0x12
    1226:	23 27       	eor	r18, r19
    1228:	2a 87       	std	Y+10, r18	; 0x0a
    122a:	94 30       	cpi	r25, 0x04	; 4
    122c:	11 f0       	breq	.+4      	; 0x1232 <__divsf3+0x60>
    122e:	92 30       	cpi	r25, 0x02	; 2
    1230:	21 f4       	brne	.+8      	; 0x123a <__divsf3+0x68>
    1232:	98 17       	cp	r25, r24
    1234:	09 f0       	breq	.+2      	; 0x1238 <__divsf3+0x66>
    1236:	6c c0       	rjmp	.+216    	; 0x1310 <__divsf3+0x13e>
    1238:	71 c0       	rjmp	.+226    	; 0x131c <__divsf3+0x14a>
    123a:	84 30       	cpi	r24, 0x04	; 4
    123c:	39 f4       	brne	.+14     	; 0x124c <__divsf3+0x7a>
    123e:	1d 86       	std	Y+13, r1	; 0x0d
    1240:	1e 86       	std	Y+14, r1	; 0x0e
    1242:	1f 86       	std	Y+15, r1	; 0x0f
    1244:	18 8a       	std	Y+16, r1	; 0x10
    1246:	1c 86       	std	Y+12, r1	; 0x0c
    1248:	1b 86       	std	Y+11, r1	; 0x0b
    124a:	6a c0       	rjmp	.+212    	; 0x1320 <__divsf3+0x14e>
    124c:	82 30       	cpi	r24, 0x02	; 2
    124e:	19 f4       	brne	.+6      	; 0x1256 <__divsf3+0x84>
    1250:	84 e0       	ldi	r24, 0x04	; 4
    1252:	89 87       	std	Y+9, r24	; 0x09
    1254:	65 c0       	rjmp	.+202    	; 0x1320 <__divsf3+0x14e>
    1256:	8b 85       	ldd	r24, Y+11	; 0x0b
    1258:	9c 85       	ldd	r25, Y+12	; 0x0c
    125a:	2b 89       	ldd	r18, Y+19	; 0x13
    125c:	3c 89       	ldd	r19, Y+20	; 0x14
    125e:	82 1b       	sub	r24, r18
    1260:	93 0b       	sbc	r25, r19
    1262:	9c 87       	std	Y+12, r25	; 0x0c
    1264:	8b 87       	std	Y+11, r24	; 0x0b
    1266:	2d 85       	ldd	r18, Y+13	; 0x0d
    1268:	3e 85       	ldd	r19, Y+14	; 0x0e
    126a:	4f 85       	ldd	r20, Y+15	; 0x0f
    126c:	58 89       	ldd	r21, Y+16	; 0x10
    126e:	ed 88       	ldd	r14, Y+21	; 0x15
    1270:	fe 88       	ldd	r15, Y+22	; 0x16
    1272:	0f 89       	ldd	r16, Y+23	; 0x17
    1274:	18 8d       	ldd	r17, Y+24	; 0x18
    1276:	2e 15       	cp	r18, r14
    1278:	3f 05       	cpc	r19, r15
    127a:	40 07       	cpc	r20, r16
    127c:	51 07       	cpc	r21, r17
    127e:	38 f4       	brcc	.+14     	; 0x128e <__divsf3+0xbc>
    1280:	22 0f       	add	r18, r18
    1282:	33 1f       	adc	r19, r19
    1284:	44 1f       	adc	r20, r20
    1286:	55 1f       	adc	r21, r21
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	9c 87       	std	Y+12, r25	; 0x0c
    128c:	8b 87       	std	Y+11, r24	; 0x0b
    128e:	6f e1       	ldi	r22, 0x1F	; 31
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	a1 2c       	mov	r10, r1
    1294:	b1 2c       	mov	r11, r1
    1296:	c1 2c       	mov	r12, r1
    1298:	a0 e4       	ldi	r26, 0x40	; 64
    129a:	da 2e       	mov	r13, r26
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	dc 01       	movw	r26, r24
    12a2:	2e 15       	cp	r18, r14
    12a4:	3f 05       	cpc	r19, r15
    12a6:	40 07       	cpc	r20, r16
    12a8:	51 07       	cpc	r21, r17
    12aa:	40 f0       	brcs	.+16     	; 0x12bc <__divsf3+0xea>
    12ac:	8a 29       	or	r24, r10
    12ae:	9b 29       	or	r25, r11
    12b0:	ac 29       	or	r26, r12
    12b2:	bd 29       	or	r27, r13
    12b4:	2e 19       	sub	r18, r14
    12b6:	3f 09       	sbc	r19, r15
    12b8:	40 0b       	sbc	r20, r16
    12ba:	51 0b       	sbc	r21, r17
    12bc:	d6 94       	lsr	r13
    12be:	c7 94       	ror	r12
    12c0:	b7 94       	ror	r11
    12c2:	a7 94       	ror	r10
    12c4:	22 0f       	add	r18, r18
    12c6:	33 1f       	adc	r19, r19
    12c8:	44 1f       	adc	r20, r20
    12ca:	55 1f       	adc	r21, r21
    12cc:	61 50       	subi	r22, 0x01	; 1
    12ce:	70 40       	sbci	r23, 0x00	; 0
    12d0:	41 f7       	brne	.-48     	; 0x12a2 <__divsf3+0xd0>
    12d2:	6f e7       	ldi	r22, 0x7F	; 127
    12d4:	e6 2e       	mov	r14, r22
    12d6:	f1 2c       	mov	r15, r1
    12d8:	01 2d       	mov	r16, r1
    12da:	11 2d       	mov	r17, r1
    12dc:	e8 22       	and	r14, r24
    12de:	f9 22       	and	r15, r25
    12e0:	0a 23       	and	r16, r26
    12e2:	1b 23       	and	r17, r27
    12e4:	60 e4       	ldi	r22, 0x40	; 64
    12e6:	e6 16       	cp	r14, r22
    12e8:	f1 04       	cpc	r15, r1
    12ea:	01 05       	cpc	r16, r1
    12ec:	11 05       	cpc	r17, r1
    12ee:	61 f4       	brne	.+24     	; 0x1308 <__divsf3+0x136>
    12f0:	87 fd       	sbrc	r24, 7
    12f2:	0a c0       	rjmp	.+20     	; 0x1308 <__divsf3+0x136>
    12f4:	21 15       	cp	r18, r1
    12f6:	31 05       	cpc	r19, r1
    12f8:	41 05       	cpc	r20, r1
    12fa:	51 05       	cpc	r21, r1
    12fc:	29 f0       	breq	.+10     	; 0x1308 <__divsf3+0x136>
    12fe:	80 5c       	subi	r24, 0xC0	; 192
    1300:	9f 4f       	sbci	r25, 0xFF	; 255
    1302:	af 4f       	sbci	r26, 0xFF	; 255
    1304:	bf 4f       	sbci	r27, 0xFF	; 255
    1306:	80 78       	andi	r24, 0x80	; 128
    1308:	8d 87       	std	Y+13, r24	; 0x0d
    130a:	9e 87       	std	Y+14, r25	; 0x0e
    130c:	af 87       	std	Y+15, r26	; 0x0f
    130e:	b8 8b       	std	Y+16, r27	; 0x10
    1310:	8e 01       	movw	r16, r28
    1312:	07 5f       	subi	r16, 0xF7	; 247
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <__divsf3+0x14e>
    1318:	87 01       	movw	r16, r14
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <__divsf3+0x14e>
    131c:	00 e0       	ldi	r16, 0x00	; 0
    131e:	11 e0       	ldi	r17, 0x01	; 1
    1320:	c8 01       	movw	r24, r16
    1322:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__pack_f>
    1326:	68 96       	adiw	r28, 0x18	; 24
    1328:	ea e0       	ldi	r30, 0x0A	; 10
    132a:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__epilogue_restores__+0x10>

0000132e <__gtsf2>:
    132e:	a8 e1       	ldi	r26, 0x18	; 24
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ed e9       	ldi	r30, 0x9D	; 157
    1334:	f9 e0       	ldi	r31, 0x09	; 9
    1336:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__prologue_saves__+0x18>
    133a:	69 83       	std	Y+1, r22	; 0x01
    133c:	7a 83       	std	Y+2, r23	; 0x02
    133e:	8b 83       	std	Y+3, r24	; 0x03
    1340:	9c 83       	std	Y+4, r25	; 0x04
    1342:	2d 83       	std	Y+5, r18	; 0x05
    1344:	3e 83       	std	Y+6, r19	; 0x06
    1346:	4f 83       	std	Y+7, r20	; 0x07
    1348:	58 87       	std	Y+8, r21	; 0x08
    134a:	8e 01       	movw	r16, r28
    134c:	07 5f       	subi	r16, 0xF7	; 247
    134e:	1f 4f       	sbci	r17, 0xFF	; 255
    1350:	ce 01       	movw	r24, r28
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	b8 01       	movw	r22, r16
    1356:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
    135a:	81 e1       	ldi	r24, 0x11	; 17
    135c:	e8 2e       	mov	r14, r24
    135e:	f1 2c       	mov	r15, r1
    1360:	ec 0e       	add	r14, r28
    1362:	fd 1e       	adc	r15, r29
    1364:	ce 01       	movw	r24, r28
    1366:	05 96       	adiw	r24, 0x05	; 5
    1368:	b7 01       	movw	r22, r14
    136a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
    136e:	89 85       	ldd	r24, Y+9	; 0x09
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	40 f0       	brcs	.+16     	; 0x1384 <__gtsf2+0x56>
    1374:	89 89       	ldd	r24, Y+17	; 0x11
    1376:	82 30       	cpi	r24, 0x02	; 2
    1378:	28 f0       	brcs	.+10     	; 0x1384 <__gtsf2+0x56>
    137a:	c8 01       	movw	r24, r16
    137c:	b7 01       	movw	r22, r14
    137e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__fpcmp_parts_f>
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <__gtsf2+0x58>
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	68 96       	adiw	r28, 0x18	; 24
    1388:	e6 e0       	ldi	r30, 0x06	; 6
    138a:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__epilogue_restores__+0x18>

0000138e <__gesf2>:
    138e:	a8 e1       	ldi	r26, 0x18	; 24
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ed ec       	ldi	r30, 0xCD	; 205
    1394:	f9 e0       	ldi	r31, 0x09	; 9
    1396:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__prologue_saves__+0x18>
    139a:	69 83       	std	Y+1, r22	; 0x01
    139c:	7a 83       	std	Y+2, r23	; 0x02
    139e:	8b 83       	std	Y+3, r24	; 0x03
    13a0:	9c 83       	std	Y+4, r25	; 0x04
    13a2:	2d 83       	std	Y+5, r18	; 0x05
    13a4:	3e 83       	std	Y+6, r19	; 0x06
    13a6:	4f 83       	std	Y+7, r20	; 0x07
    13a8:	58 87       	std	Y+8, r21	; 0x08
    13aa:	8e 01       	movw	r16, r28
    13ac:	07 5f       	subi	r16, 0xF7	; 247
    13ae:	1f 4f       	sbci	r17, 0xFF	; 255
    13b0:	ce 01       	movw	r24, r28
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	b8 01       	movw	r22, r16
    13b6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
    13ba:	81 e1       	ldi	r24, 0x11	; 17
    13bc:	e8 2e       	mov	r14, r24
    13be:	f1 2c       	mov	r15, r1
    13c0:	ec 0e       	add	r14, r28
    13c2:	fd 1e       	adc	r15, r29
    13c4:	ce 01       	movw	r24, r28
    13c6:	05 96       	adiw	r24, 0x05	; 5
    13c8:	b7 01       	movw	r22, r14
    13ca:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
    13ce:	89 85       	ldd	r24, Y+9	; 0x09
    13d0:	82 30       	cpi	r24, 0x02	; 2
    13d2:	40 f0       	brcs	.+16     	; 0x13e4 <__gesf2+0x56>
    13d4:	89 89       	ldd	r24, Y+17	; 0x11
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	28 f0       	brcs	.+10     	; 0x13e4 <__gesf2+0x56>
    13da:	c8 01       	movw	r24, r16
    13dc:	b7 01       	movw	r22, r14
    13de:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__fpcmp_parts_f>
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <__gesf2+0x58>
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	68 96       	adiw	r28, 0x18	; 24
    13e8:	e6 e0       	ldi	r30, 0x06	; 6
    13ea:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__epilogue_restores__+0x18>

000013ee <__ltsf2>:
    13ee:	a8 e1       	ldi	r26, 0x18	; 24
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	ed ef       	ldi	r30, 0xFD	; 253
    13f4:	f9 e0       	ldi	r31, 0x09	; 9
    13f6:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__prologue_saves__+0x18>
    13fa:	69 83       	std	Y+1, r22	; 0x01
    13fc:	7a 83       	std	Y+2, r23	; 0x02
    13fe:	8b 83       	std	Y+3, r24	; 0x03
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	2d 83       	std	Y+5, r18	; 0x05
    1404:	3e 83       	std	Y+6, r19	; 0x06
    1406:	4f 83       	std	Y+7, r20	; 0x07
    1408:	58 87       	std	Y+8, r21	; 0x08
    140a:	8e 01       	movw	r16, r28
    140c:	07 5f       	subi	r16, 0xF7	; 247
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	ce 01       	movw	r24, r28
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	b8 01       	movw	r22, r16
    1416:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
    141a:	81 e1       	ldi	r24, 0x11	; 17
    141c:	e8 2e       	mov	r14, r24
    141e:	f1 2c       	mov	r15, r1
    1420:	ec 0e       	add	r14, r28
    1422:	fd 1e       	adc	r15, r29
    1424:	ce 01       	movw	r24, r28
    1426:	05 96       	adiw	r24, 0x05	; 5
    1428:	b7 01       	movw	r22, r14
    142a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
    142e:	89 85       	ldd	r24, Y+9	; 0x09
    1430:	82 30       	cpi	r24, 0x02	; 2
    1432:	40 f0       	brcs	.+16     	; 0x1444 <__ltsf2+0x56>
    1434:	89 89       	ldd	r24, Y+17	; 0x11
    1436:	82 30       	cpi	r24, 0x02	; 2
    1438:	28 f0       	brcs	.+10     	; 0x1444 <__ltsf2+0x56>
    143a:	c8 01       	movw	r24, r16
    143c:	b7 01       	movw	r22, r14
    143e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__fpcmp_parts_f>
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <__ltsf2+0x58>
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	68 96       	adiw	r28, 0x18	; 24
    1448:	e6 e0       	ldi	r30, 0x06	; 6
    144a:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__epilogue_restores__+0x18>

0000144e <__floatsisf>:
    144e:	a8 e0       	ldi	r26, 0x08	; 8
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ed e2       	ldi	r30, 0x2D	; 45
    1454:	fa e0       	ldi	r31, 0x0A	; 10
    1456:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__prologue_saves__+0x18>
    145a:	7b 01       	movw	r14, r22
    145c:	8c 01       	movw	r16, r24
    145e:	83 e0       	ldi	r24, 0x03	; 3
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	d8 01       	movw	r26, r16
    1464:	c7 01       	movw	r24, r14
    1466:	88 27       	eor	r24, r24
    1468:	b7 fd       	sbrc	r27, 7
    146a:	83 95       	inc	r24
    146c:	99 27       	eor	r25, r25
    146e:	aa 27       	eor	r26, r26
    1470:	bb 27       	eor	r27, r27
    1472:	28 2f       	mov	r18, r24
    1474:	8a 83       	std	Y+2, r24	; 0x02
    1476:	e1 14       	cp	r14, r1
    1478:	f1 04       	cpc	r15, r1
    147a:	01 05       	cpc	r16, r1
    147c:	11 05       	cpc	r17, r1
    147e:	19 f4       	brne	.+6      	; 0x1486 <__floatsisf+0x38>
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	37 c0       	rjmp	.+110    	; 0x14f4 <__floatsisf+0xa6>
    1486:	8e e1       	ldi	r24, 0x1E	; 30
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	9c 83       	std	Y+4, r25	; 0x04
    148c:	8b 83       	std	Y+3, r24	; 0x03
    148e:	22 23       	and	r18, r18
    1490:	89 f0       	breq	.+34     	; 0x14b4 <__floatsisf+0x66>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	e8 16       	cp	r14, r24
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	f8 06       	cpc	r15, r24
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	08 07       	cpc	r16, r24
    149e:	80 e8       	ldi	r24, 0x80	; 128
    14a0:	18 07       	cpc	r17, r24
    14a2:	69 f1       	breq	.+90     	; 0x14fe <__floatsisf+0xb0>
    14a4:	10 95       	com	r17
    14a6:	00 95       	com	r16
    14a8:	f0 94       	com	r15
    14aa:	e0 94       	com	r14
    14ac:	e1 1c       	adc	r14, r1
    14ae:	f1 1c       	adc	r15, r1
    14b0:	01 1d       	adc	r16, r1
    14b2:	11 1d       	adc	r17, r1
    14b4:	ed 82       	std	Y+5, r14	; 0x05
    14b6:	fe 82       	std	Y+6, r15	; 0x06
    14b8:	0f 83       	std	Y+7, r16	; 0x07
    14ba:	18 87       	std	Y+8, r17	; 0x08
    14bc:	c8 01       	movw	r24, r16
    14be:	b7 01       	movw	r22, r14
    14c0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__clzsi2>
    14c4:	9c 01       	movw	r18, r24
    14c6:	21 50       	subi	r18, 0x01	; 1
    14c8:	30 40       	sbci	r19, 0x00	; 0
    14ca:	12 16       	cp	r1, r18
    14cc:	13 06       	cpc	r1, r19
    14ce:	94 f4       	brge	.+36     	; 0x14f4 <__floatsisf+0xa6>
    14d0:	02 2e       	mov	r0, r18
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <__floatsisf+0x8e>
    14d4:	ee 0c       	add	r14, r14
    14d6:	ff 1c       	adc	r15, r15
    14d8:	00 1f       	adc	r16, r16
    14da:	11 1f       	adc	r17, r17
    14dc:	0a 94       	dec	r0
    14de:	d2 f7       	brpl	.-12     	; 0x14d4 <__floatsisf+0x86>
    14e0:	ed 82       	std	Y+5, r14	; 0x05
    14e2:	fe 82       	std	Y+6, r15	; 0x06
    14e4:	0f 83       	std	Y+7, r16	; 0x07
    14e6:	18 87       	std	Y+8, r17	; 0x08
    14e8:	8e e1       	ldi	r24, 0x1E	; 30
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	82 1b       	sub	r24, r18
    14ee:	93 0b       	sbc	r25, r19
    14f0:	9c 83       	std	Y+4, r25	; 0x04
    14f2:	8b 83       	std	Y+3, r24	; 0x03
    14f4:	ce 01       	movw	r24, r28
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__pack_f>
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <__floatsisf+0xb8>
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	9f ec       	ldi	r25, 0xCF	; 207
    1506:	28 96       	adiw	r28, 0x08	; 8
    1508:	e6 e0       	ldi	r30, 0x06	; 6
    150a:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__epilogue_restores__+0x18>

0000150e <__fixsfsi>:
    150e:	ac e0       	ldi	r26, 0x0C	; 12
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	ed e8       	ldi	r30, 0x8D	; 141
    1514:	fa e0       	ldi	r31, 0x0A	; 10
    1516:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__prologue_saves__+0x20>
    151a:	69 83       	std	Y+1, r22	; 0x01
    151c:	7a 83       	std	Y+2, r23	; 0x02
    151e:	8b 83       	std	Y+3, r24	; 0x03
    1520:	9c 83       	std	Y+4, r25	; 0x04
    1522:	ce 01       	movw	r24, r28
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	be 01       	movw	r22, r28
    1528:	6b 5f       	subi	r22, 0xFB	; 251
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__unpack_f>
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	82 30       	cpi	r24, 0x02	; 2
    1534:	81 f1       	breq	.+96     	; 0x1596 <__fixsfsi+0x88>
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	70 f1       	brcs	.+92     	; 0x1596 <__fixsfsi+0x88>
    153a:	84 30       	cpi	r24, 0x04	; 4
    153c:	21 f4       	brne	.+8      	; 0x1546 <__fixsfsi+0x38>
    153e:	8e 81       	ldd	r24, Y+6	; 0x06
    1540:	88 23       	and	r24, r24
    1542:	69 f1       	breq	.+90     	; 0x159e <__fixsfsi+0x90>
    1544:	0a c0       	rjmp	.+20     	; 0x155a <__fixsfsi+0x4c>
    1546:	2f 81       	ldd	r18, Y+7	; 0x07
    1548:	38 85       	ldd	r19, Y+8	; 0x08
    154a:	37 fd       	sbrc	r19, 7
    154c:	24 c0       	rjmp	.+72     	; 0x1596 <__fixsfsi+0x88>
    154e:	6e 81       	ldd	r22, Y+6	; 0x06
    1550:	2f 31       	cpi	r18, 0x1F	; 31
    1552:	31 05       	cpc	r19, r1
    1554:	3c f0       	brlt	.+14     	; 0x1564 <__fixsfsi+0x56>
    1556:	66 23       	and	r22, r22
    1558:	11 f1       	breq	.+68     	; 0x159e <__fixsfsi+0x90>
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	50 e8       	ldi	r21, 0x80	; 128
    1562:	21 c0       	rjmp	.+66     	; 0x15a6 <__fixsfsi+0x98>
    1564:	8e e1       	ldi	r24, 0x1E	; 30
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	82 1b       	sub	r24, r18
    156a:	93 0b       	sbc	r25, r19
    156c:	29 85       	ldd	r18, Y+9	; 0x09
    156e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1570:	4b 85       	ldd	r20, Y+11	; 0x0b
    1572:	5c 85       	ldd	r21, Y+12	; 0x0c
    1574:	04 c0       	rjmp	.+8      	; 0x157e <__fixsfsi+0x70>
    1576:	56 95       	lsr	r21
    1578:	47 95       	ror	r20
    157a:	37 95       	ror	r19
    157c:	27 95       	ror	r18
    157e:	8a 95       	dec	r24
    1580:	d2 f7       	brpl	.-12     	; 0x1576 <__fixsfsi+0x68>
    1582:	66 23       	and	r22, r22
    1584:	81 f0       	breq	.+32     	; 0x15a6 <__fixsfsi+0x98>
    1586:	50 95       	com	r21
    1588:	40 95       	com	r20
    158a:	30 95       	com	r19
    158c:	21 95       	neg	r18
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
    1590:	4f 4f       	sbci	r20, 0xFF	; 255
    1592:	5f 4f       	sbci	r21, 0xFF	; 255
    1594:	08 c0       	rjmp	.+16     	; 0x15a6 <__fixsfsi+0x98>
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	a9 01       	movw	r20, r18
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <__fixsfsi+0x98>
    159e:	2f ef       	ldi	r18, 0xFF	; 255
    15a0:	3f ef       	ldi	r19, 0xFF	; 255
    15a2:	4f ef       	ldi	r20, 0xFF	; 255
    15a4:	5f e7       	ldi	r21, 0x7F	; 127
    15a6:	b9 01       	movw	r22, r18
    15a8:	ca 01       	movw	r24, r20
    15aa:	2c 96       	adiw	r28, 0x0c	; 12
    15ac:	e2 e0       	ldi	r30, 0x02	; 2
    15ae:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__epilogue_restores__+0x20>

000015b2 <__floatunsisf>:
    15b2:	a8 e0       	ldi	r26, 0x08	; 8
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ef ed       	ldi	r30, 0xDF	; 223
    15b8:	fa e0       	ldi	r31, 0x0A	; 10
    15ba:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__prologue_saves__+0x14>
    15be:	7b 01       	movw	r14, r22
    15c0:	8c 01       	movw	r16, r24
    15c2:	1a 82       	std	Y+2, r1	; 0x02
    15c4:	61 15       	cp	r22, r1
    15c6:	71 05       	cpc	r23, r1
    15c8:	81 05       	cpc	r24, r1
    15ca:	91 05       	cpc	r25, r1
    15cc:	19 f4       	brne	.+6      	; 0x15d4 <__floatunsisf+0x22>
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	5f c0       	rjmp	.+190    	; 0x1692 <__floatunsisf+0xe0>
    15d4:	83 e0       	ldi	r24, 0x03	; 3
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	8e e1       	ldi	r24, 0x1E	; 30
    15da:	c8 2e       	mov	r12, r24
    15dc:	d1 2c       	mov	r13, r1
    15de:	dc 82       	std	Y+4, r13	; 0x04
    15e0:	cb 82       	std	Y+3, r12	; 0x03
    15e2:	ed 82       	std	Y+5, r14	; 0x05
    15e4:	fe 82       	std	Y+6, r15	; 0x06
    15e6:	0f 83       	std	Y+7, r16	; 0x07
    15e8:	18 87       	std	Y+8, r17	; 0x08
    15ea:	c8 01       	movw	r24, r16
    15ec:	b7 01       	movw	r22, r14
    15ee:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__clzsi2>
    15f2:	fc 01       	movw	r30, r24
    15f4:	31 97       	sbiw	r30, 0x01	; 1
    15f6:	f7 ff       	sbrs	r31, 7
    15f8:	3a c0       	rjmp	.+116    	; 0x166e <__floatunsisf+0xbc>
    15fa:	aa 27       	eor	r26, r26
    15fc:	bb 27       	eor	r27, r27
    15fe:	ae 1b       	sub	r26, r30
    1600:	bf 0b       	sbc	r27, r31
    1602:	21 e0       	ldi	r18, 0x01	; 1
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	0a 2e       	mov	r0, r26
    160c:	04 c0       	rjmp	.+8      	; 0x1616 <__floatunsisf+0x64>
    160e:	22 0f       	add	r18, r18
    1610:	33 1f       	adc	r19, r19
    1612:	44 1f       	adc	r20, r20
    1614:	55 1f       	adc	r21, r21
    1616:	0a 94       	dec	r0
    1618:	d2 f7       	brpl	.-12     	; 0x160e <__floatunsisf+0x5c>
    161a:	21 50       	subi	r18, 0x01	; 1
    161c:	30 40       	sbci	r19, 0x00	; 0
    161e:	40 40       	sbci	r20, 0x00	; 0
    1620:	50 40       	sbci	r21, 0x00	; 0
    1622:	2e 21       	and	r18, r14
    1624:	3f 21       	and	r19, r15
    1626:	40 23       	and	r20, r16
    1628:	51 23       	and	r21, r17
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	21 15       	cp	r18, r1
    1634:	31 05       	cpc	r19, r1
    1636:	41 05       	cpc	r20, r1
    1638:	51 05       	cpc	r21, r1
    163a:	19 f4       	brne	.+6      	; 0x1642 <__floatunsisf+0x90>
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	cb 01       	movw	r24, r22
    1642:	04 c0       	rjmp	.+8      	; 0x164c <__floatunsisf+0x9a>
    1644:	16 95       	lsr	r17
    1646:	07 95       	ror	r16
    1648:	f7 94       	ror	r15
    164a:	e7 94       	ror	r14
    164c:	aa 95       	dec	r26
    164e:	d2 f7       	brpl	.-12     	; 0x1644 <__floatunsisf+0x92>
    1650:	e6 2a       	or	r14, r22
    1652:	f7 2a       	or	r15, r23
    1654:	08 2b       	or	r16, r24
    1656:	19 2b       	or	r17, r25
    1658:	ed 82       	std	Y+5, r14	; 0x05
    165a:	fe 82       	std	Y+6, r15	; 0x06
    165c:	0f 83       	std	Y+7, r16	; 0x07
    165e:	18 87       	std	Y+8, r17	; 0x08
    1660:	8e e1       	ldi	r24, 0x1E	; 30
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	8e 1b       	sub	r24, r30
    1666:	9f 0b       	sbc	r25, r31
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	8b 83       	std	Y+3, r24	; 0x03
    166c:	12 c0       	rjmp	.+36     	; 0x1692 <__floatunsisf+0xe0>
    166e:	30 97       	sbiw	r30, 0x00	; 0
    1670:	81 f0       	breq	.+32     	; 0x1692 <__floatunsisf+0xe0>
    1672:	0e 2e       	mov	r0, r30
    1674:	04 c0       	rjmp	.+8      	; 0x167e <__floatunsisf+0xcc>
    1676:	ee 0c       	add	r14, r14
    1678:	ff 1c       	adc	r15, r15
    167a:	00 1f       	adc	r16, r16
    167c:	11 1f       	adc	r17, r17
    167e:	0a 94       	dec	r0
    1680:	d2 f7       	brpl	.-12     	; 0x1676 <__floatunsisf+0xc4>
    1682:	ed 82       	std	Y+5, r14	; 0x05
    1684:	fe 82       	std	Y+6, r15	; 0x06
    1686:	0f 83       	std	Y+7, r16	; 0x07
    1688:	18 87       	std	Y+8, r17	; 0x08
    168a:	ce 1a       	sub	r12, r30
    168c:	df 0a       	sbc	r13, r31
    168e:	dc 82       	std	Y+4, r13	; 0x04
    1690:	cb 82       	std	Y+3, r12	; 0x03
    1692:	ce 01       	movw	r24, r28
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__pack_f>
    169a:	28 96       	adiw	r28, 0x08	; 8
    169c:	e8 e0       	ldi	r30, 0x08	; 8
    169e:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__epilogue_restores__+0x14>

000016a2 <__clzsi2>:
    16a2:	af 92       	push	r10
    16a4:	bf 92       	push	r11
    16a6:	cf 92       	push	r12
    16a8:	df 92       	push	r13
    16aa:	ef 92       	push	r14
    16ac:	ff 92       	push	r15
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	7b 01       	movw	r14, r22
    16b4:	8c 01       	movw	r16, r24
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	e8 16       	cp	r14, r24
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	f8 06       	cpc	r15, r24
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	08 07       	cpc	r16, r24
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	18 07       	cpc	r17, r24
    16c6:	58 f4       	brcc	.+22     	; 0x16de <__clzsi2+0x3c>
    16c8:	ef ef       	ldi	r30, 0xFF	; 255
    16ca:	ee 16       	cp	r14, r30
    16cc:	f1 04       	cpc	r15, r1
    16ce:	01 05       	cpc	r16, r1
    16d0:	11 05       	cpc	r17, r1
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <__clzsi2+0x34>
    16d4:	90 f4       	brcc	.+36     	; 0x16fa <__clzsi2+0x58>
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	dc 01       	movw	r26, r24
    16dc:	17 c0       	rjmp	.+46     	; 0x170c <__clzsi2+0x6a>
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	ef 16       	cp	r14, r31
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	ff 06       	cpc	r15, r31
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	0f 07       	cpc	r16, r31
    16ea:	f1 e0       	ldi	r31, 0x01	; 1
    16ec:	1f 07       	cpc	r17, r31
    16ee:	50 f4       	brcc	.+20     	; 0x1704 <__clzsi2+0x62>
    16f0:	80 e1       	ldi	r24, 0x10	; 16
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a0 e0       	ldi	r26, 0x00	; 0
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	09 c0       	rjmp	.+18     	; 0x170c <__clzsi2+0x6a>
    16fa:	88 e0       	ldi	r24, 0x08	; 8
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a0 e0       	ldi	r26, 0x00	; 0
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	04 c0       	rjmp	.+8      	; 0x170c <__clzsi2+0x6a>
    1704:	88 e1       	ldi	r24, 0x18	; 24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a0 e0       	ldi	r26, 0x00	; 0
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	20 e2       	ldi	r18, 0x20	; 32
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	28 1b       	sub	r18, r24
    1716:	39 0b       	sbc	r19, r25
    1718:	4a 0b       	sbc	r20, r26
    171a:	5b 0b       	sbc	r21, r27
    171c:	57 01       	movw	r10, r14
    171e:	68 01       	movw	r12, r16
    1720:	04 c0       	rjmp	.+8      	; 0x172a <__clzsi2+0x88>
    1722:	d6 94       	lsr	r13
    1724:	c7 94       	ror	r12
    1726:	b7 94       	ror	r11
    1728:	a7 94       	ror	r10
    172a:	8a 95       	dec	r24
    172c:	d2 f7       	brpl	.-12     	; 0x1722 <__clzsi2+0x80>
    172e:	d6 01       	movw	r26, r12
    1730:	c5 01       	movw	r24, r10
    1732:	88 5f       	subi	r24, 0xF8	; 248
    1734:	9e 4f       	sbci	r25, 0xFE	; 254
    1736:	fc 01       	movw	r30, r24
    1738:	80 81       	ld	r24, Z
    173a:	28 1b       	sub	r18, r24
    173c:	31 09       	sbc	r19, r1
    173e:	41 09       	sbc	r20, r1
    1740:	51 09       	sbc	r21, r1
    1742:	c9 01       	movw	r24, r18
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	df 90       	pop	r13
    174e:	cf 90       	pop	r12
    1750:	bf 90       	pop	r11
    1752:	af 90       	pop	r10
    1754:	08 95       	ret

00001756 <__pack_f>:
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	fc 01       	movw	r30, r24
    1764:	24 81       	ldd	r18, Z+4	; 0x04
    1766:	35 81       	ldd	r19, Z+5	; 0x05
    1768:	46 81       	ldd	r20, Z+6	; 0x06
    176a:	57 81       	ldd	r21, Z+7	; 0x07
    176c:	61 81       	ldd	r22, Z+1	; 0x01
    176e:	80 81       	ld	r24, Z
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	20 f4       	brcc	.+8      	; 0x177c <__pack_f+0x26>
    1774:	40 61       	ori	r20, 0x10	; 16
    1776:	ef ef       	ldi	r30, 0xFF	; 255
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	a3 c0       	rjmp	.+326    	; 0x18c2 <__pack_f+0x16c>
    177c:	84 30       	cpi	r24, 0x04	; 4
    177e:	09 f4       	brne	.+2      	; 0x1782 <__pack_f+0x2c>
    1780:	9b c0       	rjmp	.+310    	; 0x18b8 <__pack_f+0x162>
    1782:	82 30       	cpi	r24, 0x02	; 2
    1784:	09 f4       	brne	.+2      	; 0x1788 <__pack_f+0x32>
    1786:	92 c0       	rjmp	.+292    	; 0x18ac <__pack_f+0x156>
    1788:	21 15       	cp	r18, r1
    178a:	31 05       	cpc	r19, r1
    178c:	41 05       	cpc	r20, r1
    178e:	51 05       	cpc	r21, r1
    1790:	09 f4       	brne	.+2      	; 0x1794 <__pack_f+0x3e>
    1792:	8f c0       	rjmp	.+286    	; 0x18b2 <__pack_f+0x15c>
    1794:	02 80       	ldd	r0, Z+2	; 0x02
    1796:	f3 81       	ldd	r31, Z+3	; 0x03
    1798:	e0 2d       	mov	r30, r0
    179a:	8f ef       	ldi	r24, 0xFF	; 255
    179c:	e2 38       	cpi	r30, 0x82	; 130
    179e:	f8 07       	cpc	r31, r24
    17a0:	0c f0       	brlt	.+2      	; 0x17a4 <__pack_f+0x4e>
    17a2:	5a c0       	rjmp	.+180    	; 0x1858 <__pack_f+0x102>
    17a4:	c2 e8       	ldi	r28, 0x82	; 130
    17a6:	df ef       	ldi	r29, 0xFF	; 255
    17a8:	ce 1b       	sub	r28, r30
    17aa:	df 0b       	sbc	r29, r31
    17ac:	ca 31       	cpi	r28, 0x1A	; 26
    17ae:	d1 05       	cpc	r29, r1
    17b0:	6c f5       	brge	.+90     	; 0x180c <__pack_f+0xb6>
    17b2:	79 01       	movw	r14, r18
    17b4:	8a 01       	movw	r16, r20
    17b6:	0c 2e       	mov	r0, r28
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <__pack_f+0x6c>
    17ba:	16 95       	lsr	r17
    17bc:	07 95       	ror	r16
    17be:	f7 94       	ror	r15
    17c0:	e7 94       	ror	r14
    17c2:	0a 94       	dec	r0
    17c4:	d2 f7       	brpl	.-12     	; 0x17ba <__pack_f+0x64>
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a0 e0       	ldi	r26, 0x00	; 0
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	0c 2e       	mov	r0, r28
    17d0:	04 c0       	rjmp	.+8      	; 0x17da <__pack_f+0x84>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	aa 1f       	adc	r26, r26
    17d8:	bb 1f       	adc	r27, r27
    17da:	0a 94       	dec	r0
    17dc:	d2 f7       	brpl	.-12     	; 0x17d2 <__pack_f+0x7c>
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	a1 09       	sbc	r26, r1
    17e2:	b1 09       	sbc	r27, r1
    17e4:	82 23       	and	r24, r18
    17e6:	93 23       	and	r25, r19
    17e8:	a4 23       	and	r26, r20
    17ea:	b5 23       	and	r27, r21
    17ec:	21 e0       	ldi	r18, 0x01	; 1
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e0       	ldi	r20, 0x00	; 0
    17f2:	50 e0       	ldi	r21, 0x00	; 0
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	a1 05       	cpc	r26, r1
    17f8:	b1 05       	cpc	r27, r1
    17fa:	19 f4       	brne	.+6      	; 0x1802 <__pack_f+0xac>
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	a9 01       	movw	r20, r18
    1802:	2e 29       	or	r18, r14
    1804:	3f 29       	or	r19, r15
    1806:	40 2b       	or	r20, r16
    1808:	51 2b       	or	r21, r17
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <__pack_f+0xbc>
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	a9 01       	movw	r20, r18
    1812:	da 01       	movw	r26, r20
    1814:	c9 01       	movw	r24, r18
    1816:	8f 77       	andi	r24, 0x7F	; 127
    1818:	90 70       	andi	r25, 0x00	; 0
    181a:	a0 70       	andi	r26, 0x00	; 0
    181c:	b0 70       	andi	r27, 0x00	; 0
    181e:	80 34       	cpi	r24, 0x40	; 64
    1820:	91 05       	cpc	r25, r1
    1822:	a1 05       	cpc	r26, r1
    1824:	b1 05       	cpc	r27, r1
    1826:	39 f4       	brne	.+14     	; 0x1836 <__pack_f+0xe0>
    1828:	27 ff       	sbrs	r18, 7
    182a:	09 c0       	rjmp	.+18     	; 0x183e <__pack_f+0xe8>
    182c:	20 5c       	subi	r18, 0xC0	; 192
    182e:	3f 4f       	sbci	r19, 0xFF	; 255
    1830:	4f 4f       	sbci	r20, 0xFF	; 255
    1832:	5f 4f       	sbci	r21, 0xFF	; 255
    1834:	04 c0       	rjmp	.+8      	; 0x183e <__pack_f+0xe8>
    1836:	21 5c       	subi	r18, 0xC1	; 193
    1838:	3f 4f       	sbci	r19, 0xFF	; 255
    183a:	4f 4f       	sbci	r20, 0xFF	; 255
    183c:	5f 4f       	sbci	r21, 0xFF	; 255
    183e:	e1 e0       	ldi	r30, 0x01	; 1
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	20 30       	cpi	r18, 0x00	; 0
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	38 07       	cpc	r19, r24
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	48 07       	cpc	r20, r24
    184c:	80 e4       	ldi	r24, 0x40	; 64
    184e:	58 07       	cpc	r21, r24
    1850:	28 f5       	brcc	.+74     	; 0x189c <__pack_f+0x146>
    1852:	e0 e0       	ldi	r30, 0x00	; 0
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	22 c0       	rjmp	.+68     	; 0x189c <__pack_f+0x146>
    1858:	e0 38       	cpi	r30, 0x80	; 128
    185a:	f1 05       	cpc	r31, r1
    185c:	6c f5       	brge	.+90     	; 0x18b8 <__pack_f+0x162>
    185e:	e1 58       	subi	r30, 0x81	; 129
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	da 01       	movw	r26, r20
    1864:	c9 01       	movw	r24, r18
    1866:	8f 77       	andi	r24, 0x7F	; 127
    1868:	90 70       	andi	r25, 0x00	; 0
    186a:	a0 70       	andi	r26, 0x00	; 0
    186c:	b0 70       	andi	r27, 0x00	; 0
    186e:	80 34       	cpi	r24, 0x40	; 64
    1870:	91 05       	cpc	r25, r1
    1872:	a1 05       	cpc	r26, r1
    1874:	b1 05       	cpc	r27, r1
    1876:	39 f4       	brne	.+14     	; 0x1886 <__pack_f+0x130>
    1878:	27 ff       	sbrs	r18, 7
    187a:	09 c0       	rjmp	.+18     	; 0x188e <__pack_f+0x138>
    187c:	20 5c       	subi	r18, 0xC0	; 192
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	4f 4f       	sbci	r20, 0xFF	; 255
    1882:	5f 4f       	sbci	r21, 0xFF	; 255
    1884:	04 c0       	rjmp	.+8      	; 0x188e <__pack_f+0x138>
    1886:	21 5c       	subi	r18, 0xC1	; 193
    1888:	3f 4f       	sbci	r19, 0xFF	; 255
    188a:	4f 4f       	sbci	r20, 0xFF	; 255
    188c:	5f 4f       	sbci	r21, 0xFF	; 255
    188e:	57 ff       	sbrs	r21, 7
    1890:	05 c0       	rjmp	.+10     	; 0x189c <__pack_f+0x146>
    1892:	56 95       	lsr	r21
    1894:	47 95       	ror	r20
    1896:	37 95       	ror	r19
    1898:	27 95       	ror	r18
    189a:	31 96       	adiw	r30, 0x01	; 1
    189c:	87 e0       	ldi	r24, 0x07	; 7
    189e:	56 95       	lsr	r21
    18a0:	47 95       	ror	r20
    18a2:	37 95       	ror	r19
    18a4:	27 95       	ror	r18
    18a6:	8a 95       	dec	r24
    18a8:	d1 f7       	brne	.-12     	; 0x189e <__pack_f+0x148>
    18aa:	0b c0       	rjmp	.+22     	; 0x18c2 <__pack_f+0x16c>
    18ac:	e0 e0       	ldi	r30, 0x00	; 0
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	05 c0       	rjmp	.+10     	; 0x18bc <__pack_f+0x166>
    18b2:	e0 e0       	ldi	r30, 0x00	; 0
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	05 c0       	rjmp	.+10     	; 0x18c2 <__pack_f+0x16c>
    18b8:	ef ef       	ldi	r30, 0xFF	; 255
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	a9 01       	movw	r20, r18
    18c2:	8e 2f       	mov	r24, r30
    18c4:	87 95       	ror	r24
    18c6:	88 27       	eor	r24, r24
    18c8:	87 95       	ror	r24
    18ca:	94 2f       	mov	r25, r20
    18cc:	9f 77       	andi	r25, 0x7F	; 127
    18ce:	67 95       	ror	r22
    18d0:	66 27       	eor	r22, r22
    18d2:	67 95       	ror	r22
    18d4:	e6 95       	lsr	r30
    18d6:	e2 2e       	mov	r14, r18
    18d8:	a9 2f       	mov	r26, r25
    18da:	a8 2b       	or	r26, r24
    18dc:	fe 2f       	mov	r31, r30
    18de:	f6 2b       	or	r31, r22
    18e0:	62 2f       	mov	r22, r18
    18e2:	73 2f       	mov	r23, r19
    18e4:	8a 2f       	mov	r24, r26
    18e6:	9f 2f       	mov	r25, r31
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	e6 e0       	ldi	r30, 0x06	; 6
    18ee:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__epilogue_restores__+0x18>

000018f2 <__unpack_f>:
    18f2:	dc 01       	movw	r26, r24
    18f4:	fb 01       	movw	r30, r22
    18f6:	2c 91       	ld	r18, X
    18f8:	11 96       	adiw	r26, 0x01	; 1
    18fa:	3c 91       	ld	r19, X
    18fc:	11 97       	sbiw	r26, 0x01	; 1
    18fe:	12 96       	adiw	r26, 0x02	; 2
    1900:	8c 91       	ld	r24, X
    1902:	12 97       	sbiw	r26, 0x02	; 2
    1904:	48 2f       	mov	r20, r24
    1906:	4f 77       	andi	r20, 0x7F	; 127
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	98 2f       	mov	r25, r24
    190c:	99 1f       	adc	r25, r25
    190e:	99 27       	eor	r25, r25
    1910:	99 1f       	adc	r25, r25
    1912:	13 96       	adiw	r26, 0x03	; 3
    1914:	6c 91       	ld	r22, X
    1916:	13 97       	sbiw	r26, 0x03	; 3
    1918:	86 2f       	mov	r24, r22
    191a:	88 0f       	add	r24, r24
    191c:	89 2b       	or	r24, r25
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	66 1f       	adc	r22, r22
    1922:	66 27       	eor	r22, r22
    1924:	66 1f       	adc	r22, r22
    1926:	61 83       	std	Z+1, r22	; 0x01
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	39 f5       	brne	.+78     	; 0x197a <__unpack_f+0x88>
    192c:	21 15       	cp	r18, r1
    192e:	31 05       	cpc	r19, r1
    1930:	41 05       	cpc	r20, r1
    1932:	51 05       	cpc	r21, r1
    1934:	11 f4       	brne	.+4      	; 0x193a <__unpack_f+0x48>
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	29 c0       	rjmp	.+82     	; 0x198c <__unpack_f+0x9a>
    193a:	82 e8       	ldi	r24, 0x82	; 130
    193c:	9f ef       	ldi	r25, 0xFF	; 255
    193e:	93 83       	std	Z+3, r25	; 0x03
    1940:	82 83       	std	Z+2, r24	; 0x02
    1942:	67 e0       	ldi	r22, 0x07	; 7
    1944:	22 0f       	add	r18, r18
    1946:	33 1f       	adc	r19, r19
    1948:	44 1f       	adc	r20, r20
    194a:	55 1f       	adc	r21, r21
    194c:	6a 95       	dec	r22
    194e:	d1 f7       	brne	.-12     	; 0x1944 <__unpack_f+0x52>
    1950:	83 e0       	ldi	r24, 0x03	; 3
    1952:	80 83       	st	Z, r24
    1954:	09 c0       	rjmp	.+18     	; 0x1968 <__unpack_f+0x76>
    1956:	22 0f       	add	r18, r18
    1958:	33 1f       	adc	r19, r19
    195a:	44 1f       	adc	r20, r20
    195c:	55 1f       	adc	r21, r21
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	93 83       	std	Z+3, r25	; 0x03
    1966:	82 83       	std	Z+2, r24	; 0x02
    1968:	20 30       	cpi	r18, 0x00	; 0
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	38 07       	cpc	r19, r24
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	48 07       	cpc	r20, r24
    1972:	80 e4       	ldi	r24, 0x40	; 64
    1974:	58 07       	cpc	r21, r24
    1976:	78 f3       	brcs	.-34     	; 0x1956 <__unpack_f+0x64>
    1978:	20 c0       	rjmp	.+64     	; 0x19ba <__unpack_f+0xc8>
    197a:	8f 3f       	cpi	r24, 0xFF	; 255
    197c:	91 05       	cpc	r25, r1
    197e:	79 f4       	brne	.+30     	; 0x199e <__unpack_f+0xac>
    1980:	21 15       	cp	r18, r1
    1982:	31 05       	cpc	r19, r1
    1984:	41 05       	cpc	r20, r1
    1986:	51 05       	cpc	r21, r1
    1988:	19 f4       	brne	.+6      	; 0x1990 <__unpack_f+0x9e>
    198a:	84 e0       	ldi	r24, 0x04	; 4
    198c:	80 83       	st	Z, r24
    198e:	08 95       	ret
    1990:	44 ff       	sbrs	r20, 4
    1992:	03 c0       	rjmp	.+6      	; 0x199a <__unpack_f+0xa8>
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	80 83       	st	Z, r24
    1998:	10 c0       	rjmp	.+32     	; 0x19ba <__unpack_f+0xc8>
    199a:	10 82       	st	Z, r1
    199c:	0e c0       	rjmp	.+28     	; 0x19ba <__unpack_f+0xc8>
    199e:	8f 57       	subi	r24, 0x7F	; 127
    19a0:	90 40       	sbci	r25, 0x00	; 0
    19a2:	93 83       	std	Z+3, r25	; 0x03
    19a4:	82 83       	std	Z+2, r24	; 0x02
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	80 83       	st	Z, r24
    19aa:	87 e0       	ldi	r24, 0x07	; 7
    19ac:	22 0f       	add	r18, r18
    19ae:	33 1f       	adc	r19, r19
    19b0:	44 1f       	adc	r20, r20
    19b2:	55 1f       	adc	r21, r21
    19b4:	8a 95       	dec	r24
    19b6:	d1 f7       	brne	.-12     	; 0x19ac <__unpack_f+0xba>
    19b8:	50 64       	ori	r21, 0x40	; 64
    19ba:	24 83       	std	Z+4, r18	; 0x04
    19bc:	35 83       	std	Z+5, r19	; 0x05
    19be:	46 83       	std	Z+6, r20	; 0x06
    19c0:	57 83       	std	Z+7, r21	; 0x07
    19c2:	08 95       	ret

000019c4 <__fpcmp_parts_f>:
    19c4:	fc 01       	movw	r30, r24
    19c6:	db 01       	movw	r26, r22
    19c8:	90 81       	ld	r25, Z
    19ca:	92 30       	cpi	r25, 0x02	; 2
    19cc:	08 f4       	brcc	.+2      	; 0x19d0 <__fpcmp_parts_f+0xc>
    19ce:	49 c0       	rjmp	.+146    	; 0x1a62 <__fpcmp_parts_f+0x9e>
    19d0:	8c 91       	ld	r24, X
    19d2:	82 30       	cpi	r24, 0x02	; 2
    19d4:	08 f4       	brcc	.+2      	; 0x19d8 <__fpcmp_parts_f+0x14>
    19d6:	45 c0       	rjmp	.+138    	; 0x1a62 <__fpcmp_parts_f+0x9e>
    19d8:	94 30       	cpi	r25, 0x04	; 4
    19da:	51 f4       	brne	.+20     	; 0x19f0 <__fpcmp_parts_f+0x2c>
    19dc:	61 81       	ldd	r22, Z+1	; 0x01
    19de:	84 30       	cpi	r24, 0x04	; 4
    19e0:	b1 f5       	brne	.+108    	; 0x1a4e <__fpcmp_parts_f+0x8a>
    19e2:	11 96       	adiw	r26, 0x01	; 1
    19e4:	2c 91       	ld	r18, X
    19e6:	11 97       	sbiw	r26, 0x01	; 1
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	26 1b       	sub	r18, r22
    19ec:	31 09       	sbc	r19, r1
    19ee:	41 c0       	rjmp	.+130    	; 0x1a72 <__fpcmp_parts_f+0xae>
    19f0:	84 30       	cpi	r24, 0x04	; 4
    19f2:	21 f0       	breq	.+8      	; 0x19fc <__fpcmp_parts_f+0x38>
    19f4:	92 30       	cpi	r25, 0x02	; 2
    19f6:	41 f4       	brne	.+16     	; 0x1a08 <__fpcmp_parts_f+0x44>
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	b1 f1       	breq	.+108    	; 0x1a68 <__fpcmp_parts_f+0xa4>
    19fc:	11 96       	adiw	r26, 0x01	; 1
    19fe:	8c 91       	ld	r24, X
    1a00:	11 97       	sbiw	r26, 0x01	; 1
    1a02:	88 23       	and	r24, r24
    1a04:	a1 f1       	breq	.+104    	; 0x1a6e <__fpcmp_parts_f+0xaa>
    1a06:	2d c0       	rjmp	.+90     	; 0x1a62 <__fpcmp_parts_f+0x9e>
    1a08:	61 81       	ldd	r22, Z+1	; 0x01
    1a0a:	82 30       	cpi	r24, 0x02	; 2
    1a0c:	01 f1       	breq	.+64     	; 0x1a4e <__fpcmp_parts_f+0x8a>
    1a0e:	11 96       	adiw	r26, 0x01	; 1
    1a10:	8c 91       	ld	r24, X
    1a12:	11 97       	sbiw	r26, 0x01	; 1
    1a14:	68 17       	cp	r22, r24
    1a16:	d9 f4       	brne	.+54     	; 0x1a4e <__fpcmp_parts_f+0x8a>
    1a18:	22 81       	ldd	r18, Z+2	; 0x02
    1a1a:	33 81       	ldd	r19, Z+3	; 0x03
    1a1c:	12 96       	adiw	r26, 0x02	; 2
    1a1e:	8d 91       	ld	r24, X+
    1a20:	9c 91       	ld	r25, X
    1a22:	13 97       	sbiw	r26, 0x03	; 3
    1a24:	82 17       	cp	r24, r18
    1a26:	93 07       	cpc	r25, r19
    1a28:	94 f0       	brlt	.+36     	; 0x1a4e <__fpcmp_parts_f+0x8a>
    1a2a:	28 17       	cp	r18, r24
    1a2c:	39 07       	cpc	r19, r25
    1a2e:	bc f0       	brlt	.+46     	; 0x1a5e <__fpcmp_parts_f+0x9a>
    1a30:	24 81       	ldd	r18, Z+4	; 0x04
    1a32:	35 81       	ldd	r19, Z+5	; 0x05
    1a34:	46 81       	ldd	r20, Z+6	; 0x06
    1a36:	57 81       	ldd	r21, Z+7	; 0x07
    1a38:	14 96       	adiw	r26, 0x04	; 4
    1a3a:	8d 91       	ld	r24, X+
    1a3c:	9d 91       	ld	r25, X+
    1a3e:	0d 90       	ld	r0, X+
    1a40:	bc 91       	ld	r27, X
    1a42:	a0 2d       	mov	r26, r0
    1a44:	82 17       	cp	r24, r18
    1a46:	93 07       	cpc	r25, r19
    1a48:	a4 07       	cpc	r26, r20
    1a4a:	b5 07       	cpc	r27, r21
    1a4c:	18 f4       	brcc	.+6      	; 0x1a54 <__fpcmp_parts_f+0x90>
    1a4e:	66 23       	and	r22, r22
    1a50:	41 f0       	breq	.+16     	; 0x1a62 <__fpcmp_parts_f+0x9e>
    1a52:	0d c0       	rjmp	.+26     	; 0x1a6e <__fpcmp_parts_f+0xaa>
    1a54:	28 17       	cp	r18, r24
    1a56:	39 07       	cpc	r19, r25
    1a58:	4a 07       	cpc	r20, r26
    1a5a:	5b 07       	cpc	r21, r27
    1a5c:	28 f4       	brcc	.+10     	; 0x1a68 <__fpcmp_parts_f+0xa4>
    1a5e:	66 23       	and	r22, r22
    1a60:	31 f0       	breq	.+12     	; 0x1a6e <__fpcmp_parts_f+0xaa>
    1a62:	21 e0       	ldi	r18, 0x01	; 1
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	05 c0       	rjmp	.+10     	; 0x1a72 <__fpcmp_parts_f+0xae>
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <__fpcmp_parts_f+0xae>
    1a6e:	2f ef       	ldi	r18, 0xFF	; 255
    1a70:	3f ef       	ldi	r19, 0xFF	; 255
    1a72:	c9 01       	movw	r24, r18
    1a74:	08 95       	ret

00001a76 <__udivmodhi4>:
    1a76:	aa 1b       	sub	r26, r26
    1a78:	bb 1b       	sub	r27, r27
    1a7a:	51 e1       	ldi	r21, 0x11	; 17
    1a7c:	07 c0       	rjmp	.+14     	; 0x1a8c <__udivmodhi4_ep>

00001a7e <__udivmodhi4_loop>:
    1a7e:	aa 1f       	adc	r26, r26
    1a80:	bb 1f       	adc	r27, r27
    1a82:	a6 17       	cp	r26, r22
    1a84:	b7 07       	cpc	r27, r23
    1a86:	10 f0       	brcs	.+4      	; 0x1a8c <__udivmodhi4_ep>
    1a88:	a6 1b       	sub	r26, r22
    1a8a:	b7 0b       	sbc	r27, r23

00001a8c <__udivmodhi4_ep>:
    1a8c:	88 1f       	adc	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	5a 95       	dec	r21
    1a92:	a9 f7       	brne	.-22     	; 0x1a7e <__udivmodhi4_loop>
    1a94:	80 95       	com	r24
    1a96:	90 95       	com	r25
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	08 95       	ret

00001a9e <__prologue_saves__>:
    1a9e:	2f 92       	push	r2
    1aa0:	3f 92       	push	r3
    1aa2:	4f 92       	push	r4
    1aa4:	5f 92       	push	r5
    1aa6:	6f 92       	push	r6
    1aa8:	7f 92       	push	r7
    1aaa:	8f 92       	push	r8
    1aac:	9f 92       	push	r9
    1aae:	af 92       	push	r10
    1ab0:	bf 92       	push	r11
    1ab2:	cf 92       	push	r12
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	ca 1b       	sub	r28, r26
    1ac8:	db 0b       	sbc	r29, r27
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	09 94       	ijmp

00001ad6 <__epilogue_restores__>:
    1ad6:	2a 88       	ldd	r2, Y+18	; 0x12
    1ad8:	39 88       	ldd	r3, Y+17	; 0x11
    1ada:	48 88       	ldd	r4, Y+16	; 0x10
    1adc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ade:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ae0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ae2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ae4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ae6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ae8:	b9 84       	ldd	r11, Y+9	; 0x09
    1aea:	c8 84       	ldd	r12, Y+8	; 0x08
    1aec:	df 80       	ldd	r13, Y+7	; 0x07
    1aee:	ee 80       	ldd	r14, Y+6	; 0x06
    1af0:	fd 80       	ldd	r15, Y+5	; 0x05
    1af2:	0c 81       	ldd	r16, Y+4	; 0x04
    1af4:	1b 81       	ldd	r17, Y+3	; 0x03
    1af6:	aa 81       	ldd	r26, Y+2	; 0x02
    1af8:	b9 81       	ldd	r27, Y+1	; 0x01
    1afa:	ce 0f       	add	r28, r30
    1afc:	d1 1d       	adc	r29, r1
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	ed 01       	movw	r28, r26
    1b0a:	08 95       	ret

00001b0c <itoa>:
    1b0c:	fb 01       	movw	r30, r22
    1b0e:	9f 01       	movw	r18, r30
    1b10:	e8 94       	clt
    1b12:	42 30       	cpi	r20, 0x02	; 2
    1b14:	c4 f0       	brlt	.+48     	; 0x1b46 <itoa+0x3a>
    1b16:	45 32       	cpi	r20, 0x25	; 37
    1b18:	b4 f4       	brge	.+44     	; 0x1b46 <itoa+0x3a>
    1b1a:	4a 30       	cpi	r20, 0x0A	; 10
    1b1c:	29 f4       	brne	.+10     	; 0x1b28 <itoa+0x1c>
    1b1e:	97 fb       	bst	r25, 7
    1b20:	1e f4       	brtc	.+6      	; 0x1b28 <itoa+0x1c>
    1b22:	90 95       	com	r25
    1b24:	81 95       	neg	r24
    1b26:	9f 4f       	sbci	r25, 0xFF	; 255
    1b28:	64 2f       	mov	r22, r20
    1b2a:	77 27       	eor	r23, r23
    1b2c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
    1b30:	80 5d       	subi	r24, 0xD0	; 208
    1b32:	8a 33       	cpi	r24, 0x3A	; 58
    1b34:	0c f0       	brlt	.+2      	; 0x1b38 <itoa+0x2c>
    1b36:	89 5d       	subi	r24, 0xD9	; 217
    1b38:	81 93       	st	Z+, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	a1 f7       	brne	.-24     	; 0x1b28 <itoa+0x1c>
    1b40:	16 f4       	brtc	.+4      	; 0x1b46 <itoa+0x3a>
    1b42:	5d e2       	ldi	r21, 0x2D	; 45
    1b44:	51 93       	st	Z+, r21
    1b46:	10 82       	st	Z, r1
    1b48:	c9 01       	movw	r24, r18
    1b4a:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <strrev>

00001b4e <strrev>:
    1b4e:	dc 01       	movw	r26, r24
    1b50:	fc 01       	movw	r30, r24
    1b52:	67 2f       	mov	r22, r23
    1b54:	71 91       	ld	r23, Z+
    1b56:	77 23       	and	r23, r23
    1b58:	e1 f7       	brne	.-8      	; 0x1b52 <strrev+0x4>
    1b5a:	32 97       	sbiw	r30, 0x02	; 2
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <strrev+0x18>
    1b5e:	7c 91       	ld	r23, X
    1b60:	6d 93       	st	X+, r22
    1b62:	70 83       	st	Z, r23
    1b64:	62 91       	ld	r22, -Z
    1b66:	ae 17       	cp	r26, r30
    1b68:	bf 07       	cpc	r27, r31
    1b6a:	c8 f3       	brcs	.-14     	; 0x1b5e <strrev+0x10>
    1b6c:	08 95       	ret

00001b6e <_exit>:
    1b6e:	f8 94       	cli

00001b70 <__stop_program>:
    1b70:	ff cf       	rjmp	.-2      	; 0x1b70 <__stop_program>
