
Can Car Project_Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  00001c74  00001d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800208  00800208  00001e10  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00001e10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00002764  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000260  00000000  00000000  000028b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000474  00000000  00000000  00002b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002db9  00000000  00000000  00002f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000017b1  00000000  00000000  00005d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000020e2  00000000  00000000  000074ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000380  00000000  00000000  000095d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000646  00000000  00000000  00009954  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e21  00000000  00000000  00009f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000007c6  00000000  00000000  0000adbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000080  00000000  00000000  0000b581  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_1>
       8:	0c 94 42 04 	jmp	0x884	; 0x884 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__vector_10>
      2c:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a8 e0       	ldi	r26, 0x08	; 8
      78:	b2 e0       	ldi	r27, 0x02	; 2
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	a8 32       	cpi	r26, 0x28	; 40
      80:	b1 07       	cpc	r27, r17
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
      84:	12 e0       	ldi	r17, 0x02	; 2
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e4 e7       	ldi	r30, 0x74	; 116
      8c:	fc e1       	ldi	r31, 0x1C	; 28
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	a8 30       	cpi	r26, 0x08	; 8
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
      9a:	0e 94 99 03 	call	0x732	; 0x732 <main>
      9e:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <INIT_ADC>:
 * Created: 07/04/2019 09:39:41 AM
 *  Author: Ahmed
 */ 
#include <avr/io.h>
void INIT_ADC()
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	ADMUX|=(1<<REFS0); 
      ae:	8c e7       	ldi	r24, 0x7C	; 124
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	2c e7       	ldi	r18, 0x7C	; 124
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	f9 01       	movw	r30, r18
      b8:	20 81       	ld	r18, Z
      ba:	20 64       	ori	r18, 0x40	; 64
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
	ADCSRA|=(1<<ADEN); //enable ADC
      c0:	8a e7       	ldi	r24, 0x7A	; 122
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	2a e7       	ldi	r18, 0x7A	; 122
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	20 68       	ori	r18, 0x80	; 128
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
	ADCSRA|=(7<<ADPS0);//clock Division Factor
      d2:	8a e7       	ldi	r24, 0x7A	; 122
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	2a e7       	ldi	r18, 0x7A	; 122
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	20 81       	ld	r18, Z
      de:	27 60       	ori	r18, 0x07	; 7
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
}
      e4:	cf 91       	pop	r28
      e6:	df 91       	pop	r29
      e8:	08 95       	ret

000000ea <Analog_Read>:
	
int Analog_Read(uint8_t pin_num)
{
      ea:	df 93       	push	r29
      ec:	cf 93       	push	r28
      ee:	0f 92       	push	r0
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX|= pin_num;
      f6:	8c e7       	ldi	r24, 0x7C	; 124
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	2c e7       	ldi	r18, 0x7C	; 124
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	f9 01       	movw	r30, r18
     100:	30 81       	ld	r19, Z
     102:	29 81       	ldd	r18, Y+1	; 0x01
     104:	23 2b       	or	r18, r19
     106:	fc 01       	movw	r30, r24
     108:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC);
     10a:	8a e7       	ldi	r24, 0x7A	; 122
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	2a e7       	ldi	r18, 0x7A	; 122
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	f9 01       	movw	r30, r18
     114:	20 81       	ld	r18, Z
     116:	20 64       	ori	r18, 0x40	; 64
     118:	fc 01       	movw	r30, r24
     11a:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));
     11c:	00 00       	nop
     11e:	8a e7       	ldi	r24, 0x7A	; 122
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	fc 01       	movw	r30, r24
     124:	80 81       	ld	r24, Z
     126:	88 2f       	mov	r24, r24
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	80 74       	andi	r24, 0x40	; 64
     12c:	90 70       	andi	r25, 0x00	; 0
     12e:	00 97       	sbiw	r24, 0x00	; 0
     130:	b1 f7       	brne	.-20     	; 0x11e <Analog_Read+0x34>
	return ADC;	
     132:	88 e7       	ldi	r24, 0x78	; 120
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	80 81       	ld	r24, Z
     13a:	91 81       	ldd	r25, Z+1	; 0x01
     13c:	0f 90       	pop	r0
     13e:	cf 91       	pop	r28
     140:	df 91       	pop	r29
     142:	08 95       	ret

00000144 <readRegister>:
 * \see MCP2515 datasheet, chapter 11 - register description
 * \see MCP2515 datasheet, chapter 12 - read instruction
 * \param address Register address
 */
unsigned char readRegister(unsigned char address)
{
     144:	df 93       	push	r29
     146:	cf 93       	push	r28
     148:	00 d0       	rcall	.+0      	; 0x14a <readRegister+0x6>
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
     14e:	8a 83       	std	Y+2, r24	; 0x02
	 /* Send read instruction, address, and receive result */
	 spiMasterChipSelect(1);
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	 spiMasterTRANSMIT(READ_INSTRUCTION);
     156:	83 e0       	ldi	r24, 0x03	; 3
     158:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(address);
     15c:	8a 81       	ldd	r24, Y+2	; 0x02
     15e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	unsigned char buffer = spiMasterTRANSMIT(0);
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
     168:	89 83       	std	Y+1, r24	; 0x01
	 spiMasterChipSelect(0);
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	 return buffer;
     170:	89 81       	ldd	r24, Y+1	; 0x01
}
     172:	0f 90       	pop	r0
     174:	0f 90       	pop	r0
     176:	cf 91       	pop	r28
     178:	df 91       	pop	r29
     17a:	08 95       	ret

0000017c <writeRegister>:
 * \see MCP2515 datasheet, chapter 12 - write instruction
 * \param address Register address
 * \param value New value of the register
 */
void writeRegister(unsigned char address, unsigned char value)
{
     17c:	df 93       	push	r29
     17e:	cf 93       	push	r28
     180:	00 d0       	rcall	.+0      	; 0x182 <writeRegister+0x6>
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	89 83       	std	Y+1, r24	; 0x01
     188:	6a 83       	std	Y+2, r22	; 0x02
	/* Send write instruction, address, and data */
	 spiMasterChipSelect(1);
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	 spiMasterTRANSMIT(WRITE_INSTRUCTION);
     190:	82 e0       	ldi	r24, 0x02	; 2
     192:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(address);
     196:	89 81       	ldd	r24, Y+1	; 0x01
     198:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(value);
     19c:	8a 81       	ldd	r24, Y+2	; 0x02
     19e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterChipSelect(0);
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
}
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	cf 91       	pop	r28
     1ae:	df 91       	pop	r29
     1b0:	08 95       	ret

000001b2 <resetMCP2515>:
/**
 * Send reset instruction to the MCP2515. Device should
 * reinitialize yourself and go to the configuration mode
 */
void resetMCP2515()
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
	 /* Send reset instruction */
	 spiMasterChipSelect(1);
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	 spiMasterTRANSMIT(RESET_INSTRUCTION);
     1c0:	80 ec       	ldi	r24, 0xC0	; 192
     1c2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterChipSelect(0);
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
}
     1cc:	cf 91       	pop	r28
     1ce:	df 91       	pop	r29
     1d0:	08 95       	ret

000001d2 <setBitTiming>:

unsigned char setBitTiming(unsigned char rCNF1, unsigned char rCNF2, unsigned char rCNF3)
{
     1d2:	df 93       	push	r29
     1d4:	cf 93       	push	r28
     1d6:	00 d0       	rcall	.+0      	; 0x1d8 <setBitTiming+0x6>
     1d8:	0f 92       	push	r0
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
     1de:	89 83       	std	Y+1, r24	; 0x01
     1e0:	6a 83       	std	Y+2, r22	; 0x02
     1e2:	4b 83       	std	Y+3, r20	; 0x03
	 if(getMode == CONFIGURATION_MODE) { 
     1e4:	8e e0       	ldi	r24, 0x0E	; 14
     1e6:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     1ea:	82 95       	swap	r24
     1ec:	86 95       	lsr	r24
     1ee:	87 70       	andi	r24, 0x07	; 7
     1f0:	84 30       	cpi	r24, 0x04	; 4
     1f2:	b1 f4       	brne	.+44     	; 0x220 <setBitTiming+0x4e>
		 writeRegister(CNF1, rCNF1);
     1f4:	8a e2       	ldi	r24, 0x2A	; 42
     1f6:	69 81       	ldd	r22, Y+1	; 0x01
     1f8:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
		 writeRegister(CNF2, rCNF2);
     1fc:	89 e2       	ldi	r24, 0x29	; 41
     1fe:	6a 81       	ldd	r22, Y+2	; 0x02
     200:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
		 changeBits(CNF3, 0x07, rCNF3);
     204:	88 e2       	ldi	r24, 0x28	; 40
     206:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     20a:	98 2f       	mov	r25, r24
     20c:	98 7f       	andi	r25, 0xF8	; 248
     20e:	8b 81       	ldd	r24, Y+3	; 0x03
     210:	89 2b       	or	r24, r25
     212:	98 2f       	mov	r25, r24
     214:	88 e2       	ldi	r24, 0x28	; 40
     216:	69 2f       	mov	r22, r25
     218:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
		 return 1;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	01 c0       	rjmp	.+2      	; 0x222 <setBitTiming+0x50>
	 }
	 return 0;
     220:	80 e0       	ldi	r24, 0x00	; 0
}
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <setAcceptanceCriteria>:
 * \param address starting address of 4 registers to setup. It can be mask
 * or filter, doesn't matter
 * \param criterion message identifier criterion to be set
 * \param is_ext 1 if message is extended, otherwise 0 */
void setAcceptanceCriteria (unsigned char address,unsigned long criterion,unsigned char is_ext)
{
     22e:	df 93       	push	r29
     230:	cf 93       	push	r28
     232:	00 d0       	rcall	.+0      	; 0x234 <setAcceptanceCriteria+0x6>
     234:	00 d0       	rcall	.+0      	; 0x236 <setAcceptanceCriteria+0x8>
     236:	00 d0       	rcall	.+0      	; 0x238 <setAcceptanceCriteria+0xa>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	89 83       	std	Y+1, r24	; 0x01
     23e:	4a 83       	std	Y+2, r20	; 0x02
     240:	5b 83       	std	Y+3, r21	; 0x03
     242:	6c 83       	std	Y+4, r22	; 0x04
     244:	7d 83       	std	Y+5, r23	; 0x05
     246:	2e 83       	std	Y+6, r18	; 0x06
	 /* Initialize reading of the receive buffer */
	 spiMasterChipSelect(1);
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	 /* Send header and address */
	 spiMasterTRANSMIT(WRITE_INSTRUCTION);
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(address);
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 /* Setup standard or extended identifier */
	 if(is_ext) {
     25a:	8e 81       	ldd	r24, Y+6	; 0x06
     25c:	88 23       	and	r24, r24
     25e:	09 f4       	brne	.+2      	; 0x262 <setAcceptanceCriteria+0x34>
     260:	43 c0       	rjmp	.+134    	; 0x2e8 <setAcceptanceCriteria+0xba>
	 spiMasterTRANSMIT((unsigned char)(criterion>>3));
     262:	8a 81       	ldd	r24, Y+2	; 0x02
     264:	9b 81       	ldd	r25, Y+3	; 0x03
     266:	ac 81       	ldd	r26, Y+4	; 0x04
     268:	bd 81       	ldd	r27, Y+5	; 0x05
     26a:	68 94       	set
     26c:	12 f8       	bld	r1, 2
     26e:	b6 95       	lsr	r27
     270:	a7 95       	ror	r26
     272:	97 95       	ror	r25
     274:	87 95       	ror	r24
     276:	16 94       	lsr	r1
     278:	d1 f7       	brne	.-12     	; 0x26e <setAcceptanceCriteria+0x40>
     27a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion<<5)|(1<<EXIDE)|((unsigned char)(criterion>>27)));
     27e:	8a 81       	ldd	r24, Y+2	; 0x02
     280:	28 2f       	mov	r18, r24
     282:	22 95       	swap	r18
     284:	22 0f       	add	r18, r18
     286:	20 7e       	andi	r18, 0xE0	; 224
     288:	8a 81       	ldd	r24, Y+2	; 0x02
     28a:	9b 81       	ldd	r25, Y+3	; 0x03
     28c:	ac 81       	ldd	r26, Y+4	; 0x04
     28e:	bd 81       	ldd	r27, Y+5	; 0x05
     290:	07 2e       	mov	r0, r23
     292:	7b e1       	ldi	r23, 0x1B	; 27
     294:	b6 95       	lsr	r27
     296:	a7 95       	ror	r26
     298:	97 95       	ror	r25
     29a:	87 95       	ror	r24
     29c:	7a 95       	dec	r23
     29e:	d1 f7       	brne	.-12     	; 0x294 <setAcceptanceCriteria+0x66>
     2a0:	70 2d       	mov	r23, r0
     2a2:	82 2b       	or	r24, r18
     2a4:	88 60       	ori	r24, 0x08	; 8
     2a6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion>>19));
     2aa:	8a 81       	ldd	r24, Y+2	; 0x02
     2ac:	9b 81       	ldd	r25, Y+3	; 0x03
     2ae:	ac 81       	ldd	r26, Y+4	; 0x04
     2b0:	bd 81       	ldd	r27, Y+5	; 0x05
     2b2:	07 2e       	mov	r0, r23
     2b4:	73 e1       	ldi	r23, 0x13	; 19
     2b6:	b6 95       	lsr	r27
     2b8:	a7 95       	ror	r26
     2ba:	97 95       	ror	r25
     2bc:	87 95       	ror	r24
     2be:	7a 95       	dec	r23
     2c0:	d1 f7       	brne	.-12     	; 0x2b6 <setAcceptanceCriteria+0x88>
     2c2:	70 2d       	mov	r23, r0
     2c4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion>>11));
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	9b 81       	ldd	r25, Y+3	; 0x03
     2cc:	ac 81       	ldd	r26, Y+4	; 0x04
     2ce:	bd 81       	ldd	r27, Y+5	; 0x05
     2d0:	07 2e       	mov	r0, r23
     2d2:	7b e0       	ldi	r23, 0x0B	; 11
     2d4:	b6 95       	lsr	r27
     2d6:	a7 95       	ror	r26
     2d8:	97 95       	ror	r25
     2da:	87 95       	ror	r24
     2dc:	7a 95       	dec	r23
     2de:	d1 f7       	brne	.-12     	; 0x2d4 <setAcceptanceCriteria+0xa6>
     2e0:	70 2d       	mov	r23, r0
     2e2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
     2e6:	14 c0       	rjmp	.+40     	; 0x310 <setAcceptanceCriteria+0xe2>
	 } else {
	 spiMasterTRANSMIT((unsigned char)(criterion >> 3));
     2e8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ea:	9b 81       	ldd	r25, Y+3	; 0x03
     2ec:	ac 81       	ldd	r26, Y+4	; 0x04
     2ee:	bd 81       	ldd	r27, Y+5	; 0x05
     2f0:	68 94       	set
     2f2:	12 f8       	bld	r1, 2
     2f4:	b6 95       	lsr	r27
     2f6:	a7 95       	ror	r26
     2f8:	97 95       	ror	r25
     2fa:	87 95       	ror	r24
     2fc:	16 94       	lsr	r1
     2fe:	d1 f7       	brne	.-12     	; 0x2f4 <setAcceptanceCriteria+0xc6>
     300:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(criterion << 5));
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	82 95       	swap	r24
     308:	88 0f       	add	r24, r24
     30a:	80 7e       	andi	r24, 0xE0	; 224
     30c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 }
	 /* Release the bus */
	 spiMasterChipSelect(0);
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
}
     316:	26 96       	adiw	r28, 0x06	; 6
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
     322:	cf 91       	pop	r28
     324:	df 91       	pop	r29
     326:	08 95       	ret

00000328 <initMCP2515>:

/* Configuration routine */
void initMCP2515(void)
{
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
	/* Initialize SPI as a master device, on frequency < 10Mhz */
	 spiMasterINIT();
     330:	0e 94 dd 02 	call	0x5ba	; 0x5ba <spiMasterINIT>
	/* Initialize external interrupt service on this device */
	 extInterruptINIT(interruptMCP2515);
     334:	80 eb       	ldi	r24, 0xB0	; 176
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	0e 94 47 03 	call	0x68e	; 0x68e <extInterruptINIT>
	/* Send reset instruction */
	 resetMCP2515();
     33c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <resetMCP2515>
	/* Set configuration mode */
	 setMode(CONFIGURATION_MODE);
     340:	8f e0       	ldi	r24, 0x0F	; 15
     342:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     346:	8f 71       	andi	r24, 0x1F	; 31
     348:	80 68       	ori	r24, 0x80	; 128
     34a:	98 2f       	mov	r25, r24
     34c:	8f e0       	ldi	r24, 0x0F	; 15
     34e:	69 2f       	mov	r22, r25
     350:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
     354:	8e e0       	ldi	r24, 0x0E	; 14
     356:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     35a:	82 95       	swap	r24
     35c:	86 95       	lsr	r24
     35e:	87 70       	andi	r24, 0x07	; 7
     360:	84 30       	cpi	r24, 0x04	; 4
     362:	c1 f7       	brne	.-16     	; 0x354 <initMCP2515+0x2c>
	/* Set bit timing , masks and rollover mode*/
	 setBitTiming(0x04, 0xD2, 0x42);
     364:	84 e0       	ldi	r24, 0x04	; 4
     366:	62 ed       	ldi	r22, 0xD2	; 210
     368:	42 e4       	ldi	r20, 0x42	; 66
     36a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <setBitTiming>
	 setMask(RXM0, 0x00000000, 1);
     36e:	84 e3       	ldi	r24, 0x34	; 52
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	ba 01       	movw	r22, r20
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	0e 94 17 01 	call	0x22e	; 0x22e <setAcceptanceCriteria>
	 setMask(RXM1, 0x00000000, 1);
     37c:	88 e3       	ldi	r24, 0x38	; 56
     37e:	40 e0       	ldi	r20, 0x00	; 0
     380:	50 e0       	ldi	r21, 0x00	; 0
     382:	ba 01       	movw	r22, r20
     384:	21 e0       	ldi	r18, 0x01	; 1
     386:	0e 94 17 01 	call	0x22e	; 0x22e <setAcceptanceCriteria>
	 setRollover(1);
     38a:	80 e6       	ldi	r24, 0x60	; 96
     38c:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     390:	88 7f       	andi	r24, 0xF8	; 248
     392:	84 60       	ori	r24, 0x04	; 4
     394:	98 2f       	mov	r25, r24
     396:	80 e6       	ldi	r24, 0x60	; 96
     398:	69 2f       	mov	r22, r25
     39a:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
	/* Get into normal mode and setup communication */
	 setMode(NORMAL_MODE)
     39e:	8f e0       	ldi	r24, 0x0F	; 15
     3a0:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     3a4:	98 2f       	mov	r25, r24
     3a6:	9f 71       	andi	r25, 0x1F	; 31
     3a8:	8f e0       	ldi	r24, 0x0F	; 15
     3aa:	69 2f       	mov	r22, r25
     3ac:	0e 94 be 00 	call	0x17c	; 0x17c <writeRegister>
     3b0:	8e e0       	ldi	r24, 0x0E	; 14
     3b2:	0e 94 a2 00 	call	0x144	; 0x144 <readRegister>
     3b6:	82 95       	swap	r24
     3b8:	86 95       	lsr	r24
     3ba:	87 70       	andi	r24, 0x07	; 7
     3bc:	88 23       	and	r24, r24
     3be:	c1 f7       	brne	.-16     	; 0x3b0 <initMCP2515+0x88>
}
     3c0:	cf 91       	pop	r28
     3c2:	df 91       	pop	r29
     3c4:	08 95       	ret

000003c6 <sendCANmsg>:
 * - bits 7:6 - message priority (higher the better)
 * - bit 5 - if set, message is remote request (RTR)
 * - bit 4 - if set, message is considered to have ext. id.
 * - bits 3:0 - message length (0 to 8 bytes) */
void sendCANmsg(unsigned char bi,unsigned long id,unsigned char * data,unsigned char prop)
{
     3c6:	0f 93       	push	r16
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	29 97       	sbiw	r28, 0x09	; 9
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	8a 83       	std	Y+2, r24	; 0x02
     3de:	4b 83       	std	Y+3, r20	; 0x03
     3e0:	5c 83       	std	Y+4, r21	; 0x04
     3e2:	6d 83       	std	Y+5, r22	; 0x05
     3e4:	7e 83       	std	Y+6, r23	; 0x06
     3e6:	38 87       	std	Y+8, r19	; 0x08
     3e8:	2f 83       	std	Y+7, r18	; 0x07
     3ea:	09 87       	std	Y+9, r16	; 0x09
	/* Initialize reading of the receive buffer */
	 spiMasterChipSelect(1);
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	/* Send header and address */
	 spiMasterTRANSMIT(WRITE_INSTRUCTION);
     3f2:	82 e0       	ldi	r24, 0x02	; 2
     3f4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(TXBnCTRL(bi));
     3f8:	8a 81       	ldd	r24, Y+2	; 0x02
     3fa:	88 2f       	mov	r24, r24
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	03 96       	adiw	r24, 0x03	; 3
     400:	82 95       	swap	r24
     402:	80 7f       	andi	r24, 0xF0	; 240
     404:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 /* Setup message priority */
	 spiMasterTRANSMIT(prop >> 6);
     408:	89 85       	ldd	r24, Y+9	; 0x09
     40a:	82 95       	swap	r24
     40c:	86 95       	lsr	r24
     40e:	86 95       	lsr	r24
     410:	83 70       	andi	r24, 0x03	; 3
     412:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	/* Setup standard or extended identifier */
	 if(prop & 0x10) {
     416:	89 85       	ldd	r24, Y+9	; 0x09
     418:	88 2f       	mov	r24, r24
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	80 71       	andi	r24, 0x10	; 16
     41e:	90 70       	andi	r25, 0x00	; 0
     420:	00 97       	sbiw	r24, 0x00	; 0
     422:	09 f4       	brne	.+2      	; 0x426 <sendCANmsg+0x60>
     424:	43 c0       	rjmp	.+134    	; 0x4ac <sendCANmsg+0xe6>
	 spiMasterTRANSMIT((unsigned char)(id>>3));
     426:	8b 81       	ldd	r24, Y+3	; 0x03
     428:	9c 81       	ldd	r25, Y+4	; 0x04
     42a:	ad 81       	ldd	r26, Y+5	; 0x05
     42c:	be 81       	ldd	r27, Y+6	; 0x06
     42e:	68 94       	set
     430:	12 f8       	bld	r1, 2
     432:	b6 95       	lsr	r27
     434:	a7 95       	ror	r26
     436:	97 95       	ror	r25
     438:	87 95       	ror	r24
     43a:	16 94       	lsr	r1
     43c:	d1 f7       	brne	.-12     	; 0x432 <sendCANmsg+0x6c>
     43e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id<<5)|(1<<EXIDE)|((unsigned char)(id>>27)));
     442:	8b 81       	ldd	r24, Y+3	; 0x03
     444:	28 2f       	mov	r18, r24
     446:	22 95       	swap	r18
     448:	22 0f       	add	r18, r18
     44a:	20 7e       	andi	r18, 0xE0	; 224
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	9c 81       	ldd	r25, Y+4	; 0x04
     450:	ad 81       	ldd	r26, Y+5	; 0x05
     452:	be 81       	ldd	r27, Y+6	; 0x06
     454:	07 2e       	mov	r0, r23
     456:	7b e1       	ldi	r23, 0x1B	; 27
     458:	b6 95       	lsr	r27
     45a:	a7 95       	ror	r26
     45c:	97 95       	ror	r25
     45e:	87 95       	ror	r24
     460:	7a 95       	dec	r23
     462:	d1 f7       	brne	.-12     	; 0x458 <sendCANmsg+0x92>
     464:	70 2d       	mov	r23, r0
     466:	82 2b       	or	r24, r18
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id>>19));
     46e:	8b 81       	ldd	r24, Y+3	; 0x03
     470:	9c 81       	ldd	r25, Y+4	; 0x04
     472:	ad 81       	ldd	r26, Y+5	; 0x05
     474:	be 81       	ldd	r27, Y+6	; 0x06
     476:	07 2e       	mov	r0, r23
     478:	73 e1       	ldi	r23, 0x13	; 19
     47a:	b6 95       	lsr	r27
     47c:	a7 95       	ror	r26
     47e:	97 95       	ror	r25
     480:	87 95       	ror	r24
     482:	7a 95       	dec	r23
     484:	d1 f7       	brne	.-12     	; 0x47a <sendCANmsg+0xb4>
     486:	70 2d       	mov	r23, r0
     488:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id>>11));
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	9c 81       	ldd	r25, Y+4	; 0x04
     490:	ad 81       	ldd	r26, Y+5	; 0x05
     492:	be 81       	ldd	r27, Y+6	; 0x06
     494:	07 2e       	mov	r0, r23
     496:	7b e0       	ldi	r23, 0x0B	; 11
     498:	b6 95       	lsr	r27
     49a:	a7 95       	ror	r26
     49c:	97 95       	ror	r25
     49e:	87 95       	ror	r24
     4a0:	7a 95       	dec	r23
     4a2:	d1 f7       	brne	.-12     	; 0x498 <sendCANmsg+0xd2>
     4a4:	70 2d       	mov	r23, r0
     4a6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
     4aa:	14 c0       	rjmp	.+40     	; 0x4d4 <sendCANmsg+0x10e>
	 } else {
	 spiMasterTRANSMIT((unsigned char)(id>>3));
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	9c 81       	ldd	r25, Y+4	; 0x04
     4b0:	ad 81       	ldd	r26, Y+5	; 0x05
     4b2:	be 81       	ldd	r27, Y+6	; 0x06
     4b4:	68 94       	set
     4b6:	12 f8       	bld	r1, 2
     4b8:	b6 95       	lsr	r27
     4ba:	a7 95       	ror	r26
     4bc:	97 95       	ror	r25
     4be:	87 95       	ror	r24
     4c0:	16 94       	lsr	r1
     4c2:	d1 f7       	brne	.-12     	; 0x4b8 <sendCANmsg+0xf2>
     4c4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id<<5));
     4c8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ca:	82 95       	swap	r24
     4cc:	88 0f       	add	r24, r24
     4ce:	80 7e       	andi	r24, 0xE0	; 224
     4d0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 }
	 /* Setup message length and RTR bit */
	 spiMasterTRANSMIT((prop & 0x0F) | ((prop & 0x20) ? (1 << RTR) : 0));
     4d4:	89 85       	ldd	r24, Y+9	; 0x09
     4d6:	28 2f       	mov	r18, r24
     4d8:	2f 70       	andi	r18, 0x0F	; 15
     4da:	89 85       	ldd	r24, Y+9	; 0x09
     4dc:	88 2f       	mov	r24, r24
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	80 72       	andi	r24, 0x20	; 32
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	00 97       	sbiw	r24, 0x00	; 0
     4e6:	11 f0       	breq	.+4      	; 0x4ec <sendCANmsg+0x126>
     4e8:	80 e4       	ldi	r24, 0x40	; 64
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <sendCANmsg+0x128>
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	82 2b       	or	r24, r18
     4f0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	/* Store the message into the buffer */
	 for(unsigned char i = 0; i < (prop & 0x0F); i++)
     4f4:	19 82       	std	Y+1, r1	; 0x01
     4f6:	0e c0       	rjmp	.+28     	; 0x514 <sendCANmsg+0x14e>
	 spiMasterTRANSMIT(data[i]);
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	88 2f       	mov	r24, r24
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	2f 81       	ldd	r18, Y+7	; 0x07
     500:	38 85       	ldd	r19, Y+8	; 0x08
     502:	82 0f       	add	r24, r18
     504:	93 1f       	adc	r25, r19
     506:	fc 01       	movw	r30, r24
     508:	80 81       	ld	r24, Z
     50a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT((unsigned char)(id<<5));
	 }
	 /* Setup message length and RTR bit */
	 spiMasterTRANSMIT((prop & 0x0F) | ((prop & 0x20) ? (1 << RTR) : 0));
	/* Store the message into the buffer */
	 for(unsigned char i = 0; i < (prop & 0x0F); i++)
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	8f 5f       	subi	r24, 0xFF	; 255
     512:	89 83       	std	Y+1, r24	; 0x01
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	28 2f       	mov	r18, r24
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	89 85       	ldd	r24, Y+9	; 0x09
     51c:	88 2f       	mov	r24, r24
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	8f 70       	andi	r24, 0x0F	; 15
     522:	90 70       	andi	r25, 0x00	; 0
     524:	28 17       	cp	r18, r24
     526:	39 07       	cpc	r19, r25
     528:	3c f3       	brlt	.-50     	; 0x4f8 <sendCANmsg+0x132>
	 spiMasterTRANSMIT(data[i]);
	 /* Send request to send */
	 sendRTS(bi);
     52a:	82 e0       	ldi	r24, 0x02	; 2
     52c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
     530:	80 e8       	ldi	r24, 0x80	; 128
     532:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
     536:	8a 81       	ldd	r24, Y+2	; 0x02
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	03 96       	adiw	r24, 0x03	; 3
     53e:	82 95       	swap	r24
     540:	80 7f       	andi	r24, 0xF0	; 240
     542:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	/* Release the bus */
	 spiMasterChipSelect(0);
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	0e 94 15 03 	call	0x62a	; 0x62a <spiMasterChipSelect>
	
}
     54c:	29 96       	adiw	r28, 0x09	; 9
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	0f 91       	pop	r16
     55e:	08 95       	ret

00000560 <interruptMCP2515>:

void interruptMCP2515(void)
{
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	df 93       	push	r29
     566:	cf 93       	push	r28
     568:	0f 92       	push	r0
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
	 
	 /* Copy the message from the device and release buffer */
	 spiMasterTRANSMIT(READ_INSTRUCTION);
     56e:	83 e0       	ldi	r24, 0x03	; 3
     570:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 spiMasterTRANSMIT(RXBnCTRL(0));
     574:	80 e6       	ldi	r24, 0x60	; 96
     576:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
	 /* Make the local copy */
	 for(unsigned char i=0; i < 14; i++)
     57a:	19 82       	std	Y+1, r1	; 0x01
     57c:	0f c0       	rjmp	.+30     	; 0x59c <interruptMCP2515+0x3c>
	 rbuffer[i] = spiMasterTRANSMIT(0);
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	08 2f       	mov	r16, r24
     582:	10 e0       	ldi	r17, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <spiMasterTRANSMIT>
     58a:	28 2f       	mov	r18, r24
     58c:	c8 01       	movw	r24, r16
     58e:	84 5f       	subi	r24, 0xF4	; 244
     590:	9d 4f       	sbci	r25, 0xFD	; 253
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
	 
	 /* Copy the message from the device and release buffer */
	 spiMasterTRANSMIT(READ_INSTRUCTION);
	 spiMasterTRANSMIT(RXBnCTRL(0));
	 /* Make the local copy */
	 for(unsigned char i=0; i < 14; i++)
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	89 83       	std	Y+1, r24	; 0x01
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	8e 30       	cpi	r24, 0x0E	; 14
     5a0:	70 f3       	brcs	.-36     	; 0x57e <interruptMCP2515+0x1e>
	 rbuffer[i] = spiMasterTRANSMIT(0);
	 msgReceived  = rbuffer;
     5a2:	8c e0       	ldi	r24, 0x0C	; 12
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	90 93 09 02 	sts	0x0209, r25
     5aa:	80 93 08 02 	sts	0x0208, r24
     5ae:	0f 90       	pop	r0
     5b0:	cf 91       	pop	r28
     5b2:	df 91       	pop	r29
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	08 95       	ret

000005ba <spiMasterINIT>:
 *
 * \warning This is platform-dependent method!
 *
 */
void spiMasterINIT()
{
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	 DDR_SPI = (1<<PIN_MOSI)|(1<<PIN_SCK)|(1<<PIN_SS);
     5c2:	84 e2       	ldi	r24, 0x24	; 36
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	2c e2       	ldi	r18, 0x2C	; 44
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18
	 PORT_SPI |= (1 << PIN_SS);
     5cc:	85 e2       	ldi	r24, 0x25	; 37
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	25 e2       	ldi	r18, 0x25	; 37
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	24 60       	ori	r18, 0x04	; 4
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
	/* Enable SPI, Master, set clock rate fck/4, mode 0,0 */
	 SPCR = (1<<SPE) | (1<<MSTR);
     5de:	8c e4       	ldi	r24, 0x4C	; 76
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	20 e5       	ldi	r18, 0x50	; 80
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18
	// SPSR = (1<<SPI2X);
	SPSR = 0X00;
     5e8:	8d e4       	ldi	r24, 0x4D	; 77
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	fc 01       	movw	r30, r24
     5ee:	10 82       	st	Z, r1
}
     5f0:	cf 91       	pop	r28
     5f2:	df 91       	pop	r29
     5f4:	08 95       	ret

000005f6 <spiMasterTRANSMIT>:
 * \param data[] Source data array
 * \param length Array length
 *
 */
unsigned char spiMasterTRANSMIT(unsigned char data)
{
     5f6:	df 93       	push	r29
     5f8:	cf 93       	push	r28
     5fa:	0f 92       	push	r0
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
     600:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	 SPDR = data;
     602:	8e e4       	ldi	r24, 0x4E	; 78
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	29 81       	ldd	r18, Y+1	; 0x01
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
	/* Wait for transmission complete */
	 while(!(SPSR & (1<<SPIF)));
     60c:	00 00       	nop
     60e:	8d e4       	ldi	r24, 0x4D	; 77
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	fc 01       	movw	r30, r24
     614:	80 81       	ld	r24, Z
     616:	88 23       	and	r24, r24
     618:	d4 f7       	brge	.-12     	; 0x60e <spiMasterTRANSMIT+0x18>
	/* SPDR must be stored as quickly
	 as possible (ref. ATMegaX ds) */
	 return SPDR;
     61a:	8e e4       	ldi	r24, 0x4E	; 78
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	fc 01       	movw	r30, r24
     620:	80 81       	ld	r24, Z
}
     622:	0f 90       	pop	r0
     624:	cf 91       	pop	r28
     626:	df 91       	pop	r29
     628:	08 95       	ret

0000062a <spiMasterChipSelect>:
 *
 * \warning This is platform-dependent method!
 * \param state Wished state
 */
void spiMasterChipSelect(unsigned char state)
{
     62a:	df 93       	push	r29
     62c:	cf 93       	push	r28
     62e:	0f 92       	push	r0
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	89 83       	std	Y+1, r24	; 0x01
	/* What the user wants? (remember that the CS signal is inverted) */
	 if(!state) {
     636:	89 81       	ldd	r24, Y+1	; 0x01
     638:	88 23       	and	r24, r24
     63a:	99 f4       	brne	.+38     	; 0x662 <spiMasterChipSelect+0x38>
	 /* Upper the CS pin */
	 PORT_SPI |= (1<<PIN_SS);
     63c:	85 e2       	ldi	r24, 0x25	; 37
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	25 e2       	ldi	r18, 0x25	; 37
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	f9 01       	movw	r30, r18
     646:	20 81       	ld	r18, Z
     648:	24 60       	ori	r18, 0x04	; 4
     64a:	fc 01       	movw	r30, r24
     64c:	20 83       	st	Z, r18
	 DDR_SPI |= (1<<PIN_SS);
     64e:	84 e2       	ldi	r24, 0x24	; 36
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	24 e2       	ldi	r18, 0x24	; 36
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	f9 01       	movw	r30, r18
     658:	20 81       	ld	r18, Z
     65a:	24 60       	ori	r18, 0x04	; 4
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
     660:	12 c0       	rjmp	.+36     	; 0x686 <spiMasterChipSelect+0x5c>
	 } else {
	 /* Lower the CS pin */
	 PORT_SPI &= ~(1<<PIN_SS);
     662:	85 e2       	ldi	r24, 0x25	; 37
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	25 e2       	ldi	r18, 0x25	; 37
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	f9 01       	movw	r30, r18
     66c:	20 81       	ld	r18, Z
     66e:	2b 7f       	andi	r18, 0xFB	; 251
     670:	fc 01       	movw	r30, r24
     672:	20 83       	st	Z, r18
	 DDR_SPI |= (1<<PIN_SS);
     674:	84 e2       	ldi	r24, 0x24	; 36
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	24 e2       	ldi	r18, 0x24	; 36
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	f9 01       	movw	r30, r18
     67e:	20 81       	ld	r18, Z
     680:	24 60       	ori	r18, 0x04	; 4
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
	 }
}
     686:	0f 90       	pop	r0
     688:	cf 91       	pop	r28
     68a:	df 91       	pop	r29
     68c:	08 95       	ret

0000068e <extInterruptINIT>:
/** Initialization of hardware ext. interrupts
 * \param *handler pointer to a function which handle occured interrupt.
 * \return nothing
 */
void extInterruptINIT(void (*handler)(void))
{
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	00 d0       	rcall	.+0      	; 0x694 <extInterruptINIT+0x6>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	9a 83       	std	Y+2, r25	; 0x02
     69a:	89 83       	std	Y+1, r24	; 0x01
	/* Set function pointer */
	 int_handler = handler;
     69c:	89 81       	ldd	r24, Y+1	; 0x01
     69e:	9a 81       	ldd	r25, Y+2	; 0x02
     6a0:	90 93 1b 02 	sts	0x021B, r25
     6a4:	80 93 1a 02 	sts	0x021A, r24
	/* Initialize external interrupt on pin INT0 on failing edge */
	 EICRA |= (1 << ISC01);
     6a8:	89 e6       	ldi	r24, 0x69	; 105
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	29 e6       	ldi	r18, 0x69	; 105
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	f9 01       	movw	r30, r18
     6b2:	20 81       	ld	r18, Z
     6b4:	22 60       	ori	r18, 0x02	; 2
     6b6:	fc 01       	movw	r30, r24
     6b8:	20 83       	st	Z, r18
	 EIMSK |= (1 << INT0);
     6ba:	8d e3       	ldi	r24, 0x3D	; 61
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	2d e3       	ldi	r18, 0x3D	; 61
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	f9 01       	movw	r30, r18
     6c4:	20 81       	ld	r18, Z
     6c6:	21 60       	ori	r18, 0x01	; 1
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18
}
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	cf 91       	pop	r28
     6d2:	df 91       	pop	r29
     6d4:	08 95       	ret

000006d6 <__vector_1>:
/* System interrupt handler */
ISR(INT0_vect)
{
     6d6:	1f 92       	push	r1
     6d8:	0f 92       	push	r0
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	0f 92       	push	r0
     6de:	11 24       	eor	r1, r1
     6e0:	2f 93       	push	r18
     6e2:	3f 93       	push	r19
     6e4:	4f 93       	push	r20
     6e6:	5f 93       	push	r21
     6e8:	6f 93       	push	r22
     6ea:	7f 93       	push	r23
     6ec:	8f 93       	push	r24
     6ee:	9f 93       	push	r25
     6f0:	af 93       	push	r26
     6f2:	bf 93       	push	r27
     6f4:	ef 93       	push	r30
     6f6:	ff 93       	push	r31
     6f8:	df 93       	push	r29
     6fa:	cf 93       	push	r28
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
	int_handler();
     700:	80 91 1a 02 	lds	r24, 0x021A
     704:	90 91 1b 02 	lds	r25, 0x021B
     708:	fc 01       	movw	r30, r24
     70a:	09 95       	icall
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	ff 91       	pop	r31
     712:	ef 91       	pop	r30
     714:	bf 91       	pop	r27
     716:	af 91       	pop	r26
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	7f 91       	pop	r23
     71e:	6f 91       	pop	r22
     720:	5f 91       	pop	r21
     722:	4f 91       	pop	r20
     724:	3f 91       	pop	r19
     726:	2f 91       	pop	r18
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <main>:
#include "AVR_CAN.h"
#include "ADC.h"
#include "hc-sr04.h"
int flag =0;
int main(void)
{
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	df 93       	push	r29
     738:	cf 93       	push	r28
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	63 97       	sbiw	r28, 0x13	; 19
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
	INIT_ADC();
     74a:	0e 94 53 00 	call	0xa6	; 0xa6 <INIT_ADC>
	init_ultrasonic_sensor();
     74e:	0e 94 40 06 	call	0xc80	; 0xc80 <init_ultrasonic_sensor>
	DDRB=0xff;
     752:	84 e2       	ldi	r24, 0x24	; 36
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	2f ef       	ldi	r18, 0xFF	; 255
     758:	fc 01       	movw	r30, r24
     75a:	20 83       	st	Z, r18
	uint16_t ADC_Value;
	int temperature = 0;
     75c:	1a 82       	std	Y+2, r1	; 0x02
     75e:	19 82       	std	Y+1, r1	; 0x01
	unsigned char buffer[10];
	float dest=0;
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	dc 01       	movw	r26, r24
     766:	8b 83       	std	Y+3, r24	; 0x03
     768:	9c 83       	std	Y+4, r25	; 0x04
     76a:	ad 83       	std	Y+5, r26	; 0x05
     76c:	be 83       	std	Y+6, r27	; 0x06
	unsigned char buffer_size=0;
     76e:	1f 82       	std	Y+7, r1	; 0x07
	//Button SetUp Using Interrupt
	DDRD &= ~ (1<<2); 
     770:	8a e2       	ldi	r24, 0x2A	; 42
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	2a e2       	ldi	r18, 0x2A	; 42
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	f9 01       	movw	r30, r18
     77a:	20 81       	ld	r18, Z
     77c:	2b 7f       	andi	r18, 0xFB	; 251
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
	EIMSK =(1<<INT1);
     782:	8d e3       	ldi	r24, 0x3D	; 61
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	22 e0       	ldi	r18, 0x02	; 2
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
	EICRA = 0x02;
     78c:	89 e6       	ldi	r24, 0x69	; 105
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	22 e0       	ldi	r18, 0x02	; 2
     792:	fc 01       	movw	r30, r24
     794:	20 83       	st	Z, r18
	sei();
     796:	78 94       	sei
     798:	03 c0       	rjmp	.+6      	; 0x7a0 <main+0x6e>
				buffer_size =sizeof(buffer)/sizeof(char);
		
			   sendCANmsg(0,0x05,buffer,buffer_size);
			}
		}		
	}
     79a:	00 00       	nop
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <main+0x6e>
     79e:	00 00       	nop
	EICRA = 0x02;
	sei();

	while(1)
	{
		if(flag)
     7a0:	80 91 0a 02 	lds	r24, 0x020A
     7a4:	90 91 0b 02 	lds	r25, 0x020B
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	b9 f3       	breq	.-18     	; 0x79a <main+0x68>
		{		
			ADC_Value = Analog_Read(0); 
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	0e 94 75 00 	call	0xea	; 0xea <Analog_Read>
     7b2:	99 87       	std	Y+9, r25	; 0x09
     7b4:	88 87       	std	Y+8, r24	; 0x08
			temperature =(ADC_Value*500)/1023; 
     7b6:	48 85       	ldd	r20, Y+8	; 0x08
     7b8:	59 85       	ldd	r21, Y+9	; 0x09
     7ba:	24 ef       	ldi	r18, 0xF4	; 244
     7bc:	31 e0       	ldi	r19, 0x01	; 1
     7be:	42 9f       	mul	r20, r18
     7c0:	c0 01       	movw	r24, r0
     7c2:	43 9f       	mul	r20, r19
     7c4:	90 0d       	add	r25, r0
     7c6:	52 9f       	mul	r21, r18
     7c8:	90 0d       	add	r25, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	33 e0       	ldi	r19, 0x03	; 3
     7d0:	b9 01       	movw	r22, r18
     7d2:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__udivmodhi4>
     7d6:	9b 01       	movw	r18, r22
     7d8:	c9 01       	movw	r24, r18
     7da:	9a 83       	std	Y+2, r25	; 0x02
     7dc:	89 83       	std	Y+1, r24	; 0x01
			dest =read_dist();
     7de:	0e 94 8b 06 	call	0xd16	; 0xd16 <read_dist>
     7e2:	dc 01       	movw	r26, r24
     7e4:	cb 01       	movw	r24, r22
     7e6:	8b 83       	std	Y+3, r24	; 0x03
     7e8:	9c 83       	std	Y+4, r25	; 0x04
     7ea:	ad 83       	std	Y+5, r26	; 0x05
     7ec:	be 83       	std	Y+6, r27	; 0x06
		
			if(temperature>=30)
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	9a 81       	ldd	r25, Y+2	; 0x02
     7f2:	8e 31       	cpi	r24, 0x1E	; 30
     7f4:	91 05       	cpc	r25, r1
     7f6:	bc f0       	brlt	.+46     	; 0x826 <main+0xf4>
			{
				itoa(temperature,(char*)buffer,10);
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	9e 01       	movw	r18, r28
     7fe:	26 5f       	subi	r18, 0xF6	; 246
     800:	3f 4f       	sbci	r19, 0xFF	; 255
     802:	b9 01       	movw	r22, r18
     804:	4a e0       	ldi	r20, 0x0A	; 10
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <itoa>
				buffer_size =sizeof(buffer)/sizeof(char);
     80c:	8a e0       	ldi	r24, 0x0A	; 10
     80e:	8f 83       	std	Y+7, r24	; 0x07
		
			   sendCANmsg(0,0x06,buffer,buffer_size);
     810:	9e 01       	movw	r18, r28
     812:	26 5f       	subi	r18, 0xF6	; 246
     814:	3f 4f       	sbci	r19, 0xFF	; 255
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	46 e0       	ldi	r20, 0x06	; 6
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	0f 81       	ldd	r16, Y+7	; 0x07
     822:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <sendCANmsg>
			}
			if(dest < 20 )
     826:	11 e0       	ldi	r17, 0x01	; 1
     828:	6b 81       	ldd	r22, Y+3	; 0x03
     82a:	7c 81       	ldd	r23, Y+4	; 0x04
     82c:	8d 81       	ldd	r24, Y+5	; 0x05
     82e:	9e 81       	ldd	r25, Y+6	; 0x06
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 ea       	ldi	r20, 0xA0	; 160
     836:	51 e4       	ldi	r21, 0x41	; 65
     838:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__ltsf2>
     83c:	88 23       	and	r24, r24
     83e:	0c f0       	brlt	.+2      	; 0x842 <main+0x110>
     840:	10 e0       	ldi	r17, 0x00	; 0
     842:	11 23       	and	r17, r17
     844:	09 f4       	brne	.+2      	; 0x848 <main+0x116>
     846:	ab cf       	rjmp	.-170    	; 0x79e <main+0x6c>
			{
				itoa(dest,(char*)buffer,10);
     848:	6b 81       	ldd	r22, Y+3	; 0x03
     84a:	7c 81       	ldd	r23, Y+4	; 0x04
     84c:	8d 81       	ldd	r24, Y+5	; 0x05
     84e:	9e 81       	ldd	r25, Y+6	; 0x06
     850:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fixsfsi>
     854:	dc 01       	movw	r26, r24
     856:	cb 01       	movw	r24, r22
     858:	9e 01       	movw	r18, r28
     85a:	26 5f       	subi	r18, 0xF6	; 246
     85c:	3f 4f       	sbci	r19, 0xFF	; 255
     85e:	b9 01       	movw	r22, r18
     860:	4a e0       	ldi	r20, 0x0A	; 10
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <itoa>
				buffer_size =sizeof(buffer)/sizeof(char);
     868:	8a e0       	ldi	r24, 0x0A	; 10
     86a:	8f 83       	std	Y+7, r24	; 0x07
		
			   sendCANmsg(0,0x05,buffer,buffer_size);
     86c:	9e 01       	movw	r18, r28
     86e:	26 5f       	subi	r18, 0xF6	; 246
     870:	3f 4f       	sbci	r19, 0xFF	; 255
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	45 e0       	ldi	r20, 0x05	; 5
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	0f 81       	ldd	r16, Y+7	; 0x07
     87e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <sendCANmsg>
			}
		}		
	}
     882:	8e cf       	rjmp	.-228    	; 0x7a0 <main+0x6e>

00000884 <__vector_2>:
}

ISR(INT1_vect)
{
     884:	1f 92       	push	r1
     886:	0f 92       	push	r0
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	0f 92       	push	r0
     88c:	11 24       	eor	r1, r1
     88e:	0f 93       	push	r16
     890:	2f 93       	push	r18
     892:	3f 93       	push	r19
     894:	4f 93       	push	r20
     896:	5f 93       	push	r21
     898:	6f 93       	push	r22
     89a:	7f 93       	push	r23
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
     8a0:	af 93       	push	r26
     8a2:	bf 93       	push	r27
     8a4:	ef 93       	push	r30
     8a6:	ff 93       	push	r31
     8a8:	df 93       	push	r29
     8aa:	cf 93       	push	r28
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
	flag!=flag; 
	sendCANmsg(0,0x07,flag,1);
     8b0:	80 91 0a 02 	lds	r24, 0x020A
     8b4:	90 91 0b 02 	lds	r25, 0x020B
     8b8:	9c 01       	movw	r18, r24
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	47 e0       	ldi	r20, 0x07	; 7
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	01 e0       	ldi	r16, 0x01	; 1
     8c6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <sendCANmsg>
}	
     8ca:	cf 91       	pop	r28
     8cc:	df 91       	pop	r29
     8ce:	ff 91       	pop	r31
     8d0:	ef 91       	pop	r30
     8d2:	bf 91       	pop	r27
     8d4:	af 91       	pop	r26
     8d6:	9f 91       	pop	r25
     8d8:	8f 91       	pop	r24
     8da:	7f 91       	pop	r23
     8dc:	6f 91       	pop	r22
     8de:	5f 91       	pop	r21
     8e0:	4f 91       	pop	r20
     8e2:	3f 91       	pop	r19
     8e4:	2f 91       	pop	r18
     8e6:	0f 91       	pop	r16
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	0f 90       	pop	r0
     8ee:	1f 90       	pop	r1
     8f0:	18 95       	reti

000008f2 <__vector_11>:
int counts;
float dist;
uint16_t us_per_count;


ISR(TIMER1_COMPA_vect){
     8f2:	1f 92       	push	r1
     8f4:	0f 92       	push	r0
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	0f 92       	push	r0
     8fa:	11 24       	eor	r1, r1
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	2f 93       	push	r18
     902:	3f 93       	push	r19
     904:	4f 93       	push	r20
     906:	5f 93       	push	r21
     908:	6f 93       	push	r22
     90a:	7f 93       	push	r23
     90c:	8f 93       	push	r24
     90e:	9f 93       	push	r25
     910:	af 93       	push	r26
     912:	bf 93       	push	r27
     914:	ef 93       	push	r30
     916:	ff 93       	push	r31
     918:	df 93       	push	r29
     91a:	cf 93       	push	r28
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	68 97       	sbiw	r28, 0x18	; 24
     922:	de bf       	out	0x3e, r29	; 62
     924:	cd bf       	out	0x3d, r28	; 61

    //Generate a 12us pulse to trigger the HR-SR04
    PORTB ^= ( 1 << PORTB1);
     926:	85 e2       	ldi	r24, 0x25	; 37
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	25 e2       	ldi	r18, 0x25	; 37
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	f9 01       	movw	r30, r18
     930:	30 81       	ld	r19, Z
     932:	22 e0       	ldi	r18, 0x02	; 2
     934:	23 27       	eor	r18, r19
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	a0 e4       	ldi	r26, 0x40	; 64
     940:	b1 e4       	ldi	r27, 0x41	; 65
     942:	89 83       	std	Y+1, r24	; 0x01
     944:	9a 83       	std	Y+2, r25	; 0x02
     946:	ab 83       	std	Y+3, r26	; 0x03
     948:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     94a:	69 81       	ldd	r22, Y+1	; 0x01
     94c:	7a 81       	ldd	r23, Y+2	; 0x02
     94e:	8b 81       	ldd	r24, Y+3	; 0x03
     950:	9c 81       	ldd	r25, Y+4	; 0x04
     952:	2b ea       	ldi	r18, 0xAB	; 171
     954:	3a ea       	ldi	r19, 0xAA	; 170
     956:	4a ea       	ldi	r20, 0xAA	; 170
     958:	5e e3       	ldi	r21, 0x3E	; 62
     95a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__mulsf3>
     95e:	dc 01       	movw	r26, r24
     960:	cb 01       	movw	r24, r22
     962:	8d 83       	std	Y+5, r24	; 0x05
     964:	9e 83       	std	Y+6, r25	; 0x06
     966:	af 83       	std	Y+7, r26	; 0x07
     968:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     96a:	11 e0       	ldi	r17, 0x01	; 1
     96c:	6d 81       	ldd	r22, Y+5	; 0x05
     96e:	7e 81       	ldd	r23, Y+6	; 0x06
     970:	8f 81       	ldd	r24, Y+7	; 0x07
     972:	98 85       	ldd	r25, Y+8	; 0x08
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	40 e8       	ldi	r20, 0x80	; 128
     97a:	5f e3       	ldi	r21, 0x3F	; 63
     97c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__ltsf2>
     980:	88 23       	and	r24, r24
     982:	0c f0       	brlt	.+2      	; 0x986 <__stack+0x87>
     984:	10 e0       	ldi	r17, 0x00	; 0
     986:	11 23       	and	r17, r17
     988:	19 f0       	breq	.+6      	; 0x990 <__stack+0x91>
		__ticks = 1;
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	89 87       	std	Y+9, r24	; 0x09
     98e:	a3 c0       	rjmp	.+326    	; 0xad6 <__stack+0x1d7>
	else if (__tmp > 255)
     990:	11 e0       	ldi	r17, 0x01	; 1
     992:	6d 81       	ldd	r22, Y+5	; 0x05
     994:	7e 81       	ldd	r23, Y+6	; 0x06
     996:	8f 81       	ldd	r24, Y+7	; 0x07
     998:	98 85       	ldd	r25, Y+8	; 0x08
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	4f e7       	ldi	r20, 0x7F	; 127
     9a0:	53 e4       	ldi	r21, 0x43	; 67
     9a2:	0e 94 18 0a 	call	0x1430	; 0x1430 <__gtsf2>
     9a6:	18 16       	cp	r1, r24
     9a8:	0c f0       	brlt	.+2      	; 0x9ac <__stack+0xad>
     9aa:	10 e0       	ldi	r17, 0x00	; 0
     9ac:	11 23       	and	r17, r17
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	89 c0       	rjmp	.+274    	; 0xac4 <__stack+0x1c5>
	{
		_delay_ms(__us / 1000.0);
     9b2:	69 81       	ldd	r22, Y+1	; 0x01
     9b4:	7a 81       	ldd	r23, Y+2	; 0x02
     9b6:	8b 81       	ldd	r24, Y+3	; 0x03
     9b8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	4a e7       	ldi	r20, 0x7A	; 122
     9c0:	54 e4       	ldi	r21, 0x44	; 68
     9c2:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__divsf3>
     9c6:	dc 01       	movw	r26, r24
     9c8:	cb 01       	movw	r24, r22
     9ca:	8a 87       	std	Y+10, r24	; 0x0a
     9cc:	9b 87       	std	Y+11, r25	; 0x0b
     9ce:	ac 87       	std	Y+12, r26	; 0x0c
     9d0:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     9d2:	6a 85       	ldd	r22, Y+10	; 0x0a
     9d4:	7b 85       	ldd	r23, Y+11	; 0x0b
     9d6:	8c 85       	ldd	r24, Y+12	; 0x0c
     9d8:	9d 85       	ldd	r25, Y+13	; 0x0d
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	4a e7       	ldi	r20, 0x7A	; 122
     9e0:	53 e4       	ldi	r21, 0x43	; 67
     9e2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__mulsf3>
     9e6:	dc 01       	movw	r26, r24
     9e8:	cb 01       	movw	r24, r22
     9ea:	8e 87       	std	Y+14, r24	; 0x0e
     9ec:	9f 87       	std	Y+15, r25	; 0x0f
     9ee:	a8 8b       	std	Y+16, r26	; 0x10
     9f0:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     9f2:	11 e0       	ldi	r17, 0x01	; 1
     9f4:	6e 85       	ldd	r22, Y+14	; 0x0e
     9f6:	7f 85       	ldd	r23, Y+15	; 0x0f
     9f8:	88 89       	ldd	r24, Y+16	; 0x10
     9fa:	99 89       	ldd	r25, Y+17	; 0x11
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e8       	ldi	r20, 0x80	; 128
     a02:	5f e3       	ldi	r21, 0x3F	; 63
     a04:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__ltsf2>
     a08:	88 23       	and	r24, r24
     a0a:	0c f0       	brlt	.+2      	; 0xa0e <__stack+0x10f>
     a0c:	10 e0       	ldi	r17, 0x00	; 0
     a0e:	11 23       	and	r17, r17
     a10:	29 f0       	breq	.+10     	; 0xa1c <__stack+0x11d>
		__ticks = 1;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	9b 8b       	std	Y+19, r25	; 0x13
     a18:	8a 8b       	std	Y+18, r24	; 0x12
     a1a:	46 c0       	rjmp	.+140    	; 0xaa8 <__stack+0x1a9>
	else if (__tmp > 65535)
     a1c:	11 e0       	ldi	r17, 0x01	; 1
     a1e:	6e 85       	ldd	r22, Y+14	; 0x0e
     a20:	7f 85       	ldd	r23, Y+15	; 0x0f
     a22:	88 89       	ldd	r24, Y+16	; 0x10
     a24:	99 89       	ldd	r25, Y+17	; 0x11
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	3f ef       	ldi	r19, 0xFF	; 255
     a2a:	4f e7       	ldi	r20, 0x7F	; 127
     a2c:	57 e4       	ldi	r21, 0x47	; 71
     a2e:	0e 94 18 0a 	call	0x1430	; 0x1430 <__gtsf2>
     a32:	18 16       	cp	r1, r24
     a34:	0c f0       	brlt	.+2      	; 0xa38 <__stack+0x139>
     a36:	10 e0       	ldi	r17, 0x00	; 0
     a38:	11 23       	and	r17, r17
     a3a:	61 f1       	breq	.+88     	; 0xa94 <__stack+0x195>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a3c:	6a 85       	ldd	r22, Y+10	; 0x0a
     a3e:	7b 85       	ldd	r23, Y+11	; 0x0b
     a40:	8c 85       	ldd	r24, Y+12	; 0x0c
     a42:	9d 85       	ldd	r25, Y+13	; 0x0d
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e2       	ldi	r20, 0x20	; 32
     a4a:	51 e4       	ldi	r21, 0x41	; 65
     a4c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__mulsf3>
     a50:	dc 01       	movw	r26, r24
     a52:	cb 01       	movw	r24, r22
     a54:	bc 01       	movw	r22, r24
     a56:	cd 01       	movw	r24, r26
     a58:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fixunssfsi>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	9b 8b       	std	Y+19, r25	; 0x13
     a62:	8a 8b       	std	Y+18, r24	; 0x12
     a64:	12 c0       	rjmp	.+36     	; 0xa8a <__stack+0x18b>
     a66:	89 e1       	ldi	r24, 0x19	; 25
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9d 8b       	std	Y+21, r25	; 0x15
     a6c:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a6e:	8c 89       	ldd	r24, Y+20	; 0x14
     a70:	9d 89       	ldd	r25, Y+21	; 0x15
     a72:	8c 01       	movw	r16, r24
     a74:	c8 01       	movw	r24, r16
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <__stack+0x177>
     a7a:	8c 01       	movw	r16, r24
     a7c:	1d 8b       	std	Y+21, r17	; 0x15
     a7e:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a80:	8a 89       	ldd	r24, Y+18	; 0x12
     a82:	9b 89       	ldd	r25, Y+19	; 0x13
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	9b 8b       	std	Y+19, r25	; 0x13
     a88:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a8a:	8a 89       	ldd	r24, Y+18	; 0x12
     a8c:	9b 89       	ldd	r25, Y+19	; 0x13
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	51 f7       	brne	.-44     	; 0xa66 <__stack+0x167>
     a92:	28 c0       	rjmp	.+80     	; 0xae4 <__stack+0x1e5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a94:	6e 85       	ldd	r22, Y+14	; 0x0e
     a96:	7f 85       	ldd	r23, Y+15	; 0x0f
     a98:	88 89       	ldd	r24, Y+16	; 0x10
     a9a:	99 89       	ldd	r25, Y+17	; 0x11
     a9c:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fixunssfsi>
     aa0:	dc 01       	movw	r26, r24
     aa2:	cb 01       	movw	r24, r22
     aa4:	9b 8b       	std	Y+19, r25	; 0x13
     aa6:	8a 8b       	std	Y+18, r24	; 0x12
     aa8:	8a 89       	ldd	r24, Y+18	; 0x12
     aaa:	9b 89       	ldd	r25, Y+19	; 0x13
     aac:	9f 8b       	std	Y+23, r25	; 0x17
     aae:	8e 8b       	std	Y+22, r24	; 0x16
     ab0:	8e 89       	ldd	r24, Y+22	; 0x16
     ab2:	9f 89       	ldd	r25, Y+23	; 0x17
     ab4:	8c 01       	movw	r16, r24
     ab6:	f8 01       	movw	r30, r16
     ab8:	31 97       	sbiw	r30, 0x01	; 1
     aba:	f1 f7       	brne	.-4      	; 0xab8 <__stack+0x1b9>
     abc:	8f 01       	movw	r16, r30
     abe:	1f 8b       	std	Y+23, r17	; 0x17
     ac0:	0e 8b       	std	Y+22, r16	; 0x16
     ac2:	10 c0       	rjmp	.+32     	; 0xae4 <__stack+0x1e5>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ac4:	6d 81       	ldd	r22, Y+5	; 0x05
     ac6:	7e 81       	ldd	r23, Y+6	; 0x06
     ac8:	8f 81       	ldd	r24, Y+7	; 0x07
     aca:	98 85       	ldd	r25, Y+8	; 0x08
     acc:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fixunssfsi>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	89 87       	std	Y+9, r24	; 0x09
     ad6:	89 85       	ldd	r24, Y+9	; 0x09
     ad8:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ada:	88 8d       	ldd	r24, Y+24	; 0x18
     adc:	18 2f       	mov	r17, r24
     ade:	1a 95       	dec	r17
     ae0:	f1 f7       	brne	.-4      	; 0xade <__stack+0x1df>
     ae2:	18 8f       	std	Y+24, r17	; 0x18
    _delay_us(12);
    PORTB ^= ( 1 << PORTB1);
     ae4:	85 e2       	ldi	r24, 0x25	; 37
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	25 e2       	ldi	r18, 0x25	; 37
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	f9 01       	movw	r30, r18
     aee:	30 81       	ld	r19, Z
     af0:	22 e0       	ldi	r18, 0x02	; 2
     af2:	23 27       	eor	r18, r19
     af4:	fc 01       	movw	r30, r24
     af6:	20 83       	st	Z, r18
}
     af8:	68 96       	adiw	r28, 0x18	; 24
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	cf 91       	pop	r28
     b00:	df 91       	pop	r29
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	bf 91       	pop	r27
     b08:	af 91       	pop	r26
     b0a:	9f 91       	pop	r25
     b0c:	8f 91       	pop	r24
     b0e:	7f 91       	pop	r23
     b10:	6f 91       	pop	r22
     b12:	5f 91       	pop	r21
     b14:	4f 91       	pop	r20
     b16:	3f 91       	pop	r19
     b18:	2f 91       	pop	r18
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti

00000b28 <__vector_10>:

ISR(TIMER1_CAPT_vect){
     b28:	1f 92       	push	r1
     b2a:	0f 92       	push	r0
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	0f 92       	push	r0
     b30:	11 24       	eor	r1, r1
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	2f 93       	push	r18
     b3c:	3f 93       	push	r19
     b3e:	4f 93       	push	r20
     b40:	5f 93       	push	r21
     b42:	6f 93       	push	r22
     b44:	7f 93       	push	r23
     b46:	8f 93       	push	r24
     b48:	9f 93       	push	r25
     b4a:	af 93       	push	r26
     b4c:	bf 93       	push	r27
     b4e:	ef 93       	push	r30
     b50:	ff 93       	push	r31
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62

    if(TCCR1B & (1 << ICES1)){
     b5a:	81 e8       	ldi	r24, 0x81	; 129
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	fc 01       	movw	r30, r24
     b60:	80 81       	ld	r24, Z
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	80 74       	andi	r24, 0x40	; 64
     b68:	90 70       	andi	r25, 0x00	; 0
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	99 f0       	breq	.+38     	; 0xb94 <__vector_10+0x6c>

        TCCR1B &= ~( 1 << ICES1);
     b6e:	81 e8       	ldi	r24, 0x81	; 129
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	21 e8       	ldi	r18, 0x81	; 129
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	f9 01       	movw	r30, r18
     b78:	20 81       	ld	r18, Z
     b7a:	2f 7b       	andi	r18, 0xBF	; 191
     b7c:	fc 01       	movw	r30, r24
     b7e:	20 83       	st	Z, r18
        rising = ICR1;
     b80:	86 e8       	ldi	r24, 0x86	; 134
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	fc 01       	movw	r30, r24
     b86:	80 81       	ld	r24, Z
     b88:	91 81       	ldd	r25, Z+1	; 0x01
     b8a:	90 93 27 02 	sts	0x0227, r25
     b8e:	80 93 26 02 	sts	0x0226, r24
     b92:	5f c0       	rjmp	.+190    	; 0xc52 <__vector_10+0x12a>
    }
    else{
        TCCR1B |= (1 << ICES1);
     b94:	81 e8       	ldi	r24, 0x81	; 129
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	21 e8       	ldi	r18, 0x81	; 129
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	f9 01       	movw	r30, r18
     b9e:	20 81       	ld	r18, Z
     ba0:	20 64       	ori	r18, 0x40	; 64
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
        falling = ICR1;
     ba6:	86 e8       	ldi	r24, 0x86	; 134
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	fc 01       	movw	r30, r24
     bac:	80 81       	ld	r24, Z
     bae:	91 81       	ldd	r25, Z+1	; 0x01
     bb0:	90 93 1d 02 	sts	0x021D, r25
     bb4:	80 93 1c 02 	sts	0x021C, r24
        counts = falling - rising;
     bb8:	20 91 1c 02 	lds	r18, 0x021C
     bbc:	30 91 1d 02 	lds	r19, 0x021D
     bc0:	80 91 26 02 	lds	r24, 0x0226
     bc4:	90 91 27 02 	lds	r25, 0x0227
     bc8:	a9 01       	movw	r20, r18
     bca:	48 1b       	sub	r20, r24
     bcc:	59 0b       	sbc	r21, r25
     bce:	ca 01       	movw	r24, r20
     bd0:	90 93 25 02 	sts	0x0225, r25
     bd4:	80 93 24 02 	sts	0x0224, r24
        dist = (float)us_per_count * counts * 10 / 580;
     bd8:	80 91 22 02 	lds	r24, 0x0222
     bdc:	90 91 23 02 	lds	r25, 0x0223
     be0:	cc 01       	movw	r24, r24
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	bc 01       	movw	r22, r24
     be8:	cd 01       	movw	r24, r26
     bea:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__floatunsisf>
     bee:	7b 01       	movw	r14, r22
     bf0:	8c 01       	movw	r16, r24
     bf2:	80 91 24 02 	lds	r24, 0x0224
     bf6:	90 91 25 02 	lds	r25, 0x0225
     bfa:	aa 27       	eor	r26, r26
     bfc:	97 fd       	sbrc	r25, 7
     bfe:	a0 95       	com	r26
     c00:	ba 2f       	mov	r27, r26
     c02:	bc 01       	movw	r22, r24
     c04:	cd 01       	movw	r24, r26
     c06:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__floatsisf>
     c0a:	9b 01       	movw	r18, r22
     c0c:	ac 01       	movw	r20, r24
     c0e:	c8 01       	movw	r24, r16
     c10:	b7 01       	movw	r22, r14
     c12:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__mulsf3>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	bc 01       	movw	r22, r24
     c1c:	cd 01       	movw	r24, r26
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e2       	ldi	r20, 0x20	; 32
     c24:	51 e4       	ldi	r21, 0x41	; 65
     c26:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__mulsf3>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	bc 01       	movw	r22, r24
     c30:	cd 01       	movw	r24, r26
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	41 e1       	ldi	r20, 0x11	; 17
     c38:	54 e4       	ldi	r21, 0x44	; 68
     c3a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__divsf3>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	80 93 1e 02 	sts	0x021E, r24
     c46:	90 93 1f 02 	sts	0x021F, r25
     c4a:	a0 93 20 02 	sts	0x0220, r26
     c4e:	b0 93 21 02 	sts	0x0221, r27
    }
}
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	bf 91       	pop	r27
     c5c:	af 91       	pop	r26
     c5e:	9f 91       	pop	r25
     c60:	8f 91       	pop	r24
     c62:	7f 91       	pop	r23
     c64:	6f 91       	pop	r22
     c66:	5f 91       	pop	r21
     c68:	4f 91       	pop	r20
     c6a:	3f 91       	pop	r19
     c6c:	2f 91       	pop	r18
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	0f 90       	pop	r0
     c7c:	1f 90       	pop	r1
     c7e:	18 95       	reti

00000c80 <init_ultrasonic_sensor>:


void init_ultrasonic_sensor(){
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62

    //PORTB2 as output (Arduino PIN 10)
    DDRB |= (1 << PORTB1);  
     c88:	84 e2       	ldi	r24, 0x24	; 36
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	24 e2       	ldi	r18, 0x24	; 36
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	f9 01       	movw	r30, r18
     c92:	20 81       	ld	r18, Z
     c94:	22 60       	ori	r18, 0x02	; 2
     c96:	fc 01       	movw	r30, r24
     c98:	20 83       	st	Z, r18

    //****TIMER1 INIT****//

    //noice reduction enable
    TCCR1B |= (1<<ICNC1); 
     c9a:	81 e8       	ldi	r24, 0x81	; 129
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	21 e8       	ldi	r18, 0x81	; 129
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	f9 01       	movw	r30, r18
     ca4:	20 81       	ld	r18, Z
     ca6:	20 68       	ori	r18, 0x80	; 128
     ca8:	fc 01       	movw	r30, r24
     caa:	20 83       	st	Z, r18

    //Prescale to 64
    TCCR1B |= (1<<CS10) | (1<<CS11); 
     cac:	81 e8       	ldi	r24, 0x81	; 129
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	21 e8       	ldi	r18, 0x81	; 129
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	f9 01       	movw	r30, r18
     cb6:	20 81       	ld	r18, Z
     cb8:	23 60       	ori	r18, 0x03	; 3
     cba:	fc 01       	movw	r30, r24
     cbc:	20 83       	st	Z, r18

    //select CTC mode
    TCCR1B |= (1<<WGM12); 
     cbe:	81 e8       	ldi	r24, 0x81	; 129
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	21 e8       	ldi	r18, 0x81	; 129
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	f9 01       	movw	r30, r18
     cc8:	20 81       	ld	r18, Z
     cca:	28 60       	ori	r18, 0x08	; 8
     ccc:	fc 01       	movw	r30, r24
     cce:	20 83       	st	Z, r18

    //read Int. at: rising edge, falling edge
	TIMSK1 |= (1<<ICIE1) | (1<<OCIE1A);
     cd0:	8f e6       	ldi	r24, 0x6F	; 111
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	2f e6       	ldi	r18, 0x6F	; 111
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	f9 01       	movw	r30, r18
     cda:	20 81       	ld	r18, Z
     cdc:	22 62       	ori	r18, 0x22	; 34
     cde:	fc 01       	movw	r30, r24
     ce0:	20 83       	st	Z, r18

    //read Int. at rising edge
	TCCR1B |= (1<<ICES1);
     ce2:	81 e8       	ldi	r24, 0x81	; 129
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	21 e8       	ldi	r18, 0x81	; 129
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	f9 01       	movw	r30, r18
     cec:	20 81       	ld	r18, Z
     cee:	20 64       	ori	r18, 0x40	; 64
     cf0:	fc 01       	movw	r30, r24
     cf2:	20 83       	st	Z, r18

    //calculate TOP (70ms runtime for one cycle): 16MHz/64 = 25000 count/sec. = 25000/1000 = 2500 count/us / 100*70 = 17500 count/70ms
    OCR1A = 17500;
     cf4:	88 e8       	ldi	r24, 0x88	; 136
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	2c e5       	ldi	r18, 0x5C	; 92
     cfa:	34 e4       	ldi	r19, 0x44	; 68
     cfc:	fc 01       	movw	r30, r24
     cfe:	31 83       	std	Z+1, r19	; 0x01
     d00:	20 83       	st	Z, r18

    //CPU-speed / Prescale = cycles/sec. 1sec/ freq./sec. = 4 (t= 4us/cycle)
    us_per_count = 4;
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	90 93 23 02 	sts	0x0223, r25
     d0a:	80 93 22 02 	sts	0x0222, r24

    //activate global interrupt
    sei();
     d0e:	78 94       	sei

}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <read_dist>:

float read_dist(){
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
    return dist;
     d1e:	80 91 1e 02 	lds	r24, 0x021E
     d22:	90 91 1f 02 	lds	r25, 0x021F
     d26:	a0 91 20 02 	lds	r26, 0x0220
     d2a:	b0 91 21 02 	lds	r27, 0x0221
     d2e:	bc 01       	movw	r22, r24
     d30:	cd 01       	movw	r24, r26
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <__fixunssfsi>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	7b 01       	movw	r14, r22
     d42:	8c 01       	movw	r16, r24
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	5f e4       	ldi	r21, 0x4F	; 79
     d4c:	0e 94 48 0a 	call	0x1490	; 0x1490 <__gesf2>
     d50:	87 fd       	sbrc	r24, 7
     d52:	11 c0       	rjmp	.+34     	; 0xd76 <__fixunssfsi+0x3e>
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	5f e4       	ldi	r21, 0x4F	; 79
     d60:	0e 94 3f 08 	call	0x107e	; 0x107e <__subsf3>
     d64:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fixsfsi>
     d68:	9b 01       	movw	r18, r22
     d6a:	ac 01       	movw	r20, r24
     d6c:	20 50       	subi	r18, 0x00	; 0
     d6e:	30 40       	sbci	r19, 0x00	; 0
     d70:	40 40       	sbci	r20, 0x00	; 0
     d72:	50 48       	sbci	r21, 0x80	; 128
     d74:	06 c0       	rjmp	.+12     	; 0xd82 <__fixunssfsi+0x4a>
     d76:	c8 01       	movw	r24, r16
     d78:	b7 01       	movw	r22, r14
     d7a:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fixsfsi>
     d7e:	9b 01       	movw	r18, r22
     d80:	ac 01       	movw	r20, r24
     d82:	b9 01       	movw	r22, r18
     d84:	ca 01       	movw	r24, r20
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	08 95       	ret

00000d90 <_fpadd_parts>:
     d90:	a0 e0       	ldi	r26, 0x00	; 0
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ee ec       	ldi	r30, 0xCE	; 206
     d96:	f6 e0       	ldi	r31, 0x06	; 6
     d98:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__prologue_saves__+0x8>
     d9c:	fc 01       	movw	r30, r24
     d9e:	ea 01       	movw	r28, r20
     da0:	80 81       	ld	r24, Z
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	08 f4       	brcc	.+2      	; 0xda8 <_fpadd_parts+0x18>
     da6:	38 c1       	rjmp	.+624    	; 0x1018 <_fpadd_parts+0x288>
     da8:	db 01       	movw	r26, r22
     daa:	9c 91       	ld	r25, X
     dac:	92 30       	cpi	r25, 0x02	; 2
     dae:	08 f4       	brcc	.+2      	; 0xdb2 <_fpadd_parts+0x22>
     db0:	30 c1       	rjmp	.+608    	; 0x1012 <_fpadd_parts+0x282>
     db2:	84 30       	cpi	r24, 0x04	; 4
     db4:	59 f4       	brne	.+22     	; 0xdcc <_fpadd_parts+0x3c>
     db6:	94 30       	cpi	r25, 0x04	; 4
     db8:	09 f0       	breq	.+2      	; 0xdbc <_fpadd_parts+0x2c>
     dba:	2e c1       	rjmp	.+604    	; 0x1018 <_fpadd_parts+0x288>
     dbc:	91 81       	ldd	r25, Z+1	; 0x01
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	8c 91       	ld	r24, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	98 17       	cp	r25, r24
     dc6:	09 f0       	breq	.+2      	; 0xdca <_fpadd_parts+0x3a>
     dc8:	21 c1       	rjmp	.+578    	; 0x100c <_fpadd_parts+0x27c>
     dca:	26 c1       	rjmp	.+588    	; 0x1018 <_fpadd_parts+0x288>
     dcc:	94 30       	cpi	r25, 0x04	; 4
     dce:	09 f4       	brne	.+2      	; 0xdd2 <_fpadd_parts+0x42>
     dd0:	20 c1       	rjmp	.+576    	; 0x1012 <_fpadd_parts+0x282>
     dd2:	92 30       	cpi	r25, 0x02	; 2
     dd4:	b1 f4       	brne	.+44     	; 0xe02 <_fpadd_parts+0x72>
     dd6:	82 30       	cpi	r24, 0x02	; 2
     dd8:	09 f0       	breq	.+2      	; 0xddc <_fpadd_parts+0x4c>
     dda:	1e c1       	rjmp	.+572    	; 0x1018 <_fpadd_parts+0x288>
     ddc:	ca 01       	movw	r24, r20
     dde:	af 01       	movw	r20, r30
     de0:	28 e0       	ldi	r18, 0x08	; 8
     de2:	da 01       	movw	r26, r20
     de4:	0d 90       	ld	r0, X+
     de6:	ad 01       	movw	r20, r26
     de8:	dc 01       	movw	r26, r24
     dea:	0d 92       	st	X+, r0
     dec:	cd 01       	movw	r24, r26
     dee:	21 50       	subi	r18, 0x01	; 1
     df0:	c1 f7       	brne	.-16     	; 0xde2 <_fpadd_parts+0x52>
     df2:	db 01       	movw	r26, r22
     df4:	11 96       	adiw	r26, 0x01	; 1
     df6:	8c 91       	ld	r24, X
     df8:	11 97       	sbiw	r26, 0x01	; 1
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	89 23       	and	r24, r25
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	0a c1       	rjmp	.+532    	; 0x1016 <_fpadd_parts+0x286>
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	09 f4       	brne	.+2      	; 0xe08 <_fpadd_parts+0x78>
     e06:	05 c1       	rjmp	.+522    	; 0x1012 <_fpadd_parts+0x282>
     e08:	c2 80       	ldd	r12, Z+2	; 0x02
     e0a:	d3 80       	ldd	r13, Z+3	; 0x03
     e0c:	db 01       	movw	r26, r22
     e0e:	12 96       	adiw	r26, 0x02	; 2
     e10:	6d 90       	ld	r6, X+
     e12:	7c 90       	ld	r7, X
     e14:	13 97       	sbiw	r26, 0x03	; 3
     e16:	24 81       	ldd	r18, Z+4	; 0x04
     e18:	35 81       	ldd	r19, Z+5	; 0x05
     e1a:	46 81       	ldd	r20, Z+6	; 0x06
     e1c:	57 81       	ldd	r21, Z+7	; 0x07
     e1e:	14 96       	adiw	r26, 0x04	; 4
     e20:	ed 90       	ld	r14, X+
     e22:	fd 90       	ld	r15, X+
     e24:	0d 91       	ld	r16, X+
     e26:	1c 91       	ld	r17, X
     e28:	17 97       	sbiw	r26, 0x07	; 7
     e2a:	c6 01       	movw	r24, r12
     e2c:	86 19       	sub	r24, r6
     e2e:	97 09       	sbc	r25, r7
     e30:	5c 01       	movw	r10, r24
     e32:	97 ff       	sbrs	r25, 7
     e34:	04 c0       	rjmp	.+8      	; 0xe3e <_fpadd_parts+0xae>
     e36:	aa 24       	eor	r10, r10
     e38:	bb 24       	eor	r11, r11
     e3a:	a8 1a       	sub	r10, r24
     e3c:	b9 0a       	sbc	r11, r25
     e3e:	b0 e2       	ldi	r27, 0x20	; 32
     e40:	ab 16       	cp	r10, r27
     e42:	b1 04       	cpc	r11, r1
     e44:	0c f0       	brlt	.+2      	; 0xe48 <_fpadd_parts+0xb8>
     e46:	61 c0       	rjmp	.+194    	; 0xf0a <_fpadd_parts+0x17a>
     e48:	18 16       	cp	r1, r24
     e4a:	19 06       	cpc	r1, r25
     e4c:	6c f5       	brge	.+90     	; 0xea8 <_fpadd_parts+0x118>
     e4e:	37 01       	movw	r6, r14
     e50:	48 01       	movw	r8, r16
     e52:	0a 2c       	mov	r0, r10
     e54:	04 c0       	rjmp	.+8      	; 0xe5e <_fpadd_parts+0xce>
     e56:	96 94       	lsr	r9
     e58:	87 94       	ror	r8
     e5a:	77 94       	ror	r7
     e5c:	67 94       	ror	r6
     e5e:	0a 94       	dec	r0
     e60:	d2 f7       	brpl	.-12     	; 0xe56 <_fpadd_parts+0xc6>
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	0a 2c       	mov	r0, r10
     e6c:	04 c0       	rjmp	.+8      	; 0xe76 <_fpadd_parts+0xe6>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	aa 1f       	adc	r26, r26
     e74:	bb 1f       	adc	r27, r27
     e76:	0a 94       	dec	r0
     e78:	d2 f7       	brpl	.-12     	; 0xe6e <_fpadd_parts+0xde>
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	a1 09       	sbc	r26, r1
     e7e:	b1 09       	sbc	r27, r1
     e80:	8e 21       	and	r24, r14
     e82:	9f 21       	and	r25, r15
     e84:	a0 23       	and	r26, r16
     e86:	b1 23       	and	r27, r17
     e88:	ee 24       	eor	r14, r14
     e8a:	ff 24       	eor	r15, r15
     e8c:	87 01       	movw	r16, r14
     e8e:	e3 94       	inc	r14
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	a1 05       	cpc	r26, r1
     e94:	b1 05       	cpc	r27, r1
     e96:	19 f4       	brne	.+6      	; 0xe9e <_fpadd_parts+0x10e>
     e98:	ee 24       	eor	r14, r14
     e9a:	ff 24       	eor	r15, r15
     e9c:	87 01       	movw	r16, r14
     e9e:	e6 28       	or	r14, r6
     ea0:	f7 28       	or	r15, r7
     ea2:	08 29       	or	r16, r8
     ea4:	19 29       	or	r17, r9
     ea6:	3c c0       	rjmp	.+120    	; 0xf20 <_fpadd_parts+0x190>
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	d1 f1       	breq	.+116    	; 0xf20 <_fpadd_parts+0x190>
     eac:	ca 0c       	add	r12, r10
     eae:	db 1c       	adc	r13, r11
     eb0:	39 01       	movw	r6, r18
     eb2:	4a 01       	movw	r8, r20
     eb4:	0a 2c       	mov	r0, r10
     eb6:	04 c0       	rjmp	.+8      	; 0xec0 <_fpadd_parts+0x130>
     eb8:	96 94       	lsr	r9
     eba:	87 94       	ror	r8
     ebc:	77 94       	ror	r7
     ebe:	67 94       	ror	r6
     ec0:	0a 94       	dec	r0
     ec2:	d2 f7       	brpl	.-12     	; 0xeb8 <_fpadd_parts+0x128>
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	a0 e0       	ldi	r26, 0x00	; 0
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	0a 2c       	mov	r0, r10
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <_fpadd_parts+0x148>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	aa 1f       	adc	r26, r26
     ed6:	bb 1f       	adc	r27, r27
     ed8:	0a 94       	dec	r0
     eda:	d2 f7       	brpl	.-12     	; 0xed0 <_fpadd_parts+0x140>
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	a1 09       	sbc	r26, r1
     ee0:	b1 09       	sbc	r27, r1
     ee2:	82 23       	and	r24, r18
     ee4:	93 23       	and	r25, r19
     ee6:	a4 23       	and	r26, r20
     ee8:	b5 23       	and	r27, r21
     eea:	21 e0       	ldi	r18, 0x01	; 1
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	a1 05       	cpc	r26, r1
     ef6:	b1 05       	cpc	r27, r1
     ef8:	19 f4       	brne	.+6      	; 0xf00 <_fpadd_parts+0x170>
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	a9 01       	movw	r20, r18
     f00:	26 29       	or	r18, r6
     f02:	37 29       	or	r19, r7
     f04:	48 29       	or	r20, r8
     f06:	59 29       	or	r21, r9
     f08:	0b c0       	rjmp	.+22     	; 0xf20 <_fpadd_parts+0x190>
     f0a:	6c 14       	cp	r6, r12
     f0c:	7d 04       	cpc	r7, r13
     f0e:	24 f4       	brge	.+8      	; 0xf18 <_fpadd_parts+0x188>
     f10:	ee 24       	eor	r14, r14
     f12:	ff 24       	eor	r15, r15
     f14:	87 01       	movw	r16, r14
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <_fpadd_parts+0x190>
     f18:	63 01       	movw	r12, r6
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	a9 01       	movw	r20, r18
     f20:	81 81       	ldd	r24, Z+1	; 0x01
     f22:	fb 01       	movw	r30, r22
     f24:	91 81       	ldd	r25, Z+1	; 0x01
     f26:	89 17       	cp	r24, r25
     f28:	09 f4       	brne	.+2      	; 0xf2c <_fpadd_parts+0x19c>
     f2a:	45 c0       	rjmp	.+138    	; 0xfb6 <_fpadd_parts+0x226>
     f2c:	88 23       	and	r24, r24
     f2e:	49 f0       	breq	.+18     	; 0xf42 <_fpadd_parts+0x1b2>
     f30:	d8 01       	movw	r26, r16
     f32:	c7 01       	movw	r24, r14
     f34:	82 1b       	sub	r24, r18
     f36:	93 0b       	sbc	r25, r19
     f38:	a4 0b       	sbc	r26, r20
     f3a:	b5 0b       	sbc	r27, r21
     f3c:	9c 01       	movw	r18, r24
     f3e:	ad 01       	movw	r20, r26
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <_fpadd_parts+0x1ba>
     f42:	2e 19       	sub	r18, r14
     f44:	3f 09       	sbc	r19, r15
     f46:	40 0b       	sbc	r20, r16
     f48:	51 0b       	sbc	r21, r17
     f4a:	57 fd       	sbrc	r21, 7
     f4c:	04 c0       	rjmp	.+8      	; 0xf56 <_fpadd_parts+0x1c6>
     f4e:	19 82       	std	Y+1, r1	; 0x01
     f50:	db 82       	std	Y+3, r13	; 0x03
     f52:	ca 82       	std	Y+2, r12	; 0x02
     f54:	0b c0       	rjmp	.+22     	; 0xf6c <_fpadd_parts+0x1dc>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	db 82       	std	Y+3, r13	; 0x03
     f5c:	ca 82       	std	Y+2, r12	; 0x02
     f5e:	50 95       	com	r21
     f60:	40 95       	com	r20
     f62:	30 95       	com	r19
     f64:	21 95       	neg	r18
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	4f 4f       	sbci	r20, 0xFF	; 255
     f6a:	5f 4f       	sbci	r21, 0xFF	; 255
     f6c:	2c 83       	std	Y+4, r18	; 0x04
     f6e:	3d 83       	std	Y+5, r19	; 0x05
     f70:	4e 83       	std	Y+6, r20	; 0x06
     f72:	5f 83       	std	Y+7, r21	; 0x07
     f74:	0d c0       	rjmp	.+26     	; 0xf90 <_fpadd_parts+0x200>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	aa 1f       	adc	r26, r26
     f7c:	bb 1f       	adc	r27, r27
     f7e:	8c 83       	std	Y+4, r24	; 0x04
     f80:	9d 83       	std	Y+5, r25	; 0x05
     f82:	ae 83       	std	Y+6, r26	; 0x06
     f84:	bf 83       	std	Y+7, r27	; 0x07
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	9b 81       	ldd	r25, Y+3	; 0x03
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	9b 83       	std	Y+3, r25	; 0x03
     f8e:	8a 83       	std	Y+2, r24	; 0x02
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	ae 81       	ldd	r26, Y+6	; 0x06
     f96:	bf 81       	ldd	r27, Y+7	; 0x07
     f98:	9c 01       	movw	r18, r24
     f9a:	ad 01       	movw	r20, r26
     f9c:	21 50       	subi	r18, 0x01	; 1
     f9e:	30 40       	sbci	r19, 0x00	; 0
     fa0:	40 40       	sbci	r20, 0x00	; 0
     fa2:	50 40       	sbci	r21, 0x00	; 0
     fa4:	2f 3f       	cpi	r18, 0xFF	; 255
     fa6:	ef ef       	ldi	r30, 0xFF	; 255
     fa8:	3e 07       	cpc	r19, r30
     faa:	ef ef       	ldi	r30, 0xFF	; 255
     fac:	4e 07       	cpc	r20, r30
     fae:	ef e3       	ldi	r30, 0x3F	; 63
     fb0:	5e 07       	cpc	r21, r30
     fb2:	08 f3       	brcs	.-62     	; 0xf76 <_fpadd_parts+0x1e6>
     fb4:	0b c0       	rjmp	.+22     	; 0xfcc <_fpadd_parts+0x23c>
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	db 82       	std	Y+3, r13	; 0x03
     fba:	ca 82       	std	Y+2, r12	; 0x02
     fbc:	2e 0d       	add	r18, r14
     fbe:	3f 1d       	adc	r19, r15
     fc0:	40 1f       	adc	r20, r16
     fc2:	51 1f       	adc	r21, r17
     fc4:	2c 83       	std	Y+4, r18	; 0x04
     fc6:	3d 83       	std	Y+5, r19	; 0x05
     fc8:	4e 83       	std	Y+6, r20	; 0x06
     fca:	5f 83       	std	Y+7, r21	; 0x07
     fcc:	83 e0       	ldi	r24, 0x03	; 3
     fce:	88 83       	st	Y, r24
     fd0:	2c 81       	ldd	r18, Y+4	; 0x04
     fd2:	3d 81       	ldd	r19, Y+5	; 0x05
     fd4:	4e 81       	ldd	r20, Y+6	; 0x06
     fd6:	5f 81       	ldd	r21, Y+7	; 0x07
     fd8:	57 ff       	sbrs	r21, 7
     fda:	1d c0       	rjmp	.+58     	; 0x1016 <_fpadd_parts+0x286>
     fdc:	da 01       	movw	r26, r20
     fde:	c9 01       	movw	r24, r18
     fe0:	81 70       	andi	r24, 0x01	; 1
     fe2:	90 70       	andi	r25, 0x00	; 0
     fe4:	a0 70       	andi	r26, 0x00	; 0
     fe6:	b0 70       	andi	r27, 0x00	; 0
     fe8:	56 95       	lsr	r21
     fea:	47 95       	ror	r20
     fec:	37 95       	ror	r19
     fee:	27 95       	ror	r18
     ff0:	82 2b       	or	r24, r18
     ff2:	93 2b       	or	r25, r19
     ff4:	a4 2b       	or	r26, r20
     ff6:	b5 2b       	or	r27, r21
     ff8:	8c 83       	std	Y+4, r24	; 0x04
     ffa:	9d 83       	std	Y+5, r25	; 0x05
     ffc:	ae 83       	std	Y+6, r26	; 0x06
     ffe:	bf 83       	std	Y+7, r27	; 0x07
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	9b 81       	ldd	r25, Y+3	; 0x03
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	9b 83       	std	Y+3, r25	; 0x03
    1008:	8a 83       	std	Y+2, r24	; 0x02
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <_fpadd_parts+0x286>
    100c:	e0 e0       	ldi	r30, 0x00	; 0
    100e:	f1 e0       	ldi	r31, 0x01	; 1
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <_fpadd_parts+0x288>
    1012:	fb 01       	movw	r30, r22
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <_fpadd_parts+0x288>
    1016:	fe 01       	movw	r30, r28
    1018:	cf 01       	movw	r24, r30
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	ee e0       	ldi	r30, 0x0E	; 14
    1020:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <__epilogue_restores__+0x8>

00001024 <__addsf3>:
    1024:	a0 e2       	ldi	r26, 0x20	; 32
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e8 e1       	ldi	r30, 0x18	; 24
    102a:	f8 e0       	ldi	r31, 0x08	; 8
    102c:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__prologue_saves__+0x18>
    1030:	69 83       	std	Y+1, r22	; 0x01
    1032:	7a 83       	std	Y+2, r23	; 0x02
    1034:	8b 83       	std	Y+3, r24	; 0x03
    1036:	9c 83       	std	Y+4, r25	; 0x04
    1038:	2d 83       	std	Y+5, r18	; 0x05
    103a:	3e 83       	std	Y+6, r19	; 0x06
    103c:	4f 83       	std	Y+7, r20	; 0x07
    103e:	58 87       	std	Y+8, r21	; 0x08
    1040:	89 e0       	ldi	r24, 0x09	; 9
    1042:	e8 2e       	mov	r14, r24
    1044:	f1 2c       	mov	r15, r1
    1046:	ec 0e       	add	r14, r28
    1048:	fd 1e       	adc	r15, r29
    104a:	ce 01       	movw	r24, r28
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	b7 01       	movw	r22, r14
    1050:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    1054:	8e 01       	movw	r16, r28
    1056:	0f 5e       	subi	r16, 0xEF	; 239
    1058:	1f 4f       	sbci	r17, 0xFF	; 255
    105a:	ce 01       	movw	r24, r28
    105c:	05 96       	adiw	r24, 0x05	; 5
    105e:	b8 01       	movw	r22, r16
    1060:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    1064:	c7 01       	movw	r24, r14
    1066:	b8 01       	movw	r22, r16
    1068:	ae 01       	movw	r20, r28
    106a:	47 5e       	subi	r20, 0xE7	; 231
    106c:	5f 4f       	sbci	r21, 0xFF	; 255
    106e:	0e 94 c8 06 	call	0xd90	; 0xd90 <_fpadd_parts>
    1072:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__pack_f>
    1076:	a0 96       	adiw	r28, 0x20	; 32
    1078:	e6 e0       	ldi	r30, 0x06	; 6
    107a:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__epilogue_restores__+0x18>

0000107e <__subsf3>:
    107e:	a0 e2       	ldi	r26, 0x20	; 32
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e5 e4       	ldi	r30, 0x45	; 69
    1084:	f8 e0       	ldi	r31, 0x08	; 8
    1086:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__prologue_saves__+0x18>
    108a:	69 83       	std	Y+1, r22	; 0x01
    108c:	7a 83       	std	Y+2, r23	; 0x02
    108e:	8b 83       	std	Y+3, r24	; 0x03
    1090:	9c 83       	std	Y+4, r25	; 0x04
    1092:	2d 83       	std	Y+5, r18	; 0x05
    1094:	3e 83       	std	Y+6, r19	; 0x06
    1096:	4f 83       	std	Y+7, r20	; 0x07
    1098:	58 87       	std	Y+8, r21	; 0x08
    109a:	8e 01       	movw	r16, r28
    109c:	07 5f       	subi	r16, 0xF7	; 247
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
    10a0:	ce 01       	movw	r24, r28
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	b8 01       	movw	r22, r16
    10a6:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    10aa:	91 e1       	ldi	r25, 0x11	; 17
    10ac:	e9 2e       	mov	r14, r25
    10ae:	f1 2c       	mov	r15, r1
    10b0:	ec 0e       	add	r14, r28
    10b2:	fd 1e       	adc	r15, r29
    10b4:	ce 01       	movw	r24, r28
    10b6:	05 96       	adiw	r24, 0x05	; 5
    10b8:	b7 01       	movw	r22, r14
    10ba:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    10be:	8a 89       	ldd	r24, Y+18	; 0x12
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	89 27       	eor	r24, r25
    10c4:	8a 8b       	std	Y+18, r24	; 0x12
    10c6:	c8 01       	movw	r24, r16
    10c8:	b7 01       	movw	r22, r14
    10ca:	ae 01       	movw	r20, r28
    10cc:	47 5e       	subi	r20, 0xE7	; 231
    10ce:	5f 4f       	sbci	r21, 0xFF	; 255
    10d0:	0e 94 c8 06 	call	0xd90	; 0xd90 <_fpadd_parts>
    10d4:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__pack_f>
    10d8:	a0 96       	adiw	r28, 0x20	; 32
    10da:	e6 e0       	ldi	r30, 0x06	; 6
    10dc:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__epilogue_restores__+0x18>

000010e0 <__mulsf3>:
    10e0:	a0 e2       	ldi	r26, 0x20	; 32
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e6 e7       	ldi	r30, 0x76	; 118
    10e6:	f8 e0       	ldi	r31, 0x08	; 8
    10e8:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__prologue_saves__>
    10ec:	69 83       	std	Y+1, r22	; 0x01
    10ee:	7a 83       	std	Y+2, r23	; 0x02
    10f0:	8b 83       	std	Y+3, r24	; 0x03
    10f2:	9c 83       	std	Y+4, r25	; 0x04
    10f4:	2d 83       	std	Y+5, r18	; 0x05
    10f6:	3e 83       	std	Y+6, r19	; 0x06
    10f8:	4f 83       	std	Y+7, r20	; 0x07
    10fa:	58 87       	std	Y+8, r21	; 0x08
    10fc:	ce 01       	movw	r24, r28
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	be 01       	movw	r22, r28
    1102:	67 5f       	subi	r22, 0xF7	; 247
    1104:	7f 4f       	sbci	r23, 0xFF	; 255
    1106:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    110a:	ce 01       	movw	r24, r28
    110c:	05 96       	adiw	r24, 0x05	; 5
    110e:	be 01       	movw	r22, r28
    1110:	6f 5e       	subi	r22, 0xEF	; 239
    1112:	7f 4f       	sbci	r23, 0xFF	; 255
    1114:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    1118:	99 85       	ldd	r25, Y+9	; 0x09
    111a:	92 30       	cpi	r25, 0x02	; 2
    111c:	78 f0       	brcs	.+30     	; 0x113c <__mulsf3+0x5c>
    111e:	89 89       	ldd	r24, Y+17	; 0x11
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	c0 f0       	brcs	.+48     	; 0x1154 <__mulsf3+0x74>
    1124:	94 30       	cpi	r25, 0x04	; 4
    1126:	19 f4       	brne	.+6      	; 0x112e <__mulsf3+0x4e>
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	41 f4       	brne	.+16     	; 0x113c <__mulsf3+0x5c>
    112c:	cb c0       	rjmp	.+406    	; 0x12c4 <__mulsf3+0x1e4>
    112e:	84 30       	cpi	r24, 0x04	; 4
    1130:	19 f4       	brne	.+6      	; 0x1138 <__mulsf3+0x58>
    1132:	92 30       	cpi	r25, 0x02	; 2
    1134:	79 f4       	brne	.+30     	; 0x1154 <__mulsf3+0x74>
    1136:	c6 c0       	rjmp	.+396    	; 0x12c4 <__mulsf3+0x1e4>
    1138:	92 30       	cpi	r25, 0x02	; 2
    113a:	51 f4       	brne	.+20     	; 0x1150 <__mulsf3+0x70>
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1140:	9a 89       	ldd	r25, Y+18	; 0x12
    1142:	29 17       	cp	r18, r25
    1144:	09 f4       	brne	.+2      	; 0x1148 <__mulsf3+0x68>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	8a 87       	std	Y+10, r24	; 0x0a
    114a:	ce 01       	movw	r24, r28
    114c:	09 96       	adiw	r24, 0x09	; 9
    114e:	bc c0       	rjmp	.+376    	; 0x12c8 <__mulsf3+0x1e8>
    1150:	82 30       	cpi	r24, 0x02	; 2
    1152:	51 f4       	brne	.+20     	; 0x1168 <__mulsf3+0x88>
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	2a 85       	ldd	r18, Y+10	; 0x0a
    1158:	9a 89       	ldd	r25, Y+18	; 0x12
    115a:	29 17       	cp	r18, r25
    115c:	09 f4       	brne	.+2      	; 0x1160 <__mulsf3+0x80>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	8a 8b       	std	Y+18, r24	; 0x12
    1162:	ce 01       	movw	r24, r28
    1164:	41 96       	adiw	r24, 0x11	; 17
    1166:	b0 c0       	rjmp	.+352    	; 0x12c8 <__mulsf3+0x1e8>
    1168:	6d 84       	ldd	r6, Y+13	; 0x0d
    116a:	7e 84       	ldd	r7, Y+14	; 0x0e
    116c:	8f 84       	ldd	r8, Y+15	; 0x0f
    116e:	98 88       	ldd	r9, Y+16	; 0x10
    1170:	ed 88       	ldd	r14, Y+21	; 0x15
    1172:	fe 88       	ldd	r15, Y+22	; 0x16
    1174:	0f 89       	ldd	r16, Y+23	; 0x17
    1176:	18 8d       	ldd	r17, Y+24	; 0x18
    1178:	e0 e2       	ldi	r30, 0x20	; 32
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	dc 01       	movw	r26, r24
    1182:	aa 24       	eor	r10, r10
    1184:	bb 24       	eor	r11, r11
    1186:	65 01       	movw	r12, r10
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	a9 01       	movw	r20, r18
    118e:	b3 01       	movw	r22, r6
    1190:	61 70       	andi	r22, 0x01	; 1
    1192:	70 70       	andi	r23, 0x00	; 0
    1194:	61 15       	cp	r22, r1
    1196:	71 05       	cpc	r23, r1
    1198:	d1 f0       	breq	.+52     	; 0x11ce <__mulsf3+0xee>
    119a:	2e 0d       	add	r18, r14
    119c:	3f 1d       	adc	r19, r15
    119e:	40 1f       	adc	r20, r16
    11a0:	51 1f       	adc	r21, r17
    11a2:	15 01       	movw	r2, r10
    11a4:	26 01       	movw	r4, r12
    11a6:	28 0e       	add	r2, r24
    11a8:	39 1e       	adc	r3, r25
    11aa:	4a 1e       	adc	r4, r26
    11ac:	5b 1e       	adc	r5, r27
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a0 e0       	ldi	r26, 0x00	; 0
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	2e 15       	cp	r18, r14
    11b8:	3f 05       	cpc	r19, r15
    11ba:	40 07       	cpc	r20, r16
    11bc:	51 07       	cpc	r21, r17
    11be:	18 f0       	brcs	.+6      	; 0x11c6 <__mulsf3+0xe6>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	dc 01       	movw	r26, r24
    11c6:	82 0d       	add	r24, r2
    11c8:	93 1d       	adc	r25, r3
    11ca:	a4 1d       	adc	r26, r4
    11cc:	b5 1d       	adc	r27, r5
    11ce:	aa 0c       	add	r10, r10
    11d0:	bb 1c       	adc	r11, r11
    11d2:	cc 1c       	adc	r12, r12
    11d4:	dd 1c       	adc	r13, r13
    11d6:	17 ff       	sbrs	r17, 7
    11d8:	09 c0       	rjmp	.+18     	; 0x11ec <__mulsf3+0x10c>
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	26 2e       	mov	r2, r22
    11de:	31 2c       	mov	r3, r1
    11e0:	41 2c       	mov	r4, r1
    11e2:	51 2c       	mov	r5, r1
    11e4:	a2 28       	or	r10, r2
    11e6:	b3 28       	or	r11, r3
    11e8:	c4 28       	or	r12, r4
    11ea:	d5 28       	or	r13, r5
    11ec:	31 97       	sbiw	r30, 0x01	; 1
    11ee:	49 f0       	breq	.+18     	; 0x1202 <__mulsf3+0x122>
    11f0:	ee 0c       	add	r14, r14
    11f2:	ff 1c       	adc	r15, r15
    11f4:	00 1f       	adc	r16, r16
    11f6:	11 1f       	adc	r17, r17
    11f8:	96 94       	lsr	r9
    11fa:	87 94       	ror	r8
    11fc:	77 94       	ror	r7
    11fe:	67 94       	ror	r6
    1200:	c6 cf       	rjmp	.-116    	; 0x118e <__mulsf3+0xae>
    1202:	6b 89       	ldd	r22, Y+19	; 0x13
    1204:	7c 89       	ldd	r23, Y+20	; 0x14
    1206:	eb 85       	ldd	r30, Y+11	; 0x0b
    1208:	fc 85       	ldd	r31, Y+12	; 0x0c
    120a:	6e 0f       	add	r22, r30
    120c:	7f 1f       	adc	r23, r31
    120e:	6e 5f       	subi	r22, 0xFE	; 254
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	7c 8f       	std	Y+28, r23	; 0x1c
    1214:	6b 8f       	std	Y+27, r22	; 0x1b
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	ea 85       	ldd	r30, Y+10	; 0x0a
    121a:	7a 89       	ldd	r23, Y+18	; 0x12
    121c:	e7 17       	cp	r30, r23
    121e:	09 f4       	brne	.+2      	; 0x1222 <__mulsf3+0x142>
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	6a 8f       	std	Y+26, r22	; 0x1a
    1224:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1226:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1228:	10 c0       	rjmp	.+32     	; 0x124a <__mulsf3+0x16a>
    122a:	fc 01       	movw	r30, r24
    122c:	e1 70       	andi	r30, 0x01	; 1
    122e:	f0 70       	andi	r31, 0x00	; 0
    1230:	30 97       	sbiw	r30, 0x00	; 0
    1232:	29 f0       	breq	.+10     	; 0x123e <__mulsf3+0x15e>
    1234:	56 95       	lsr	r21
    1236:	47 95       	ror	r20
    1238:	37 95       	ror	r19
    123a:	27 95       	ror	r18
    123c:	50 68       	ori	r21, 0x80	; 128
    123e:	b6 95       	lsr	r27
    1240:	a7 95       	ror	r26
    1242:	97 95       	ror	r25
    1244:	87 95       	ror	r24
    1246:	6f 5f       	subi	r22, 0xFF	; 255
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	b7 fd       	sbrc	r27, 7
    124c:	ee cf       	rjmp	.-36     	; 0x122a <__mulsf3+0x14a>
    124e:	0c c0       	rjmp	.+24     	; 0x1268 <__mulsf3+0x188>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	aa 1f       	adc	r26, r26
    1256:	bb 1f       	adc	r27, r27
    1258:	57 fd       	sbrc	r21, 7
    125a:	81 60       	ori	r24, 0x01	; 1
    125c:	22 0f       	add	r18, r18
    125e:	33 1f       	adc	r19, r19
    1260:	44 1f       	adc	r20, r20
    1262:	55 1f       	adc	r21, r21
    1264:	61 50       	subi	r22, 0x01	; 1
    1266:	70 40       	sbci	r23, 0x00	; 0
    1268:	80 30       	cpi	r24, 0x00	; 0
    126a:	e0 e0       	ldi	r30, 0x00	; 0
    126c:	9e 07       	cpc	r25, r30
    126e:	e0 e0       	ldi	r30, 0x00	; 0
    1270:	ae 07       	cpc	r26, r30
    1272:	e0 e4       	ldi	r30, 0x40	; 64
    1274:	be 07       	cpc	r27, r30
    1276:	60 f3       	brcs	.-40     	; 0x1250 <__mulsf3+0x170>
    1278:	6b 8f       	std	Y+27, r22	; 0x1b
    127a:	7c 8f       	std	Y+28, r23	; 0x1c
    127c:	6f e7       	ldi	r22, 0x7F	; 127
    127e:	e6 2e       	mov	r14, r22
    1280:	f1 2c       	mov	r15, r1
    1282:	01 2d       	mov	r16, r1
    1284:	11 2d       	mov	r17, r1
    1286:	e8 22       	and	r14, r24
    1288:	f9 22       	and	r15, r25
    128a:	0a 23       	and	r16, r26
    128c:	1b 23       	and	r17, r27
    128e:	60 e4       	ldi	r22, 0x40	; 64
    1290:	e6 16       	cp	r14, r22
    1292:	f1 04       	cpc	r15, r1
    1294:	01 05       	cpc	r16, r1
    1296:	11 05       	cpc	r17, r1
    1298:	61 f4       	brne	.+24     	; 0x12b2 <__mulsf3+0x1d2>
    129a:	87 fd       	sbrc	r24, 7
    129c:	0a c0       	rjmp	.+20     	; 0x12b2 <__mulsf3+0x1d2>
    129e:	21 15       	cp	r18, r1
    12a0:	31 05       	cpc	r19, r1
    12a2:	41 05       	cpc	r20, r1
    12a4:	51 05       	cpc	r21, r1
    12a6:	29 f0       	breq	.+10     	; 0x12b2 <__mulsf3+0x1d2>
    12a8:	80 5c       	subi	r24, 0xC0	; 192
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	af 4f       	sbci	r26, 0xFF	; 255
    12ae:	bf 4f       	sbci	r27, 0xFF	; 255
    12b0:	80 78       	andi	r24, 0x80	; 128
    12b2:	8d 8f       	std	Y+29, r24	; 0x1d
    12b4:	9e 8f       	std	Y+30, r25	; 0x1e
    12b6:	af 8f       	std	Y+31, r26	; 0x1f
    12b8:	b8 a3       	std	Y+32, r27	; 0x20
    12ba:	83 e0       	ldi	r24, 0x03	; 3
    12bc:	89 8f       	std	Y+25, r24	; 0x19
    12be:	ce 01       	movw	r24, r28
    12c0:	49 96       	adiw	r24, 0x19	; 25
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <__mulsf3+0x1e8>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__pack_f>
    12cc:	a0 96       	adiw	r28, 0x20	; 32
    12ce:	e2 e1       	ldi	r30, 0x12	; 18
    12d0:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__epilogue_restores__>

000012d4 <__divsf3>:
    12d4:	a8 e1       	ldi	r26, 0x18	; 24
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e0 e7       	ldi	r30, 0x70	; 112
    12da:	f9 e0       	ldi	r31, 0x09	; 9
    12dc:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__prologue_saves__+0x10>
    12e0:	69 83       	std	Y+1, r22	; 0x01
    12e2:	7a 83       	std	Y+2, r23	; 0x02
    12e4:	8b 83       	std	Y+3, r24	; 0x03
    12e6:	9c 83       	std	Y+4, r25	; 0x04
    12e8:	2d 83       	std	Y+5, r18	; 0x05
    12ea:	3e 83       	std	Y+6, r19	; 0x06
    12ec:	4f 83       	std	Y+7, r20	; 0x07
    12ee:	58 87       	std	Y+8, r21	; 0x08
    12f0:	8e 01       	movw	r16, r28
    12f2:	07 5f       	subi	r16, 0xF7	; 247
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
    12f6:	ce 01       	movw	r24, r28
    12f8:	01 96       	adiw	r24, 0x01	; 1
    12fa:	b8 01       	movw	r22, r16
    12fc:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    1300:	81 e1       	ldi	r24, 0x11	; 17
    1302:	e8 2e       	mov	r14, r24
    1304:	f1 2c       	mov	r15, r1
    1306:	ec 0e       	add	r14, r28
    1308:	fd 1e       	adc	r15, r29
    130a:	ce 01       	movw	r24, r28
    130c:	05 96       	adiw	r24, 0x05	; 5
    130e:	b7 01       	movw	r22, r14
    1310:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    1314:	99 85       	ldd	r25, Y+9	; 0x09
    1316:	92 30       	cpi	r25, 0x02	; 2
    1318:	08 f4       	brcc	.+2      	; 0x131c <__divsf3+0x48>
    131a:	83 c0       	rjmp	.+262    	; 0x1422 <__divsf3+0x14e>
    131c:	89 89       	ldd	r24, Y+17	; 0x11
    131e:	82 30       	cpi	r24, 0x02	; 2
    1320:	08 f4       	brcc	.+2      	; 0x1324 <__divsf3+0x50>
    1322:	7b c0       	rjmp	.+246    	; 0x141a <__divsf3+0x146>
    1324:	2a 85       	ldd	r18, Y+10	; 0x0a
    1326:	3a 89       	ldd	r19, Y+18	; 0x12
    1328:	23 27       	eor	r18, r19
    132a:	2a 87       	std	Y+10, r18	; 0x0a
    132c:	94 30       	cpi	r25, 0x04	; 4
    132e:	11 f0       	breq	.+4      	; 0x1334 <__divsf3+0x60>
    1330:	92 30       	cpi	r25, 0x02	; 2
    1332:	21 f4       	brne	.+8      	; 0x133c <__divsf3+0x68>
    1334:	98 17       	cp	r25, r24
    1336:	09 f0       	breq	.+2      	; 0x133a <__divsf3+0x66>
    1338:	6c c0       	rjmp	.+216    	; 0x1412 <__divsf3+0x13e>
    133a:	71 c0       	rjmp	.+226    	; 0x141e <__divsf3+0x14a>
    133c:	84 30       	cpi	r24, 0x04	; 4
    133e:	39 f4       	brne	.+14     	; 0x134e <__divsf3+0x7a>
    1340:	1d 86       	std	Y+13, r1	; 0x0d
    1342:	1e 86       	std	Y+14, r1	; 0x0e
    1344:	1f 86       	std	Y+15, r1	; 0x0f
    1346:	18 8a       	std	Y+16, r1	; 0x10
    1348:	1c 86       	std	Y+12, r1	; 0x0c
    134a:	1b 86       	std	Y+11, r1	; 0x0b
    134c:	6a c0       	rjmp	.+212    	; 0x1422 <__divsf3+0x14e>
    134e:	82 30       	cpi	r24, 0x02	; 2
    1350:	19 f4       	brne	.+6      	; 0x1358 <__divsf3+0x84>
    1352:	84 e0       	ldi	r24, 0x04	; 4
    1354:	89 87       	std	Y+9, r24	; 0x09
    1356:	65 c0       	rjmp	.+202    	; 0x1422 <__divsf3+0x14e>
    1358:	8b 85       	ldd	r24, Y+11	; 0x0b
    135a:	9c 85       	ldd	r25, Y+12	; 0x0c
    135c:	2b 89       	ldd	r18, Y+19	; 0x13
    135e:	3c 89       	ldd	r19, Y+20	; 0x14
    1360:	82 1b       	sub	r24, r18
    1362:	93 0b       	sbc	r25, r19
    1364:	9c 87       	std	Y+12, r25	; 0x0c
    1366:	8b 87       	std	Y+11, r24	; 0x0b
    1368:	2d 85       	ldd	r18, Y+13	; 0x0d
    136a:	3e 85       	ldd	r19, Y+14	; 0x0e
    136c:	4f 85       	ldd	r20, Y+15	; 0x0f
    136e:	58 89       	ldd	r21, Y+16	; 0x10
    1370:	ed 88       	ldd	r14, Y+21	; 0x15
    1372:	fe 88       	ldd	r15, Y+22	; 0x16
    1374:	0f 89       	ldd	r16, Y+23	; 0x17
    1376:	18 8d       	ldd	r17, Y+24	; 0x18
    1378:	2e 15       	cp	r18, r14
    137a:	3f 05       	cpc	r19, r15
    137c:	40 07       	cpc	r20, r16
    137e:	51 07       	cpc	r21, r17
    1380:	38 f4       	brcc	.+14     	; 0x1390 <__divsf3+0xbc>
    1382:	22 0f       	add	r18, r18
    1384:	33 1f       	adc	r19, r19
    1386:	44 1f       	adc	r20, r20
    1388:	55 1f       	adc	r21, r21
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	9c 87       	std	Y+12, r25	; 0x0c
    138e:	8b 87       	std	Y+11, r24	; 0x0b
    1390:	6f e1       	ldi	r22, 0x1F	; 31
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	a1 2c       	mov	r10, r1
    1396:	b1 2c       	mov	r11, r1
    1398:	c1 2c       	mov	r12, r1
    139a:	a0 e4       	ldi	r26, 0x40	; 64
    139c:	da 2e       	mov	r13, r26
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	dc 01       	movw	r26, r24
    13a4:	2e 15       	cp	r18, r14
    13a6:	3f 05       	cpc	r19, r15
    13a8:	40 07       	cpc	r20, r16
    13aa:	51 07       	cpc	r21, r17
    13ac:	40 f0       	brcs	.+16     	; 0x13be <__divsf3+0xea>
    13ae:	8a 29       	or	r24, r10
    13b0:	9b 29       	or	r25, r11
    13b2:	ac 29       	or	r26, r12
    13b4:	bd 29       	or	r27, r13
    13b6:	2e 19       	sub	r18, r14
    13b8:	3f 09       	sbc	r19, r15
    13ba:	40 0b       	sbc	r20, r16
    13bc:	51 0b       	sbc	r21, r17
    13be:	d6 94       	lsr	r13
    13c0:	c7 94       	ror	r12
    13c2:	b7 94       	ror	r11
    13c4:	a7 94       	ror	r10
    13c6:	22 0f       	add	r18, r18
    13c8:	33 1f       	adc	r19, r19
    13ca:	44 1f       	adc	r20, r20
    13cc:	55 1f       	adc	r21, r21
    13ce:	61 50       	subi	r22, 0x01	; 1
    13d0:	70 40       	sbci	r23, 0x00	; 0
    13d2:	41 f7       	brne	.-48     	; 0x13a4 <__divsf3+0xd0>
    13d4:	6f e7       	ldi	r22, 0x7F	; 127
    13d6:	e6 2e       	mov	r14, r22
    13d8:	f1 2c       	mov	r15, r1
    13da:	01 2d       	mov	r16, r1
    13dc:	11 2d       	mov	r17, r1
    13de:	e8 22       	and	r14, r24
    13e0:	f9 22       	and	r15, r25
    13e2:	0a 23       	and	r16, r26
    13e4:	1b 23       	and	r17, r27
    13e6:	60 e4       	ldi	r22, 0x40	; 64
    13e8:	e6 16       	cp	r14, r22
    13ea:	f1 04       	cpc	r15, r1
    13ec:	01 05       	cpc	r16, r1
    13ee:	11 05       	cpc	r17, r1
    13f0:	61 f4       	brne	.+24     	; 0x140a <__divsf3+0x136>
    13f2:	87 fd       	sbrc	r24, 7
    13f4:	0a c0       	rjmp	.+20     	; 0x140a <__divsf3+0x136>
    13f6:	21 15       	cp	r18, r1
    13f8:	31 05       	cpc	r19, r1
    13fa:	41 05       	cpc	r20, r1
    13fc:	51 05       	cpc	r21, r1
    13fe:	29 f0       	breq	.+10     	; 0x140a <__divsf3+0x136>
    1400:	80 5c       	subi	r24, 0xC0	; 192
    1402:	9f 4f       	sbci	r25, 0xFF	; 255
    1404:	af 4f       	sbci	r26, 0xFF	; 255
    1406:	bf 4f       	sbci	r27, 0xFF	; 255
    1408:	80 78       	andi	r24, 0x80	; 128
    140a:	8d 87       	std	Y+13, r24	; 0x0d
    140c:	9e 87       	std	Y+14, r25	; 0x0e
    140e:	af 87       	std	Y+15, r26	; 0x0f
    1410:	b8 8b       	std	Y+16, r27	; 0x10
    1412:	8e 01       	movw	r16, r28
    1414:	07 5f       	subi	r16, 0xF7	; 247
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	04 c0       	rjmp	.+8      	; 0x1422 <__divsf3+0x14e>
    141a:	87 01       	movw	r16, r14
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <__divsf3+0x14e>
    141e:	00 e0       	ldi	r16, 0x00	; 0
    1420:	11 e0       	ldi	r17, 0x01	; 1
    1422:	c8 01       	movw	r24, r16
    1424:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__pack_f>
    1428:	68 96       	adiw	r28, 0x18	; 24
    142a:	ea e0       	ldi	r30, 0x0A	; 10
    142c:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <__epilogue_restores__+0x10>

00001430 <__gtsf2>:
    1430:	a8 e1       	ldi	r26, 0x18	; 24
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	ee e1       	ldi	r30, 0x1E	; 30
    1436:	fa e0       	ldi	r31, 0x0A	; 10
    1438:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__prologue_saves__+0x18>
    143c:	69 83       	std	Y+1, r22	; 0x01
    143e:	7a 83       	std	Y+2, r23	; 0x02
    1440:	8b 83       	std	Y+3, r24	; 0x03
    1442:	9c 83       	std	Y+4, r25	; 0x04
    1444:	2d 83       	std	Y+5, r18	; 0x05
    1446:	3e 83       	std	Y+6, r19	; 0x06
    1448:	4f 83       	std	Y+7, r20	; 0x07
    144a:	58 87       	std	Y+8, r21	; 0x08
    144c:	8e 01       	movw	r16, r28
    144e:	07 5f       	subi	r16, 0xF7	; 247
    1450:	1f 4f       	sbci	r17, 0xFF	; 255
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	b8 01       	movw	r22, r16
    1458:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    145c:	81 e1       	ldi	r24, 0x11	; 17
    145e:	e8 2e       	mov	r14, r24
    1460:	f1 2c       	mov	r15, r1
    1462:	ec 0e       	add	r14, r28
    1464:	fd 1e       	adc	r15, r29
    1466:	ce 01       	movw	r24, r28
    1468:	05 96       	adiw	r24, 0x05	; 5
    146a:	b7 01       	movw	r22, r14
    146c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    1470:	89 85       	ldd	r24, Y+9	; 0x09
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	40 f0       	brcs	.+16     	; 0x1486 <__gtsf2+0x56>
    1476:	89 89       	ldd	r24, Y+17	; 0x11
    1478:	82 30       	cpi	r24, 0x02	; 2
    147a:	28 f0       	brcs	.+10     	; 0x1486 <__gtsf2+0x56>
    147c:	c8 01       	movw	r24, r16
    147e:	b7 01       	movw	r22, r14
    1480:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fpcmp_parts_f>
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <__gtsf2+0x58>
    1486:	8f ef       	ldi	r24, 0xFF	; 255
    1488:	68 96       	adiw	r28, 0x18	; 24
    148a:	e6 e0       	ldi	r30, 0x06	; 6
    148c:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__epilogue_restores__+0x18>

00001490 <__gesf2>:
    1490:	a8 e1       	ldi	r26, 0x18	; 24
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ee e4       	ldi	r30, 0x4E	; 78
    1496:	fa e0       	ldi	r31, 0x0A	; 10
    1498:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__prologue_saves__+0x18>
    149c:	69 83       	std	Y+1, r22	; 0x01
    149e:	7a 83       	std	Y+2, r23	; 0x02
    14a0:	8b 83       	std	Y+3, r24	; 0x03
    14a2:	9c 83       	std	Y+4, r25	; 0x04
    14a4:	2d 83       	std	Y+5, r18	; 0x05
    14a6:	3e 83       	std	Y+6, r19	; 0x06
    14a8:	4f 83       	std	Y+7, r20	; 0x07
    14aa:	58 87       	std	Y+8, r21	; 0x08
    14ac:	8e 01       	movw	r16, r28
    14ae:	07 5f       	subi	r16, 0xF7	; 247
    14b0:	1f 4f       	sbci	r17, 0xFF	; 255
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	b8 01       	movw	r22, r16
    14b8:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    14bc:	81 e1       	ldi	r24, 0x11	; 17
    14be:	e8 2e       	mov	r14, r24
    14c0:	f1 2c       	mov	r15, r1
    14c2:	ec 0e       	add	r14, r28
    14c4:	fd 1e       	adc	r15, r29
    14c6:	ce 01       	movw	r24, r28
    14c8:	05 96       	adiw	r24, 0x05	; 5
    14ca:	b7 01       	movw	r22, r14
    14cc:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    14d0:	89 85       	ldd	r24, Y+9	; 0x09
    14d2:	82 30       	cpi	r24, 0x02	; 2
    14d4:	40 f0       	brcs	.+16     	; 0x14e6 <__gesf2+0x56>
    14d6:	89 89       	ldd	r24, Y+17	; 0x11
    14d8:	82 30       	cpi	r24, 0x02	; 2
    14da:	28 f0       	brcs	.+10     	; 0x14e6 <__gesf2+0x56>
    14dc:	c8 01       	movw	r24, r16
    14de:	b7 01       	movw	r22, r14
    14e0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fpcmp_parts_f>
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <__gesf2+0x58>
    14e6:	8f ef       	ldi	r24, 0xFF	; 255
    14e8:	68 96       	adiw	r28, 0x18	; 24
    14ea:	e6 e0       	ldi	r30, 0x06	; 6
    14ec:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__epilogue_restores__+0x18>

000014f0 <__ltsf2>:
    14f0:	a8 e1       	ldi	r26, 0x18	; 24
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ee e7       	ldi	r30, 0x7E	; 126
    14f6:	fa e0       	ldi	r31, 0x0A	; 10
    14f8:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__prologue_saves__+0x18>
    14fc:	69 83       	std	Y+1, r22	; 0x01
    14fe:	7a 83       	std	Y+2, r23	; 0x02
    1500:	8b 83       	std	Y+3, r24	; 0x03
    1502:	9c 83       	std	Y+4, r25	; 0x04
    1504:	2d 83       	std	Y+5, r18	; 0x05
    1506:	3e 83       	std	Y+6, r19	; 0x06
    1508:	4f 83       	std	Y+7, r20	; 0x07
    150a:	58 87       	std	Y+8, r21	; 0x08
    150c:	8e 01       	movw	r16, r28
    150e:	07 5f       	subi	r16, 0xF7	; 247
    1510:	1f 4f       	sbci	r17, 0xFF	; 255
    1512:	ce 01       	movw	r24, r28
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	b8 01       	movw	r22, r16
    1518:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    151c:	81 e1       	ldi	r24, 0x11	; 17
    151e:	e8 2e       	mov	r14, r24
    1520:	f1 2c       	mov	r15, r1
    1522:	ec 0e       	add	r14, r28
    1524:	fd 1e       	adc	r15, r29
    1526:	ce 01       	movw	r24, r28
    1528:	05 96       	adiw	r24, 0x05	; 5
    152a:	b7 01       	movw	r22, r14
    152c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	82 30       	cpi	r24, 0x02	; 2
    1534:	40 f0       	brcs	.+16     	; 0x1546 <__ltsf2+0x56>
    1536:	89 89       	ldd	r24, Y+17	; 0x11
    1538:	82 30       	cpi	r24, 0x02	; 2
    153a:	28 f0       	brcs	.+10     	; 0x1546 <__ltsf2+0x56>
    153c:	c8 01       	movw	r24, r16
    153e:	b7 01       	movw	r22, r14
    1540:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fpcmp_parts_f>
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <__ltsf2+0x58>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	68 96       	adiw	r28, 0x18	; 24
    154a:	e6 e0       	ldi	r30, 0x06	; 6
    154c:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__epilogue_restores__+0x18>

00001550 <__floatsisf>:
    1550:	a8 e0       	ldi	r26, 0x08	; 8
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	ee ea       	ldi	r30, 0xAE	; 174
    1556:	fa e0       	ldi	r31, 0x0A	; 10
    1558:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__prologue_saves__+0x18>
    155c:	7b 01       	movw	r14, r22
    155e:	8c 01       	movw	r16, r24
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	d8 01       	movw	r26, r16
    1566:	c7 01       	movw	r24, r14
    1568:	88 27       	eor	r24, r24
    156a:	b7 fd       	sbrc	r27, 7
    156c:	83 95       	inc	r24
    156e:	99 27       	eor	r25, r25
    1570:	aa 27       	eor	r26, r26
    1572:	bb 27       	eor	r27, r27
    1574:	28 2f       	mov	r18, r24
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	e1 14       	cp	r14, r1
    157a:	f1 04       	cpc	r15, r1
    157c:	01 05       	cpc	r16, r1
    157e:	11 05       	cpc	r17, r1
    1580:	19 f4       	brne	.+6      	; 0x1588 <__floatsisf+0x38>
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	37 c0       	rjmp	.+110    	; 0x15f6 <__floatsisf+0xa6>
    1588:	8e e1       	ldi	r24, 0x1E	; 30
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	8b 83       	std	Y+3, r24	; 0x03
    1590:	22 23       	and	r18, r18
    1592:	89 f0       	breq	.+34     	; 0x15b6 <__floatsisf+0x66>
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	e8 16       	cp	r14, r24
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	f8 06       	cpc	r15, r24
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	08 07       	cpc	r16, r24
    15a0:	80 e8       	ldi	r24, 0x80	; 128
    15a2:	18 07       	cpc	r17, r24
    15a4:	69 f1       	breq	.+90     	; 0x1600 <__floatsisf+0xb0>
    15a6:	10 95       	com	r17
    15a8:	00 95       	com	r16
    15aa:	f0 94       	com	r15
    15ac:	e0 94       	com	r14
    15ae:	e1 1c       	adc	r14, r1
    15b0:	f1 1c       	adc	r15, r1
    15b2:	01 1d       	adc	r16, r1
    15b4:	11 1d       	adc	r17, r1
    15b6:	ed 82       	std	Y+5, r14	; 0x05
    15b8:	fe 82       	std	Y+6, r15	; 0x06
    15ba:	0f 83       	std	Y+7, r16	; 0x07
    15bc:	18 87       	std	Y+8, r17	; 0x08
    15be:	c8 01       	movw	r24, r16
    15c0:	b7 01       	movw	r22, r14
    15c2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__clzsi2>
    15c6:	9c 01       	movw	r18, r24
    15c8:	21 50       	subi	r18, 0x01	; 1
    15ca:	30 40       	sbci	r19, 0x00	; 0
    15cc:	12 16       	cp	r1, r18
    15ce:	13 06       	cpc	r1, r19
    15d0:	94 f4       	brge	.+36     	; 0x15f6 <__floatsisf+0xa6>
    15d2:	02 2e       	mov	r0, r18
    15d4:	04 c0       	rjmp	.+8      	; 0x15de <__floatsisf+0x8e>
    15d6:	ee 0c       	add	r14, r14
    15d8:	ff 1c       	adc	r15, r15
    15da:	00 1f       	adc	r16, r16
    15dc:	11 1f       	adc	r17, r17
    15de:	0a 94       	dec	r0
    15e0:	d2 f7       	brpl	.-12     	; 0x15d6 <__floatsisf+0x86>
    15e2:	ed 82       	std	Y+5, r14	; 0x05
    15e4:	fe 82       	std	Y+6, r15	; 0x06
    15e6:	0f 83       	std	Y+7, r16	; 0x07
    15e8:	18 87       	std	Y+8, r17	; 0x08
    15ea:	8e e1       	ldi	r24, 0x1E	; 30
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	82 1b       	sub	r24, r18
    15f0:	93 0b       	sbc	r25, r19
    15f2:	9c 83       	std	Y+4, r25	; 0x04
    15f4:	8b 83       	std	Y+3, r24	; 0x03
    15f6:	ce 01       	movw	r24, r28
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__pack_f>
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <__floatsisf+0xb8>
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	9f ec       	ldi	r25, 0xCF	; 207
    1608:	28 96       	adiw	r28, 0x08	; 8
    160a:	e6 e0       	ldi	r30, 0x06	; 6
    160c:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__epilogue_restores__+0x18>

00001610 <__fixsfsi>:
    1610:	ac e0       	ldi	r26, 0x0C	; 12
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ee e0       	ldi	r30, 0x0E	; 14
    1616:	fb e0       	ldi	r31, 0x0B	; 11
    1618:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__prologue_saves__+0x20>
    161c:	69 83       	std	Y+1, r22	; 0x01
    161e:	7a 83       	std	Y+2, r23	; 0x02
    1620:	8b 83       	std	Y+3, r24	; 0x03
    1622:	9c 83       	std	Y+4, r25	; 0x04
    1624:	ce 01       	movw	r24, r28
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	be 01       	movw	r22, r28
    162a:	6b 5f       	subi	r22, 0xFB	; 251
    162c:	7f 4f       	sbci	r23, 0xFF	; 255
    162e:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__unpack_f>
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	82 30       	cpi	r24, 0x02	; 2
    1636:	81 f1       	breq	.+96     	; 0x1698 <__fixsfsi+0x88>
    1638:	82 30       	cpi	r24, 0x02	; 2
    163a:	70 f1       	brcs	.+92     	; 0x1698 <__fixsfsi+0x88>
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	21 f4       	brne	.+8      	; 0x1648 <__fixsfsi+0x38>
    1640:	8e 81       	ldd	r24, Y+6	; 0x06
    1642:	88 23       	and	r24, r24
    1644:	69 f1       	breq	.+90     	; 0x16a0 <__fixsfsi+0x90>
    1646:	0a c0       	rjmp	.+20     	; 0x165c <__fixsfsi+0x4c>
    1648:	2f 81       	ldd	r18, Y+7	; 0x07
    164a:	38 85       	ldd	r19, Y+8	; 0x08
    164c:	37 fd       	sbrc	r19, 7
    164e:	24 c0       	rjmp	.+72     	; 0x1698 <__fixsfsi+0x88>
    1650:	6e 81       	ldd	r22, Y+6	; 0x06
    1652:	2f 31       	cpi	r18, 0x1F	; 31
    1654:	31 05       	cpc	r19, r1
    1656:	3c f0       	brlt	.+14     	; 0x1666 <__fixsfsi+0x56>
    1658:	66 23       	and	r22, r22
    165a:	11 f1       	breq	.+68     	; 0x16a0 <__fixsfsi+0x90>
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	50 e8       	ldi	r21, 0x80	; 128
    1664:	21 c0       	rjmp	.+66     	; 0x16a8 <__fixsfsi+0x98>
    1666:	8e e1       	ldi	r24, 0x1E	; 30
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	82 1b       	sub	r24, r18
    166c:	93 0b       	sbc	r25, r19
    166e:	29 85       	ldd	r18, Y+9	; 0x09
    1670:	3a 85       	ldd	r19, Y+10	; 0x0a
    1672:	4b 85       	ldd	r20, Y+11	; 0x0b
    1674:	5c 85       	ldd	r21, Y+12	; 0x0c
    1676:	04 c0       	rjmp	.+8      	; 0x1680 <__fixsfsi+0x70>
    1678:	56 95       	lsr	r21
    167a:	47 95       	ror	r20
    167c:	37 95       	ror	r19
    167e:	27 95       	ror	r18
    1680:	8a 95       	dec	r24
    1682:	d2 f7       	brpl	.-12     	; 0x1678 <__fixsfsi+0x68>
    1684:	66 23       	and	r22, r22
    1686:	81 f0       	breq	.+32     	; 0x16a8 <__fixsfsi+0x98>
    1688:	50 95       	com	r21
    168a:	40 95       	com	r20
    168c:	30 95       	com	r19
    168e:	21 95       	neg	r18
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	4f 4f       	sbci	r20, 0xFF	; 255
    1694:	5f 4f       	sbci	r21, 0xFF	; 255
    1696:	08 c0       	rjmp	.+16     	; 0x16a8 <__fixsfsi+0x98>
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	a9 01       	movw	r20, r18
    169e:	04 c0       	rjmp	.+8      	; 0x16a8 <__fixsfsi+0x98>
    16a0:	2f ef       	ldi	r18, 0xFF	; 255
    16a2:	3f ef       	ldi	r19, 0xFF	; 255
    16a4:	4f ef       	ldi	r20, 0xFF	; 255
    16a6:	5f e7       	ldi	r21, 0x7F	; 127
    16a8:	b9 01       	movw	r22, r18
    16aa:	ca 01       	movw	r24, r20
    16ac:	2c 96       	adiw	r28, 0x0c	; 12
    16ae:	e2 e0       	ldi	r30, 0x02	; 2
    16b0:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <__epilogue_restores__+0x20>

000016b4 <__floatunsisf>:
    16b4:	a8 e0       	ldi	r26, 0x08	; 8
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e0 e6       	ldi	r30, 0x60	; 96
    16ba:	fb e0       	ldi	r31, 0x0B	; 11
    16bc:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__prologue_saves__+0x14>
    16c0:	7b 01       	movw	r14, r22
    16c2:	8c 01       	movw	r16, r24
    16c4:	1a 82       	std	Y+2, r1	; 0x02
    16c6:	61 15       	cp	r22, r1
    16c8:	71 05       	cpc	r23, r1
    16ca:	81 05       	cpc	r24, r1
    16cc:	91 05       	cpc	r25, r1
    16ce:	19 f4       	brne	.+6      	; 0x16d6 <__floatunsisf+0x22>
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	5f c0       	rjmp	.+190    	; 0x1794 <__floatunsisf+0xe0>
    16d6:	83 e0       	ldi	r24, 0x03	; 3
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	8e e1       	ldi	r24, 0x1E	; 30
    16dc:	c8 2e       	mov	r12, r24
    16de:	d1 2c       	mov	r13, r1
    16e0:	dc 82       	std	Y+4, r13	; 0x04
    16e2:	cb 82       	std	Y+3, r12	; 0x03
    16e4:	ed 82       	std	Y+5, r14	; 0x05
    16e6:	fe 82       	std	Y+6, r15	; 0x06
    16e8:	0f 83       	std	Y+7, r16	; 0x07
    16ea:	18 87       	std	Y+8, r17	; 0x08
    16ec:	c8 01       	movw	r24, r16
    16ee:	b7 01       	movw	r22, r14
    16f0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__clzsi2>
    16f4:	fc 01       	movw	r30, r24
    16f6:	31 97       	sbiw	r30, 0x01	; 1
    16f8:	f7 ff       	sbrs	r31, 7
    16fa:	3a c0       	rjmp	.+116    	; 0x1770 <__floatunsisf+0xbc>
    16fc:	aa 27       	eor	r26, r26
    16fe:	bb 27       	eor	r27, r27
    1700:	ae 1b       	sub	r26, r30
    1702:	bf 0b       	sbc	r27, r31
    1704:	21 e0       	ldi	r18, 0x01	; 1
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	0a 2e       	mov	r0, r26
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <__floatunsisf+0x64>
    1710:	22 0f       	add	r18, r18
    1712:	33 1f       	adc	r19, r19
    1714:	44 1f       	adc	r20, r20
    1716:	55 1f       	adc	r21, r21
    1718:	0a 94       	dec	r0
    171a:	d2 f7       	brpl	.-12     	; 0x1710 <__floatunsisf+0x5c>
    171c:	21 50       	subi	r18, 0x01	; 1
    171e:	30 40       	sbci	r19, 0x00	; 0
    1720:	40 40       	sbci	r20, 0x00	; 0
    1722:	50 40       	sbci	r21, 0x00	; 0
    1724:	2e 21       	and	r18, r14
    1726:	3f 21       	and	r19, r15
    1728:	40 23       	and	r20, r16
    172a:	51 23       	and	r21, r17
    172c:	61 e0       	ldi	r22, 0x01	; 1
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	21 15       	cp	r18, r1
    1736:	31 05       	cpc	r19, r1
    1738:	41 05       	cpc	r20, r1
    173a:	51 05       	cpc	r21, r1
    173c:	19 f4       	brne	.+6      	; 0x1744 <__floatunsisf+0x90>
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	cb 01       	movw	r24, r22
    1744:	04 c0       	rjmp	.+8      	; 0x174e <__floatunsisf+0x9a>
    1746:	16 95       	lsr	r17
    1748:	07 95       	ror	r16
    174a:	f7 94       	ror	r15
    174c:	e7 94       	ror	r14
    174e:	aa 95       	dec	r26
    1750:	d2 f7       	brpl	.-12     	; 0x1746 <__floatunsisf+0x92>
    1752:	e6 2a       	or	r14, r22
    1754:	f7 2a       	or	r15, r23
    1756:	08 2b       	or	r16, r24
    1758:	19 2b       	or	r17, r25
    175a:	ed 82       	std	Y+5, r14	; 0x05
    175c:	fe 82       	std	Y+6, r15	; 0x06
    175e:	0f 83       	std	Y+7, r16	; 0x07
    1760:	18 87       	std	Y+8, r17	; 0x08
    1762:	8e e1       	ldi	r24, 0x1E	; 30
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	8e 1b       	sub	r24, r30
    1768:	9f 0b       	sbc	r25, r31
    176a:	9c 83       	std	Y+4, r25	; 0x04
    176c:	8b 83       	std	Y+3, r24	; 0x03
    176e:	12 c0       	rjmp	.+36     	; 0x1794 <__floatunsisf+0xe0>
    1770:	30 97       	sbiw	r30, 0x00	; 0
    1772:	81 f0       	breq	.+32     	; 0x1794 <__floatunsisf+0xe0>
    1774:	0e 2e       	mov	r0, r30
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <__floatunsisf+0xcc>
    1778:	ee 0c       	add	r14, r14
    177a:	ff 1c       	adc	r15, r15
    177c:	00 1f       	adc	r16, r16
    177e:	11 1f       	adc	r17, r17
    1780:	0a 94       	dec	r0
    1782:	d2 f7       	brpl	.-12     	; 0x1778 <__floatunsisf+0xc4>
    1784:	ed 82       	std	Y+5, r14	; 0x05
    1786:	fe 82       	std	Y+6, r15	; 0x06
    1788:	0f 83       	std	Y+7, r16	; 0x07
    178a:	18 87       	std	Y+8, r17	; 0x08
    178c:	ce 1a       	sub	r12, r30
    178e:	df 0a       	sbc	r13, r31
    1790:	dc 82       	std	Y+4, r13	; 0x04
    1792:	cb 82       	std	Y+3, r12	; 0x03
    1794:	ce 01       	movw	r24, r28
    1796:	01 96       	adiw	r24, 0x01	; 1
    1798:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__pack_f>
    179c:	28 96       	adiw	r28, 0x08	; 8
    179e:	e8 e0       	ldi	r30, 0x08	; 8
    17a0:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__epilogue_restores__+0x14>

000017a4 <__clzsi2>:
    17a4:	af 92       	push	r10
    17a6:	bf 92       	push	r11
    17a8:	cf 92       	push	r12
    17aa:	df 92       	push	r13
    17ac:	ef 92       	push	r14
    17ae:	ff 92       	push	r15
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	7b 01       	movw	r14, r22
    17b6:	8c 01       	movw	r16, r24
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	e8 16       	cp	r14, r24
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	f8 06       	cpc	r15, r24
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	08 07       	cpc	r16, r24
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	18 07       	cpc	r17, r24
    17c8:	58 f4       	brcc	.+22     	; 0x17e0 <__clzsi2+0x3c>
    17ca:	ef ef       	ldi	r30, 0xFF	; 255
    17cc:	ee 16       	cp	r14, r30
    17ce:	f1 04       	cpc	r15, r1
    17d0:	01 05       	cpc	r16, r1
    17d2:	11 05       	cpc	r17, r1
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <__clzsi2+0x34>
    17d6:	90 f4       	brcc	.+36     	; 0x17fc <__clzsi2+0x58>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	dc 01       	movw	r26, r24
    17de:	17 c0       	rjmp	.+46     	; 0x180e <__clzsi2+0x6a>
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	ef 16       	cp	r14, r31
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	ff 06       	cpc	r15, r31
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	0f 07       	cpc	r16, r31
    17ec:	f1 e0       	ldi	r31, 0x01	; 1
    17ee:	1f 07       	cpc	r17, r31
    17f0:	50 f4       	brcc	.+20     	; 0x1806 <__clzsi2+0x62>
    17f2:	80 e1       	ldi	r24, 0x10	; 16
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a0 e0       	ldi	r26, 0x00	; 0
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	09 c0       	rjmp	.+18     	; 0x180e <__clzsi2+0x6a>
    17fc:	88 e0       	ldi	r24, 0x08	; 8
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a0 e0       	ldi	r26, 0x00	; 0
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	04 c0       	rjmp	.+8      	; 0x180e <__clzsi2+0x6a>
    1806:	88 e1       	ldi	r24, 0x18	; 24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a0 e0       	ldi	r26, 0x00	; 0
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	20 e2       	ldi	r18, 0x20	; 32
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	28 1b       	sub	r18, r24
    1818:	39 0b       	sbc	r19, r25
    181a:	4a 0b       	sbc	r20, r26
    181c:	5b 0b       	sbc	r21, r27
    181e:	57 01       	movw	r10, r14
    1820:	68 01       	movw	r12, r16
    1822:	04 c0       	rjmp	.+8      	; 0x182c <__clzsi2+0x88>
    1824:	d6 94       	lsr	r13
    1826:	c7 94       	ror	r12
    1828:	b7 94       	ror	r11
    182a:	a7 94       	ror	r10
    182c:	8a 95       	dec	r24
    182e:	d2 f7       	brpl	.-12     	; 0x1824 <__clzsi2+0x80>
    1830:	d6 01       	movw	r26, r12
    1832:	c5 01       	movw	r24, r10
    1834:	88 5f       	subi	r24, 0xF8	; 248
    1836:	9e 4f       	sbci	r25, 0xFE	; 254
    1838:	fc 01       	movw	r30, r24
    183a:	80 81       	ld	r24, Z
    183c:	28 1b       	sub	r18, r24
    183e:	31 09       	sbc	r19, r1
    1840:	41 09       	sbc	r20, r1
    1842:	51 09       	sbc	r21, r1
    1844:	c9 01       	movw	r24, r18
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	bf 90       	pop	r11
    1854:	af 90       	pop	r10
    1856:	08 95       	ret

00001858 <__pack_f>:
    1858:	ef 92       	push	r14
    185a:	ff 92       	push	r15
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	fc 01       	movw	r30, r24
    1866:	24 81       	ldd	r18, Z+4	; 0x04
    1868:	35 81       	ldd	r19, Z+5	; 0x05
    186a:	46 81       	ldd	r20, Z+6	; 0x06
    186c:	57 81       	ldd	r21, Z+7	; 0x07
    186e:	61 81       	ldd	r22, Z+1	; 0x01
    1870:	80 81       	ld	r24, Z
    1872:	82 30       	cpi	r24, 0x02	; 2
    1874:	20 f4       	brcc	.+8      	; 0x187e <__pack_f+0x26>
    1876:	40 61       	ori	r20, 0x10	; 16
    1878:	ef ef       	ldi	r30, 0xFF	; 255
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	a3 c0       	rjmp	.+326    	; 0x19c4 <__pack_f+0x16c>
    187e:	84 30       	cpi	r24, 0x04	; 4
    1880:	09 f4       	brne	.+2      	; 0x1884 <__pack_f+0x2c>
    1882:	9b c0       	rjmp	.+310    	; 0x19ba <__pack_f+0x162>
    1884:	82 30       	cpi	r24, 0x02	; 2
    1886:	09 f4       	brne	.+2      	; 0x188a <__pack_f+0x32>
    1888:	92 c0       	rjmp	.+292    	; 0x19ae <__pack_f+0x156>
    188a:	21 15       	cp	r18, r1
    188c:	31 05       	cpc	r19, r1
    188e:	41 05       	cpc	r20, r1
    1890:	51 05       	cpc	r21, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <__pack_f+0x3e>
    1894:	8f c0       	rjmp	.+286    	; 0x19b4 <__pack_f+0x15c>
    1896:	02 80       	ldd	r0, Z+2	; 0x02
    1898:	f3 81       	ldd	r31, Z+3	; 0x03
    189a:	e0 2d       	mov	r30, r0
    189c:	8f ef       	ldi	r24, 0xFF	; 255
    189e:	e2 38       	cpi	r30, 0x82	; 130
    18a0:	f8 07       	cpc	r31, r24
    18a2:	0c f0       	brlt	.+2      	; 0x18a6 <__pack_f+0x4e>
    18a4:	5a c0       	rjmp	.+180    	; 0x195a <__pack_f+0x102>
    18a6:	c2 e8       	ldi	r28, 0x82	; 130
    18a8:	df ef       	ldi	r29, 0xFF	; 255
    18aa:	ce 1b       	sub	r28, r30
    18ac:	df 0b       	sbc	r29, r31
    18ae:	ca 31       	cpi	r28, 0x1A	; 26
    18b0:	d1 05       	cpc	r29, r1
    18b2:	6c f5       	brge	.+90     	; 0x190e <__pack_f+0xb6>
    18b4:	79 01       	movw	r14, r18
    18b6:	8a 01       	movw	r16, r20
    18b8:	0c 2e       	mov	r0, r28
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <__pack_f+0x6c>
    18bc:	16 95       	lsr	r17
    18be:	07 95       	ror	r16
    18c0:	f7 94       	ror	r15
    18c2:	e7 94       	ror	r14
    18c4:	0a 94       	dec	r0
    18c6:	d2 f7       	brpl	.-12     	; 0x18bc <__pack_f+0x64>
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a0 e0       	ldi	r26, 0x00	; 0
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	0c 2e       	mov	r0, r28
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <__pack_f+0x84>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	aa 1f       	adc	r26, r26
    18da:	bb 1f       	adc	r27, r27
    18dc:	0a 94       	dec	r0
    18de:	d2 f7       	brpl	.-12     	; 0x18d4 <__pack_f+0x7c>
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	a1 09       	sbc	r26, r1
    18e4:	b1 09       	sbc	r27, r1
    18e6:	82 23       	and	r24, r18
    18e8:	93 23       	and	r25, r19
    18ea:	a4 23       	and	r26, r20
    18ec:	b5 23       	and	r27, r21
    18ee:	21 e0       	ldi	r18, 0x01	; 1
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	a1 05       	cpc	r26, r1
    18fa:	b1 05       	cpc	r27, r1
    18fc:	19 f4       	brne	.+6      	; 0x1904 <__pack_f+0xac>
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	a9 01       	movw	r20, r18
    1904:	2e 29       	or	r18, r14
    1906:	3f 29       	or	r19, r15
    1908:	40 2b       	or	r20, r16
    190a:	51 2b       	or	r21, r17
    190c:	03 c0       	rjmp	.+6      	; 0x1914 <__pack_f+0xbc>
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	a9 01       	movw	r20, r18
    1914:	da 01       	movw	r26, r20
    1916:	c9 01       	movw	r24, r18
    1918:	8f 77       	andi	r24, 0x7F	; 127
    191a:	90 70       	andi	r25, 0x00	; 0
    191c:	a0 70       	andi	r26, 0x00	; 0
    191e:	b0 70       	andi	r27, 0x00	; 0
    1920:	80 34       	cpi	r24, 0x40	; 64
    1922:	91 05       	cpc	r25, r1
    1924:	a1 05       	cpc	r26, r1
    1926:	b1 05       	cpc	r27, r1
    1928:	39 f4       	brne	.+14     	; 0x1938 <__pack_f+0xe0>
    192a:	27 ff       	sbrs	r18, 7
    192c:	09 c0       	rjmp	.+18     	; 0x1940 <__pack_f+0xe8>
    192e:	20 5c       	subi	r18, 0xC0	; 192
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	4f 4f       	sbci	r20, 0xFF	; 255
    1934:	5f 4f       	sbci	r21, 0xFF	; 255
    1936:	04 c0       	rjmp	.+8      	; 0x1940 <__pack_f+0xe8>
    1938:	21 5c       	subi	r18, 0xC1	; 193
    193a:	3f 4f       	sbci	r19, 0xFF	; 255
    193c:	4f 4f       	sbci	r20, 0xFF	; 255
    193e:	5f 4f       	sbci	r21, 0xFF	; 255
    1940:	e1 e0       	ldi	r30, 0x01	; 1
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	20 30       	cpi	r18, 0x00	; 0
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	38 07       	cpc	r19, r24
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	48 07       	cpc	r20, r24
    194e:	80 e4       	ldi	r24, 0x40	; 64
    1950:	58 07       	cpc	r21, r24
    1952:	28 f5       	brcc	.+74     	; 0x199e <__pack_f+0x146>
    1954:	e0 e0       	ldi	r30, 0x00	; 0
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	22 c0       	rjmp	.+68     	; 0x199e <__pack_f+0x146>
    195a:	e0 38       	cpi	r30, 0x80	; 128
    195c:	f1 05       	cpc	r31, r1
    195e:	6c f5       	brge	.+90     	; 0x19ba <__pack_f+0x162>
    1960:	e1 58       	subi	r30, 0x81	; 129
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	da 01       	movw	r26, r20
    1966:	c9 01       	movw	r24, r18
    1968:	8f 77       	andi	r24, 0x7F	; 127
    196a:	90 70       	andi	r25, 0x00	; 0
    196c:	a0 70       	andi	r26, 0x00	; 0
    196e:	b0 70       	andi	r27, 0x00	; 0
    1970:	80 34       	cpi	r24, 0x40	; 64
    1972:	91 05       	cpc	r25, r1
    1974:	a1 05       	cpc	r26, r1
    1976:	b1 05       	cpc	r27, r1
    1978:	39 f4       	brne	.+14     	; 0x1988 <__pack_f+0x130>
    197a:	27 ff       	sbrs	r18, 7
    197c:	09 c0       	rjmp	.+18     	; 0x1990 <__pack_f+0x138>
    197e:	20 5c       	subi	r18, 0xC0	; 192
    1980:	3f 4f       	sbci	r19, 0xFF	; 255
    1982:	4f 4f       	sbci	r20, 0xFF	; 255
    1984:	5f 4f       	sbci	r21, 0xFF	; 255
    1986:	04 c0       	rjmp	.+8      	; 0x1990 <__pack_f+0x138>
    1988:	21 5c       	subi	r18, 0xC1	; 193
    198a:	3f 4f       	sbci	r19, 0xFF	; 255
    198c:	4f 4f       	sbci	r20, 0xFF	; 255
    198e:	5f 4f       	sbci	r21, 0xFF	; 255
    1990:	57 ff       	sbrs	r21, 7
    1992:	05 c0       	rjmp	.+10     	; 0x199e <__pack_f+0x146>
    1994:	56 95       	lsr	r21
    1996:	47 95       	ror	r20
    1998:	37 95       	ror	r19
    199a:	27 95       	ror	r18
    199c:	31 96       	adiw	r30, 0x01	; 1
    199e:	87 e0       	ldi	r24, 0x07	; 7
    19a0:	56 95       	lsr	r21
    19a2:	47 95       	ror	r20
    19a4:	37 95       	ror	r19
    19a6:	27 95       	ror	r18
    19a8:	8a 95       	dec	r24
    19aa:	d1 f7       	brne	.-12     	; 0x19a0 <__pack_f+0x148>
    19ac:	0b c0       	rjmp	.+22     	; 0x19c4 <__pack_f+0x16c>
    19ae:	e0 e0       	ldi	r30, 0x00	; 0
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	05 c0       	rjmp	.+10     	; 0x19be <__pack_f+0x166>
    19b4:	e0 e0       	ldi	r30, 0x00	; 0
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	05 c0       	rjmp	.+10     	; 0x19c4 <__pack_f+0x16c>
    19ba:	ef ef       	ldi	r30, 0xFF	; 255
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	a9 01       	movw	r20, r18
    19c4:	8e 2f       	mov	r24, r30
    19c6:	87 95       	ror	r24
    19c8:	88 27       	eor	r24, r24
    19ca:	87 95       	ror	r24
    19cc:	94 2f       	mov	r25, r20
    19ce:	9f 77       	andi	r25, 0x7F	; 127
    19d0:	67 95       	ror	r22
    19d2:	66 27       	eor	r22, r22
    19d4:	67 95       	ror	r22
    19d6:	e6 95       	lsr	r30
    19d8:	e2 2e       	mov	r14, r18
    19da:	a9 2f       	mov	r26, r25
    19dc:	a8 2b       	or	r26, r24
    19de:	fe 2f       	mov	r31, r30
    19e0:	f6 2b       	or	r31, r22
    19e2:	62 2f       	mov	r22, r18
    19e4:	73 2f       	mov	r23, r19
    19e6:	8a 2f       	mov	r24, r26
    19e8:	9f 2f       	mov	r25, r31
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	e6 e0       	ldi	r30, 0x06	; 6
    19f0:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__epilogue_restores__+0x18>

000019f4 <__unpack_f>:
    19f4:	dc 01       	movw	r26, r24
    19f6:	fb 01       	movw	r30, r22
    19f8:	2c 91       	ld	r18, X
    19fa:	11 96       	adiw	r26, 0x01	; 1
    19fc:	3c 91       	ld	r19, X
    19fe:	11 97       	sbiw	r26, 0x01	; 1
    1a00:	12 96       	adiw	r26, 0x02	; 2
    1a02:	8c 91       	ld	r24, X
    1a04:	12 97       	sbiw	r26, 0x02	; 2
    1a06:	48 2f       	mov	r20, r24
    1a08:	4f 77       	andi	r20, 0x7F	; 127
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	98 2f       	mov	r25, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	99 27       	eor	r25, r25
    1a12:	99 1f       	adc	r25, r25
    1a14:	13 96       	adiw	r26, 0x03	; 3
    1a16:	6c 91       	ld	r22, X
    1a18:	13 97       	sbiw	r26, 0x03	; 3
    1a1a:	86 2f       	mov	r24, r22
    1a1c:	88 0f       	add	r24, r24
    1a1e:	89 2b       	or	r24, r25
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	66 1f       	adc	r22, r22
    1a24:	66 27       	eor	r22, r22
    1a26:	66 1f       	adc	r22, r22
    1a28:	61 83       	std	Z+1, r22	; 0x01
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	39 f5       	brne	.+78     	; 0x1a7c <__unpack_f+0x88>
    1a2e:	21 15       	cp	r18, r1
    1a30:	31 05       	cpc	r19, r1
    1a32:	41 05       	cpc	r20, r1
    1a34:	51 05       	cpc	r21, r1
    1a36:	11 f4       	brne	.+4      	; 0x1a3c <__unpack_f+0x48>
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	29 c0       	rjmp	.+82     	; 0x1a8e <__unpack_f+0x9a>
    1a3c:	82 e8       	ldi	r24, 0x82	; 130
    1a3e:	9f ef       	ldi	r25, 0xFF	; 255
    1a40:	93 83       	std	Z+3, r25	; 0x03
    1a42:	82 83       	std	Z+2, r24	; 0x02
    1a44:	67 e0       	ldi	r22, 0x07	; 7
    1a46:	22 0f       	add	r18, r18
    1a48:	33 1f       	adc	r19, r19
    1a4a:	44 1f       	adc	r20, r20
    1a4c:	55 1f       	adc	r21, r21
    1a4e:	6a 95       	dec	r22
    1a50:	d1 f7       	brne	.-12     	; 0x1a46 <__unpack_f+0x52>
    1a52:	83 e0       	ldi	r24, 0x03	; 3
    1a54:	80 83       	st	Z, r24
    1a56:	09 c0       	rjmp	.+18     	; 0x1a6a <__unpack_f+0x76>
    1a58:	22 0f       	add	r18, r18
    1a5a:	33 1f       	adc	r19, r19
    1a5c:	44 1f       	adc	r20, r20
    1a5e:	55 1f       	adc	r21, r21
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	93 81       	ldd	r25, Z+3	; 0x03
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	93 83       	std	Z+3, r25	; 0x03
    1a68:	82 83       	std	Z+2, r24	; 0x02
    1a6a:	20 30       	cpi	r18, 0x00	; 0
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	38 07       	cpc	r19, r24
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	48 07       	cpc	r20, r24
    1a74:	80 e4       	ldi	r24, 0x40	; 64
    1a76:	58 07       	cpc	r21, r24
    1a78:	78 f3       	brcs	.-34     	; 0x1a58 <__unpack_f+0x64>
    1a7a:	20 c0       	rjmp	.+64     	; 0x1abc <__unpack_f+0xc8>
    1a7c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a7e:	91 05       	cpc	r25, r1
    1a80:	79 f4       	brne	.+30     	; 0x1aa0 <__unpack_f+0xac>
    1a82:	21 15       	cp	r18, r1
    1a84:	31 05       	cpc	r19, r1
    1a86:	41 05       	cpc	r20, r1
    1a88:	51 05       	cpc	r21, r1
    1a8a:	19 f4       	brne	.+6      	; 0x1a92 <__unpack_f+0x9e>
    1a8c:	84 e0       	ldi	r24, 0x04	; 4
    1a8e:	80 83       	st	Z, r24
    1a90:	08 95       	ret
    1a92:	44 ff       	sbrs	r20, 4
    1a94:	03 c0       	rjmp	.+6      	; 0x1a9c <__unpack_f+0xa8>
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	80 83       	st	Z, r24
    1a9a:	10 c0       	rjmp	.+32     	; 0x1abc <__unpack_f+0xc8>
    1a9c:	10 82       	st	Z, r1
    1a9e:	0e c0       	rjmp	.+28     	; 0x1abc <__unpack_f+0xc8>
    1aa0:	8f 57       	subi	r24, 0x7F	; 127
    1aa2:	90 40       	sbci	r25, 0x00	; 0
    1aa4:	93 83       	std	Z+3, r25	; 0x03
    1aa6:	82 83       	std	Z+2, r24	; 0x02
    1aa8:	83 e0       	ldi	r24, 0x03	; 3
    1aaa:	80 83       	st	Z, r24
    1aac:	87 e0       	ldi	r24, 0x07	; 7
    1aae:	22 0f       	add	r18, r18
    1ab0:	33 1f       	adc	r19, r19
    1ab2:	44 1f       	adc	r20, r20
    1ab4:	55 1f       	adc	r21, r21
    1ab6:	8a 95       	dec	r24
    1ab8:	d1 f7       	brne	.-12     	; 0x1aae <__unpack_f+0xba>
    1aba:	50 64       	ori	r21, 0x40	; 64
    1abc:	24 83       	std	Z+4, r18	; 0x04
    1abe:	35 83       	std	Z+5, r19	; 0x05
    1ac0:	46 83       	std	Z+6, r20	; 0x06
    1ac2:	57 83       	std	Z+7, r21	; 0x07
    1ac4:	08 95       	ret

00001ac6 <__fpcmp_parts_f>:
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	db 01       	movw	r26, r22
    1aca:	90 81       	ld	r25, Z
    1acc:	92 30       	cpi	r25, 0x02	; 2
    1ace:	08 f4       	brcc	.+2      	; 0x1ad2 <__fpcmp_parts_f+0xc>
    1ad0:	49 c0       	rjmp	.+146    	; 0x1b64 <__fpcmp_parts_f+0x9e>
    1ad2:	8c 91       	ld	r24, X
    1ad4:	82 30       	cpi	r24, 0x02	; 2
    1ad6:	08 f4       	brcc	.+2      	; 0x1ada <__fpcmp_parts_f+0x14>
    1ad8:	45 c0       	rjmp	.+138    	; 0x1b64 <__fpcmp_parts_f+0x9e>
    1ada:	94 30       	cpi	r25, 0x04	; 4
    1adc:	51 f4       	brne	.+20     	; 0x1af2 <__fpcmp_parts_f+0x2c>
    1ade:	61 81       	ldd	r22, Z+1	; 0x01
    1ae0:	84 30       	cpi	r24, 0x04	; 4
    1ae2:	b1 f5       	brne	.+108    	; 0x1b50 <__fpcmp_parts_f+0x8a>
    1ae4:	11 96       	adiw	r26, 0x01	; 1
    1ae6:	2c 91       	ld	r18, X
    1ae8:	11 97       	sbiw	r26, 0x01	; 1
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	26 1b       	sub	r18, r22
    1aee:	31 09       	sbc	r19, r1
    1af0:	41 c0       	rjmp	.+130    	; 0x1b74 <__fpcmp_parts_f+0xae>
    1af2:	84 30       	cpi	r24, 0x04	; 4
    1af4:	21 f0       	breq	.+8      	; 0x1afe <__fpcmp_parts_f+0x38>
    1af6:	92 30       	cpi	r25, 0x02	; 2
    1af8:	41 f4       	brne	.+16     	; 0x1b0a <__fpcmp_parts_f+0x44>
    1afa:	82 30       	cpi	r24, 0x02	; 2
    1afc:	b1 f1       	breq	.+108    	; 0x1b6a <__fpcmp_parts_f+0xa4>
    1afe:	11 96       	adiw	r26, 0x01	; 1
    1b00:	8c 91       	ld	r24, X
    1b02:	11 97       	sbiw	r26, 0x01	; 1
    1b04:	88 23       	and	r24, r24
    1b06:	a1 f1       	breq	.+104    	; 0x1b70 <__fpcmp_parts_f+0xaa>
    1b08:	2d c0       	rjmp	.+90     	; 0x1b64 <__fpcmp_parts_f+0x9e>
    1b0a:	61 81       	ldd	r22, Z+1	; 0x01
    1b0c:	82 30       	cpi	r24, 0x02	; 2
    1b0e:	01 f1       	breq	.+64     	; 0x1b50 <__fpcmp_parts_f+0x8a>
    1b10:	11 96       	adiw	r26, 0x01	; 1
    1b12:	8c 91       	ld	r24, X
    1b14:	11 97       	sbiw	r26, 0x01	; 1
    1b16:	68 17       	cp	r22, r24
    1b18:	d9 f4       	brne	.+54     	; 0x1b50 <__fpcmp_parts_f+0x8a>
    1b1a:	22 81       	ldd	r18, Z+2	; 0x02
    1b1c:	33 81       	ldd	r19, Z+3	; 0x03
    1b1e:	12 96       	adiw	r26, 0x02	; 2
    1b20:	8d 91       	ld	r24, X+
    1b22:	9c 91       	ld	r25, X
    1b24:	13 97       	sbiw	r26, 0x03	; 3
    1b26:	82 17       	cp	r24, r18
    1b28:	93 07       	cpc	r25, r19
    1b2a:	94 f0       	brlt	.+36     	; 0x1b50 <__fpcmp_parts_f+0x8a>
    1b2c:	28 17       	cp	r18, r24
    1b2e:	39 07       	cpc	r19, r25
    1b30:	bc f0       	brlt	.+46     	; 0x1b60 <__fpcmp_parts_f+0x9a>
    1b32:	24 81       	ldd	r18, Z+4	; 0x04
    1b34:	35 81       	ldd	r19, Z+5	; 0x05
    1b36:	46 81       	ldd	r20, Z+6	; 0x06
    1b38:	57 81       	ldd	r21, Z+7	; 0x07
    1b3a:	14 96       	adiw	r26, 0x04	; 4
    1b3c:	8d 91       	ld	r24, X+
    1b3e:	9d 91       	ld	r25, X+
    1b40:	0d 90       	ld	r0, X+
    1b42:	bc 91       	ld	r27, X
    1b44:	a0 2d       	mov	r26, r0
    1b46:	82 17       	cp	r24, r18
    1b48:	93 07       	cpc	r25, r19
    1b4a:	a4 07       	cpc	r26, r20
    1b4c:	b5 07       	cpc	r27, r21
    1b4e:	18 f4       	brcc	.+6      	; 0x1b56 <__fpcmp_parts_f+0x90>
    1b50:	66 23       	and	r22, r22
    1b52:	41 f0       	breq	.+16     	; 0x1b64 <__fpcmp_parts_f+0x9e>
    1b54:	0d c0       	rjmp	.+26     	; 0x1b70 <__fpcmp_parts_f+0xaa>
    1b56:	28 17       	cp	r18, r24
    1b58:	39 07       	cpc	r19, r25
    1b5a:	4a 07       	cpc	r20, r26
    1b5c:	5b 07       	cpc	r21, r27
    1b5e:	28 f4       	brcc	.+10     	; 0x1b6a <__fpcmp_parts_f+0xa4>
    1b60:	66 23       	and	r22, r22
    1b62:	31 f0       	breq	.+12     	; 0x1b70 <__fpcmp_parts_f+0xaa>
    1b64:	21 e0       	ldi	r18, 0x01	; 1
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	05 c0       	rjmp	.+10     	; 0x1b74 <__fpcmp_parts_f+0xae>
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <__fpcmp_parts_f+0xae>
    1b70:	2f ef       	ldi	r18, 0xFF	; 255
    1b72:	3f ef       	ldi	r19, 0xFF	; 255
    1b74:	c9 01       	movw	r24, r18
    1b76:	08 95       	ret

00001b78 <__udivmodhi4>:
    1b78:	aa 1b       	sub	r26, r26
    1b7a:	bb 1b       	sub	r27, r27
    1b7c:	51 e1       	ldi	r21, 0x11	; 17
    1b7e:	07 c0       	rjmp	.+14     	; 0x1b8e <__udivmodhi4_ep>

00001b80 <__udivmodhi4_loop>:
    1b80:	aa 1f       	adc	r26, r26
    1b82:	bb 1f       	adc	r27, r27
    1b84:	a6 17       	cp	r26, r22
    1b86:	b7 07       	cpc	r27, r23
    1b88:	10 f0       	brcs	.+4      	; 0x1b8e <__udivmodhi4_ep>
    1b8a:	a6 1b       	sub	r26, r22
    1b8c:	b7 0b       	sbc	r27, r23

00001b8e <__udivmodhi4_ep>:
    1b8e:	88 1f       	adc	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	5a 95       	dec	r21
    1b94:	a9 f7       	brne	.-22     	; 0x1b80 <__udivmodhi4_loop>
    1b96:	80 95       	com	r24
    1b98:	90 95       	com	r25
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	08 95       	ret

00001ba0 <__prologue_saves__>:
    1ba0:	2f 92       	push	r2
    1ba2:	3f 92       	push	r3
    1ba4:	4f 92       	push	r4
    1ba6:	5f 92       	push	r5
    1ba8:	6f 92       	push	r6
    1baa:	7f 92       	push	r7
    1bac:	8f 92       	push	r8
    1bae:	9f 92       	push	r9
    1bb0:	af 92       	push	r10
    1bb2:	bf 92       	push	r11
    1bb4:	cf 92       	push	r12
    1bb6:	df 92       	push	r13
    1bb8:	ef 92       	push	r14
    1bba:	ff 92       	push	r15
    1bbc:	0f 93       	push	r16
    1bbe:	1f 93       	push	r17
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	ca 1b       	sub	r28, r26
    1bca:	db 0b       	sbc	r29, r27
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	09 94       	ijmp

00001bd8 <__epilogue_restores__>:
    1bd8:	2a 88       	ldd	r2, Y+18	; 0x12
    1bda:	39 88       	ldd	r3, Y+17	; 0x11
    1bdc:	48 88       	ldd	r4, Y+16	; 0x10
    1bde:	5f 84       	ldd	r5, Y+15	; 0x0f
    1be0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1be2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1be4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1be6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1be8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bea:	b9 84       	ldd	r11, Y+9	; 0x09
    1bec:	c8 84       	ldd	r12, Y+8	; 0x08
    1bee:	df 80       	ldd	r13, Y+7	; 0x07
    1bf0:	ee 80       	ldd	r14, Y+6	; 0x06
    1bf2:	fd 80       	ldd	r15, Y+5	; 0x05
    1bf4:	0c 81       	ldd	r16, Y+4	; 0x04
    1bf6:	1b 81       	ldd	r17, Y+3	; 0x03
    1bf8:	aa 81       	ldd	r26, Y+2	; 0x02
    1bfa:	b9 81       	ldd	r27, Y+1	; 0x01
    1bfc:	ce 0f       	add	r28, r30
    1bfe:	d1 1d       	adc	r29, r1
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	ed 01       	movw	r28, r26
    1c0c:	08 95       	ret

00001c0e <itoa>:
    1c0e:	fb 01       	movw	r30, r22
    1c10:	9f 01       	movw	r18, r30
    1c12:	e8 94       	clt
    1c14:	42 30       	cpi	r20, 0x02	; 2
    1c16:	c4 f0       	brlt	.+48     	; 0x1c48 <itoa+0x3a>
    1c18:	45 32       	cpi	r20, 0x25	; 37
    1c1a:	b4 f4       	brge	.+44     	; 0x1c48 <itoa+0x3a>
    1c1c:	4a 30       	cpi	r20, 0x0A	; 10
    1c1e:	29 f4       	brne	.+10     	; 0x1c2a <itoa+0x1c>
    1c20:	97 fb       	bst	r25, 7
    1c22:	1e f4       	brtc	.+6      	; 0x1c2a <itoa+0x1c>
    1c24:	90 95       	com	r25
    1c26:	81 95       	neg	r24
    1c28:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2a:	64 2f       	mov	r22, r20
    1c2c:	77 27       	eor	r23, r23
    1c2e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__udivmodhi4>
    1c32:	80 5d       	subi	r24, 0xD0	; 208
    1c34:	8a 33       	cpi	r24, 0x3A	; 58
    1c36:	0c f0       	brlt	.+2      	; 0x1c3a <itoa+0x2c>
    1c38:	89 5d       	subi	r24, 0xD9	; 217
    1c3a:	81 93       	st	Z+, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	a1 f7       	brne	.-24     	; 0x1c2a <itoa+0x1c>
    1c42:	16 f4       	brtc	.+4      	; 0x1c48 <itoa+0x3a>
    1c44:	5d e2       	ldi	r21, 0x2D	; 45
    1c46:	51 93       	st	Z+, r21
    1c48:	10 82       	st	Z, r1
    1c4a:	c9 01       	movw	r24, r18
    1c4c:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <strrev>

00001c50 <strrev>:
    1c50:	dc 01       	movw	r26, r24
    1c52:	fc 01       	movw	r30, r24
    1c54:	67 2f       	mov	r22, r23
    1c56:	71 91       	ld	r23, Z+
    1c58:	77 23       	and	r23, r23
    1c5a:	e1 f7       	brne	.-8      	; 0x1c54 <strrev+0x4>
    1c5c:	32 97       	sbiw	r30, 0x02	; 2
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <strrev+0x18>
    1c60:	7c 91       	ld	r23, X
    1c62:	6d 93       	st	X+, r22
    1c64:	70 83       	st	Z, r23
    1c66:	62 91       	ld	r22, -Z
    1c68:	ae 17       	cp	r26, r30
    1c6a:	bf 07       	cpc	r27, r31
    1c6c:	c8 f3       	brcs	.-14     	; 0x1c60 <strrev+0x10>
    1c6e:	08 95       	ret

00001c70 <_exit>:
    1c70:	f8 94       	cli

00001c72 <__stop_program>:
    1c72:	ff cf       	rjmp	.-2      	; 0x1c72 <__stop_program>
